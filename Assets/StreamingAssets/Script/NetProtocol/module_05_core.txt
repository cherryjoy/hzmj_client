enumMSGID_MODULE_05 = {
	ID_MODULE_05_BEGIN = 1280,
	ID_ROLE_REQ = 1281,
	ID_ROLE_RES = 1282,
	ID_ROLE_SESSION_ID_NOTICE = 1283,
	ID_ERROR_CODE_NOTICE = 1284,
	ID_GAME_ROOM_CREATE_REQ = 1285,
	ID_GAME_ROOM_CREATE_RES = 1286,
	ID_GAME_ROOM_ENTER_REQ = 1287,
	ID_GAME_ROOM_ENTER_RES = 1288,
	ID_GAME_READY_REQ = 1289,
	ID_GAME_READY_RES = 1290,
	ID_GAME_PLAY_CARD_REQ = 1291,
	ID_GAME_PLAY_CARD_RES = 1292,
	ID_GAME_PENG_CARD_REQ = 1293,
	ID_GAME_PENG_CARD_RES = 1294,
	ID_GAME_GANG_CARD_REQ = 1295,
	ID_GAME_GANG_CARD_RES = 1296,
	ID_GAME_WIN_GAME_REQ = 1297,
	ID_GAME_WIN_GAME_RES = 1298,
	ID_GAME_ROOM_CARD_REQ = 1299,
	ID_GAME_ROOM_CARD_SYNC = 1300,
	ID_GAME_RESULT_REQ = 1301,
	ID_GAME_RESULT_RES = 1302,
	ID_GAME_GET_CARD_REQ = 1303,
	ID_GAME_GET_CARD_RES = 1304,
	ID_GAME_DELETE_ROOM_REQ = 1305,
	ID_GAME_DELETE_ROOM_RES = 1306,
	ID_GAME_QUIT_ROOM_REQ = 1307,
	ID_GAME_QUIT_ROOM_RES = 1308,
	ID_GAME_PASS_CARD_REQ = 1309,
	ID_GAME_PASS_CARD_RES = 1310,
	ID_GAME_WIN_CARD_REQ = 1311,
	ID_GAME_WIN_CARD_RES = 1312,
	ID_GAME_BALANCE_REQ = 1313,
	ID_GAME_BALANCE_RES = 1314,
	ID_CLIENT_AUTO_CLOSE_SOCKET_NOTICE = 1315,
	ID_SERVER_AUTO_CLOSE_SOCKET_NOTICE = 1316,
	ID_GAME_REENTER_STATE_SYNC = 1318,
	ID_GAME_ROOM_CHAT_REQ = 1319,
	ID_GAME_ROOM_CHAT_RES = 1320,
	ID_GAME_HEARTBEAT_REQ = 1321,
	ID_GAME_HEARTBEAT_RES = 1322,
	ID_ROLE_BASE_INFO_REQ = 1323,
	ID_ROLE_BASE_INFO_RES = 1324,
	ID_ROLE_NUMERIC_VALUE_REQ = 1325,
	ID_ROLE_NUMERIC_VALUE_RES = 1326,
	ID_ROOM_DELETE_CONFIRM_REQ = 1337,
	ID_ROOM_DELETE_CONFIRM_RES = 1338,
	ID_ROOM_DELETE_AGREE_REQ = 1339,
	ID_ROOM_DELETE_AGREE_RES = 1340,
	ID_ROOM_BALANCE_RECORD_REQ = 1341,
	ID_ROOM_BALANCE_RECORD_RES = 1342,
	ID_ROOM_PLAY_BACK_REQ = 1343,
	ID_ROOM_PLAY_BACK_RES = 1344,
	ID_PX_GAME_WIN_GAME_REQ = 1345,
	ID_PX_GAME_WIN_GAME_RES = 1346,
	ID_PX_GAME_ADD_CODE_REQ = 1347,
	ID_PX_GAME_ADD_CODE_RES = 1348,
	ID_MODULE_05_END = 1535,
}

enumCARD_TYPE = {
	CARD_WANG_TYPE = 0,
	CARD_TONG_TYPE = 1,
	CARD_TIAO_TYPE = 2,
	CARD_HONG_TYPE = 3,
	CARD_BBAN_TYPE = 4,
	CARD_FCAI_TYPE = 5,
}

enumDIRECTION_TYPE = {
	DIRECTION_EAST = 1,
	DIRECTION_NORTH = 2,
	DIRECTION_WEST = 3,
	DIRECTION_SOUTH = 4,
}

enumCARD_GANG_TYPE = {
	CARD_GANG_M_TYPE = 0,
	CARD_GANG_A_TYPE = 1,
	CARD_GANG_G_TYPE = 2,
}

enumCARD_PASS_TYPE = {
	CARD_PASS_NULL_CARD = 0,
	CARD_PASS_DEAL_CARD = 1,
}

enumCARD_ACTION_TYPE = {
	CARD_ACTION_NULL = 0,
	CARD_ACTION_PLAY = 1,
	CARD_ACTION_DEAL = 2,
	CARD_ACTION_PENG = 3,
	CARD_ACTION_GANG = 4,
	CARD_ACTION_WINN = 5,
}

enumEMCJLogInOutReason = {
	EMCJ_LOGIN_GAME = 1,
	EMCJ_LEAVE_LEAVEGAME = 2,
	EMCJ_LEAVE_REPEAT_LOGIN = 3,
	EMCJ_LEAVE_KICKOUT = 4,
	EMCJ_LEAVE_ABNORMAL = 5,
	EMCJ_LEAVE_SIGUSR2 = 6,
	EMCJ_LEAVE_PING_ERROR = 7,
	EMCJ_LEAVE_CHENMI = 8,
	EMCJ_LEAVE_COMM_STATE = 9,
	EMCJ_LEAVE_LOAD_ERROR = 10,
	EMCJ_LEAVE_SELF = 11,
}

enumEMCJErrorCode = {
	EMCJ_CARD_NOT_ENOUGH = 1000,
	EMCJ_ROOM_NOT_EXIST = 1001,
	EMCJ_READY_NOT_EXIST = 1002,
	EMCJ_ROOM_OVER = 1003,
	EMCJ_NOT_REAL_WIN = 1004,
	EMCJ_NOT_REPLY_RESULT = 1005,
	EMCJ_ROOM_FULL = 1006,
	EMCJ_NOT_IN_ROOM = 1007,
	EMCJ_NO_ENTER_ROOM = 1008,
	EMCJ_PLAYER_SESSION_FAIL = 10000,
	EMCJ_USER_ACCOUNT_CREATE_DUPLICATE_NAME = 10001,
	EMCJ_USER_ACCOUNT_CREATE_INVALID_NAME = 10002,
	EMCJ_USER_SESSION_FAIL = 10003,
	EMCJ_ERR_TIMEOUT = 10004,
}

enumROOM_CHAT_TYPE = {
	EM_CHAT_WORD_TYPE = 1,
	EM_CHAT_VOIC_TYPE = 2,
	EM_CHAT_EXPR_TYPE = 3,
}

enumMAHJONG_TYPE = {
	EM_HONG_TYPE = 0,
	EM_PEIX_TYPE = 1,
}

enumPX_OVER_TYPE = {
	EM_OVER_POINT_GUN = 0,
	EM_OVER_MEET_GUN = 1,
	EM_OVER_OWN_WIN = 2,
}

enumOP_CODE_TYPE = {
	OP_DEAL = 1,
	OP_PLAY = 2,
	OP_PENG = 3,
	OP_GANG = 4,
	OP_STEAL = 5,
	OP_WIN = 6,
	OP_DRAW = 7,
}

-- PB_MSGID_MODULE_05
PB_MSGID_MODULE_05 = {}
PB_MSGID_MODULE_05.__index = PB_MSGID_MODULE_05
function PB_MSGID_MODULE_05.Create()
	local obj = setmetatable({},PB_MSGID_MODULE_05)
	return obj
end

function PB_MSGID_MODULE_05.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_MSGID_MODULE_05.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_MSGID_MODULE_05.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_TYPE
PB_CARD_TYPE = {}
PB_CARD_TYPE.__index = PB_CARD_TYPE
function PB_CARD_TYPE.Create()
	local obj = setmetatable({},PB_CARD_TYPE)
	return obj
end

function PB_CARD_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_DIRECTION_TYPE
PB_DIRECTION_TYPE = {}
PB_DIRECTION_TYPE.__index = PB_DIRECTION_TYPE
function PB_DIRECTION_TYPE.Create()
	local obj = setmetatable({},PB_DIRECTION_TYPE)
	return obj
end

function PB_DIRECTION_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_DIRECTION_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_DIRECTION_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_GANG_TYPE
PB_CARD_GANG_TYPE = {}
PB_CARD_GANG_TYPE.__index = PB_CARD_GANG_TYPE
function PB_CARD_GANG_TYPE.Create()
	local obj = setmetatable({},PB_CARD_GANG_TYPE)
	return obj
end

function PB_CARD_GANG_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_GANG_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_GANG_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_PASS_TYPE
PB_CARD_PASS_TYPE = {}
PB_CARD_PASS_TYPE.__index = PB_CARD_PASS_TYPE
function PB_CARD_PASS_TYPE.Create()
	local obj = setmetatable({},PB_CARD_PASS_TYPE)
	return obj
end

function PB_CARD_PASS_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_PASS_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_PASS_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_ACTION_TYPE
PB_CARD_ACTION_TYPE = {}
PB_CARD_ACTION_TYPE.__index = PB_CARD_ACTION_TYPE
function PB_CARD_ACTION_TYPE.Create()
	local obj = setmetatable({},PB_CARD_ACTION_TYPE)
	return obj
end

function PB_CARD_ACTION_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_ACTION_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_ACTION_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_LOGIN_OUT_REASON
PB_LOGIN_OUT_REASON = {}
PB_LOGIN_OUT_REASON.__index = PB_LOGIN_OUT_REASON
function PB_LOGIN_OUT_REASON.Create()
	local obj = setmetatable({},PB_LOGIN_OUT_REASON)
	return obj
end

function PB_LOGIN_OUT_REASON.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_LOGIN_OUT_REASON.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_LOGIN_OUT_REASON.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CJ_ERROR_CODE
PB_CJ_ERROR_CODE = {}
PB_CJ_ERROR_CODE.__index = PB_CJ_ERROR_CODE
function PB_CJ_ERROR_CODE.Create()
	local obj = setmetatable({},PB_CJ_ERROR_CODE)
	return obj
end

function PB_CJ_ERROR_CODE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CJ_ERROR_CODE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CJ_ERROR_CODE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_ROOM_CHAT_TYPE
PB_ROOM_CHAT_TYPE = {}
PB_ROOM_CHAT_TYPE.__index = PB_ROOM_CHAT_TYPE
function PB_ROOM_CHAT_TYPE.Create()
	local obj = setmetatable({},PB_ROOM_CHAT_TYPE)
	return obj
end

function PB_ROOM_CHAT_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_ROOM_CHAT_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_ROOM_CHAT_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_MAHJONG_TYPE
PB_MAHJONG_TYPE = {}
PB_MAHJONG_TYPE.__index = PB_MAHJONG_TYPE
function PB_MAHJONG_TYPE.Create()
	local obj = setmetatable({},PB_MAHJONG_TYPE)
	return obj
end

function PB_MAHJONG_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_MAHJONG_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_MAHJONG_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_PX_OVER_TYPE
PB_PX_OVER_TYPE = {}
PB_PX_OVER_TYPE.__index = PB_PX_OVER_TYPE
function PB_PX_OVER_TYPE.Create()
	local obj = setmetatable({},PB_PX_OVER_TYPE)
	return obj
end

function PB_PX_OVER_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_PX_OVER_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_PX_OVER_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- RoleBaseInfo
RoleBaseInfo = {}
RoleBaseInfo.__index = RoleBaseInfo
function RoleBaseInfo.Create()
	local obj = setmetatable({},RoleBaseInfo)
	return obj
end

function RoleBaseInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.rolename = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.avatar = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.integral = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.host = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.makers = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.status = deserialize_int32()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.direct = deserialize_int32()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.sex = deserialize_int32()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.addcode = deserialize_int32()
	end
	return obj
end

function RoleBaseInfo.Serialize(obj)
	local fieldCount = 11
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.rolename ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.avatar ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.imageurl ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.integral ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.host ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.makers ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.status ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.direct ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.sex ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.addcode ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	serialize_optional(flag)
	if(obj.rolename ~= nil) then
		serialize_string(obj.rolename)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.avatar ~= nil) then
		serialize_int32(obj.avatar)
	end
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	if(obj.integral ~= nil) then
		serialize_int32(obj.integral)
	end
	if(obj.host ~= nil) then
		serialize_int32(obj.host)
	end
	if(obj.makers ~= nil) then
		serialize_int32(obj.makers)
	end
	if(obj.status ~= nil) then
		serialize_int32(obj.status)
	end
	if(obj.direct ~= nil) then
		serialize_int32(obj.direct)
	end
	if(obj.sex ~= nil) then
		serialize_int32(obj.sex)
	end
	if(obj.addcode ~= nil) then
		serialize_int32(obj.addcode)
	end
end

function RoleBaseInfo.GetSize(obj)
	local size = 0
	if (obj.rolename ~= nil) then
		local sizeStr = string.len(obj.rolename)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.avatar ~= nil) then
		size = size + 4
	end
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.integral ~= nil) then
		size = size + 4
	end
	if (obj.host ~= nil) then
		size = size + 4
	end
	if (obj.makers ~= nil) then
		size = size + 4
	end
	if (obj.status ~= nil) then
		size = size + 4
	end
	if (obj.direct ~= nil) then
		size = size + 4
	end
	if (obj.sex ~= nil) then
		size = size + 4
	end
	if (obj.addcode ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- RoleStateInfo
RoleStateInfo = {}
RoleStateInfo.__index = RoleStateInfo
function RoleStateInfo.Create()
	local obj = setmetatable({},RoleStateInfo)
	return obj
end

function RoleStateInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.makers = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.addcode = deserialize_int32()
	end
	return obj
end

function RoleStateInfo.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.state ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.makers ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.addcode ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if(obj.makers ~= nil) then
		serialize_int32(obj.makers)
	end
	if(obj.addcode ~= nil) then
		serialize_int32(obj.addcode)
	end
end

function RoleStateInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.makers ~= nil) then
		size = size + 4
	end
	if (obj.addcode ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBCard
PBCard = {}
PBCard.__index = PBCard
function PBCard.Create()
	local obj = setmetatable({},PBCard)
	return obj
end

function PBCard.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.type_id = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.code_id = deserialize_int32()
	end
	return obj
end

function PBCard.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.type_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.code_id ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.type_id ~= nil) then
		serialize_int32(obj.type_id)
	end
	if(obj.code_id ~= nil) then
		serialize_int32(obj.code_id)
	end
end

function PBCard.GetSize(obj)
	local size = 0
	if (obj.type_id ~= nil) then
		size = size + 4
	end
	if (obj.code_id ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoleInfoReq
PBMsgRoleInfoReq = {}
PBMsgRoleInfoReq.__index = PBMsgRoleInfoReq
function PBMsgRoleInfoReq.Create()
	local obj = setmetatable({},PBMsgRoleInfoReq)
	return obj
end

function PBMsgRoleInfoReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.UserName = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.Passwd = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.GameID = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.ServerID = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.SessionID = deserialize_int64()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.OS = deserialize_string()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.Mac = deserialize_string()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.IdentityID = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.EratingID = deserialize_int32()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.hardware_sin1 = deserialize_string()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.hardware_sin2 = deserialize_string()
	end
	if(has_optional_flag(11,optionLength,option)) then
		obj.ad_id = deserialize_string()
	end
	if(has_optional_flag(12,optionLength,option)) then
		obj.client_type = deserialize_int32()
	end
	if(has_optional_flag(13,optionLength,option)) then
		obj.token = deserialize_string()
	end
	if(has_optional_flag(14,optionLength,option)) then
		obj.unix_time = deserialize_int32()
	end
	if(has_optional_flag(15,optionLength,option)) then
		obj.cp_id = deserialize_string()
	end
	if(has_optional_flag(16,optionLength,option)) then
		obj.sdk = deserialize_string()
	end
	if(has_optional_flag(17,optionLength,option)) then
		obj.uid = deserialize_string()
	end
	if(has_optional_flag(18,optionLength,option)) then
		obj.idcode = deserialize_string()
	end
	if(has_optional_flag(19,optionLength,option)) then
		obj.adult = deserialize_int32()
	end
	if(has_optional_flag(20,optionLength,option)) then
		obj.CodeVersion = deserialize_string()
	end
	if(has_optional_flag(21,optionLength,option)) then
		obj.openid = deserialize_string()
	end
	return obj
end

function PBMsgRoleInfoReq.Serialize(obj)
	local fieldCount = 22
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.UserName ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.Passwd ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.GameID ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.ServerID ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.SessionID ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.OS ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.Mac ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.IdentityID ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.EratingID ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.hardware_sin1 ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.hardware_sin2 ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	if(obj.ad_id ~= nil) then
		flag[12] = true
	else
		flag[12] = false
	end
	if(obj.client_type ~= nil) then
		flag[13] = true
	else
		flag[13] = false
	end
	if(obj.token ~= nil) then
		flag[14] = true
	else
		flag[14] = false
	end
	if(obj.unix_time ~= nil) then
		flag[15] = true
	else
		flag[15] = false
	end
	if(obj.cp_id ~= nil) then
		flag[16] = true
	else
		flag[16] = false
	end
	if(obj.sdk ~= nil) then
		flag[17] = true
	else
		flag[17] = false
	end
	if(obj.uid ~= nil) then
		flag[18] = true
	else
		flag[18] = false
	end
	if(obj.idcode ~= nil) then
		flag[19] = true
	else
		flag[19] = false
	end
	if(obj.adult ~= nil) then
		flag[20] = true
	else
		flag[20] = false
	end
	if(obj.CodeVersion ~= nil) then
		flag[21] = true
	else
		flag[21] = false
	end
	if(obj.openid ~= nil) then
		flag[22] = true
	else
		flag[22] = false
	end
	serialize_optional(flag)
	if(obj.UserName ~= nil) then
		serialize_string(obj.UserName)
	end
	if(obj.Passwd ~= nil) then
		serialize_string(obj.Passwd)
	end
	if(obj.GameID ~= nil) then
		serialize_int32(obj.GameID)
	end
	if(obj.ServerID ~= nil) then
		serialize_string(obj.ServerID)
	end
	if(obj.SessionID ~= nil) then
		serialize_int64(obj.SessionID)
	end
	if(obj.OS ~= nil) then
		serialize_string(obj.OS)
	end
	if(obj.Mac ~= nil) then
		serialize_string(obj.Mac)
	end
	if(obj.IdentityID ~= nil) then
		serialize_string(obj.IdentityID)
	end
	if(obj.EratingID ~= nil) then
		serialize_int32(obj.EratingID)
	end
	if(obj.hardware_sin1 ~= nil) then
		serialize_string(obj.hardware_sin1)
	end
	if(obj.hardware_sin2 ~= nil) then
		serialize_string(obj.hardware_sin2)
	end
	if(obj.ad_id ~= nil) then
		serialize_string(obj.ad_id)
	end
	if(obj.client_type ~= nil) then
		serialize_int32(obj.client_type)
	end
	if(obj.token ~= nil) then
		serialize_string(obj.token)
	end
	if(obj.unix_time ~= nil) then
		serialize_int32(obj.unix_time)
	end
	if(obj.cp_id ~= nil) then
		serialize_string(obj.cp_id)
	end
	if(obj.sdk ~= nil) then
		serialize_string(obj.sdk)
	end
	if(obj.uid ~= nil) then
		serialize_string(obj.uid)
	end
	if(obj.idcode ~= nil) then
		serialize_string(obj.idcode)
	end
	if(obj.adult ~= nil) then
		serialize_int32(obj.adult)
	end
	if(obj.CodeVersion ~= nil) then
		serialize_string(obj.CodeVersion)
	end
	if(obj.openid ~= nil) then
		serialize_string(obj.openid)
	end
end

function PBMsgRoleInfoReq.GetSize(obj)
	local size = 0
	if (obj.UserName ~= nil) then
		local sizeStr = string.len(obj.UserName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.Passwd ~= nil) then
		local sizeStr = string.len(obj.Passwd)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.GameID ~= nil) then
		size = size + 4
	end
	if (obj.ServerID ~= nil) then
		local sizeStr = string.len(obj.ServerID)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.SessionID ~= nil) then
		size = size + 8
	end
	if (obj.OS ~= nil) then
		local sizeStr = string.len(obj.OS)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.Mac ~= nil) then
		local sizeStr = string.len(obj.Mac)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.IdentityID ~= nil) then
		local sizeStr = string.len(obj.IdentityID)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.EratingID ~= nil) then
		size = size + 4
	end
	if (obj.hardware_sin1 ~= nil) then
		local sizeStr = string.len(obj.hardware_sin1)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.hardware_sin2 ~= nil) then
		local sizeStr = string.len(obj.hardware_sin2)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.ad_id ~= nil) then
		local sizeStr = string.len(obj.ad_id)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.client_type ~= nil) then
		size = size + 4
	end
	if (obj.token ~= nil) then
		local sizeStr = string.len(obj.token)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.unix_time ~= nil) then
		size = size + 4
	end
	if (obj.cp_id ~= nil) then
		local sizeStr = string.len(obj.cp_id)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.sdk ~= nil) then
		local sizeStr = string.len(obj.sdk)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.uid ~= nil) then
		local sizeStr = string.len(obj.uid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.idcode ~= nil) then
		local sizeStr = string.len(obj.idcode)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.adult ~= nil) then
		size = size + 4
	end
	if (obj.CodeVersion ~= nil) then
		local sizeStr = string.len(obj.CodeVersion)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.openid ~= nil) then
		local sizeStr = string.len(obj.openid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 9
	return size
end

-- PBMsgRoleInfoRes
PBMsgRoleInfoRes = {}
PBMsgRoleInfoRes.__index = PBMsgRoleInfoRes
function PBMsgRoleInfoRes.Create()
	local obj = setmetatable({},PBMsgRoleInfoRes)
	return obj
end

function PBMsgRoleInfoRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.RoleName = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.RoleID = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.server_time = deserialize_int64()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.erating_id = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.userName = deserialize_string()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.integral = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.nickname = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.openid = deserialize_string()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.sex = deserialize_int32()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.province = deserialize_string()
	end
	if(has_optional_flag(11,optionLength,option)) then
		obj.city = deserialize_string()
	end
	if(has_optional_flag(12,optionLength,option)) then
		obj.country = deserialize_string()
	end
	if(has_optional_flag(13,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end

	if (fieldCount >= 15) then
		obj.privilege = deserialize_string_array()
	end
	if(has_optional_flag(14,optionLength,option)) then
		obj.unionid = deserialize_string()
	end
	if(has_optional_flag(15,optionLength,option)) then
		obj.address = deserialize_string()
	end
	return obj
end

function PBMsgRoleInfoRes.Serialize(obj)
	local fieldCount = 17
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.RoleName ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.RoleID ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.server_time ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.erating_id ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.userName ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.integral ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.room_pass ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.nickname ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.openid ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.sex ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.province ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	if(obj.city ~= nil) then
		flag[12] = true
	else
		flag[12] = false
	end
	if(obj.country ~= nil) then
		flag[13] = true
	else
		flag[13] = false
	end
	if(obj.imageurl ~= nil) then
		flag[14] = true
	else
		flag[14] = false
	end
	if(obj.unionid ~= nil) then
		flag[15] = true
	else
		flag[15] = false
	end
	if(obj.address ~= nil) then
		flag[16] = true
	else
		flag[16] = false
	end
	serialize_optional(flag)
	if(obj.RoleName ~= nil) then
		serialize_string(obj.RoleName)
	end
	if(obj.RoleID ~= nil) then
		serialize_int32(obj.RoleID)
	end
	if(obj.server_time ~= nil) then
		serialize_int64(obj.server_time)
	end
	if(obj.erating_id ~= nil) then
		serialize_int32(obj.erating_id)
	end
	if(obj.userName ~= nil) then
		serialize_string(obj.userName)
	end
	if(obj.integral ~= nil) then
		serialize_int32(obj.integral)
	end
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
	if(obj.nickname ~= nil) then
		serialize_string(obj.nickname)
	end
	if(obj.openid ~= nil) then
		serialize_string(obj.openid)
	end
	if(obj.sex ~= nil) then
		serialize_int32(obj.sex)
	end
	if(obj.province ~= nil) then
		serialize_string(obj.province)
	end
	if(obj.city ~= nil) then
		serialize_string(obj.city)
	end
	if(obj.country ~= nil) then
		serialize_string(obj.country)
	end
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	serialize_string_array(obj.privilege)
	if(obj.unionid ~= nil) then
		serialize_string(obj.unionid)
	end
	if(obj.address ~= nil) then
		serialize_string(obj.address)
	end
end

function PBMsgRoleInfoRes.GetSize(obj)
	local size = 0
	if (obj.RoleName ~= nil) then
		local sizeStr = string.len(obj.RoleName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.RoleID ~= nil) then
		size = size + 4
	end
	if (obj.server_time ~= nil) then
		size = size + 8
	end
	if (obj.erating_id ~= nil) then
		size = size + 4
	end
	if (obj.userName ~= nil) then
		local sizeStr = string.len(obj.userName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.integral ~= nil) then
		size = size + 4
	end
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	if (obj.nickname ~= nil) then
		local sizeStr = string.len(obj.nickname)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.openid ~= nil) then
		local sizeStr = string.len(obj.openid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.sex ~= nil) then
		size = size + 4
	end
	if (obj.province ~= nil) then
		local sizeStr = string.len(obj.province)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.city ~= nil) then
		local sizeStr = string.len(obj.city)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.country ~= nil) then
		local sizeStr = string.len(obj.country)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.privilege ~= nil) then
		for i=1,#(obj.privilege) do
			local sizeStr = string.len(obj.privilege[i])
			size = size + serialize_get_str_actual_size(sizeStr)
		end
	end
	if (obj.unionid ~= nil) then
		local sizeStr = string.len(obj.unionid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.address ~= nil) then
		local sizeStr = string.len(obj.address)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 13
	return size
end

-- PBMsgRoleSessionIdNotice
PBMsgRoleSessionIdNotice = {}
PBMsgRoleSessionIdNotice.__index = PBMsgRoleSessionIdNotice
function PBMsgRoleSessionIdNotice.Create()
	local obj = setmetatable({},PBMsgRoleSessionIdNotice)
	return obj
end

function PBMsgRoleSessionIdNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.session_id = deserialize_int64()
	end
	return obj
end

function PBMsgRoleSessionIdNotice.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.session_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.session_id ~= nil) then
		serialize_int64(obj.session_id)
	end
end

function PBMsgRoleSessionIdNotice.GetSize(obj)
	local size = 0
	if (obj.session_id ~= nil) then
		size = size + 8
	end
	size = size + 6
	return size
end

-- PBMsgCreateRoomReq
PBMsgCreateRoomReq = {}
PBMsgCreateRoomReq.__index = PBMsgCreateRoomReq
function PBMsgCreateRoomReq.Create()
	local obj = setmetatable({},PBMsgCreateRoomReq)
	return obj
end

function PBMsgCreateRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.unid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.addition = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.roomtype = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.pairwin = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.addcode = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.muchwin = deserialize_int32()
	end
	return obj
end

function PBMsgCreateRoomReq.Serialize(obj)
	local fieldCount = 8
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.unid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.addition ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.roomtype ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.pairwin ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.addcode ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.muchwin ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	serialize_optional(flag)
	if(obj.unid ~= nil) then
		serialize_int32(obj.unid)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
	if(obj.roomtype ~= nil) then
		serialize_int32(obj.roomtype)
	end
	if(obj.pairwin ~= nil) then
		serialize_int32(obj.pairwin)
	end
	if(obj.addcode ~= nil) then
		serialize_int32(obj.addcode)
	end
	if(obj.muchwin ~= nil) then
		serialize_int32(obj.muchwin)
	end
end

function PBMsgCreateRoomReq.GetSize(obj)
	local size = 0
	if (obj.unid ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	if (obj.roomtype ~= nil) then
		size = size + 4
	end
	if (obj.pairwin ~= nil) then
		size = size + 4
	end
	if (obj.addcode ~= nil) then
		size = size + 4
	end
	if (obj.muchwin ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- PBMsgCreateRoomRes
PBMsgCreateRoomRes = {}
PBMsgCreateRoomRes.__index = PBMsgCreateRoomRes
function PBMsgCreateRoomRes.Create()
	local obj = setmetatable({},PBMsgCreateRoomRes)
	return obj
end

function PBMsgCreateRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.addition = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.roomtype = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.pairwin = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.addcode = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.muchwin = deserialize_int32()
	end
	return obj
end

function PBMsgCreateRoomRes.Serialize(obj)
	local fieldCount = 8
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.passwd ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.addition ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.roomtype ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.pairwin ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.addcode ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.muchwin ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	serialize_optional(flag)
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
	if(obj.roomtype ~= nil) then
		serialize_int32(obj.roomtype)
	end
	if(obj.pairwin ~= nil) then
		serialize_int32(obj.pairwin)
	end
	if(obj.addcode ~= nil) then
		serialize_int32(obj.addcode)
	end
	if(obj.muchwin ~= nil) then
		serialize_int32(obj.muchwin)
	end
end

function PBMsgCreateRoomRes.GetSize(obj)
	local size = 0
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	if (obj.roomtype ~= nil) then
		size = size + 4
	end
	if (obj.pairwin ~= nil) then
		size = size + 4
	end
	if (obj.addcode ~= nil) then
		size = size + 4
	end
	if (obj.muchwin ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- PBMsgEnterRoomReq
PBMsgEnterRoomReq = {}
PBMsgEnterRoomReq.__index = PBMsgEnterRoomReq
function PBMsgEnterRoomReq.Create()
	local obj = setmetatable({},PBMsgEnterRoomReq)
	return obj
end

function PBMsgEnterRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.roomtype = deserialize_int32()
	end
	return obj
end

function PBMsgEnterRoomReq.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.passwd ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.roomtype ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
	if(obj.roomtype ~= nil) then
		serialize_int32(obj.roomtype)
	end
end

function PBMsgEnterRoomReq.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	if (obj.roomtype ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgEnterRoomRes
PBMsgEnterRoomRes = {}
PBMsgEnterRoomRes.__index = PBMsgEnterRoomRes
function PBMsgEnterRoomRes.Create()
	local obj = setmetatable({},PBMsgEnterRoomRes)
	return obj
end

function PBMsgEnterRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.used = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.addition = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.roomtype = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.muchwin = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.addcode = deserialize_int32()
	end

	if (fieldCount >= 9) then
		obj.rolelist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolelistSize = deserialize_data_length()
				local rolelistStartPos = get_position()
				obj.rolelist[i] = RoleBaseInfo.Create()
				obj.rolelist[i] = (obj.rolelist[i]):DeSerialize()
				set_position(rolelistSize+rolelistStartPos )
			end
		end
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.pairwin = deserialize_int32()
	end
	return obj
end

function PBMsgEnterRoomRes.Serialize(obj)
	local fieldCount = 10
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.passwd ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.used ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.addition ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.roomtype ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.muchwin ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.addcode ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.pairwin ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	serialize_optional(flag)
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
	if(obj.roomtype ~= nil) then
		serialize_int32(obj.roomtype)
	end
	if(obj.muchwin ~= nil) then
		serialize_int32(obj.muchwin)
	end
	if(obj.addcode ~= nil) then
		serialize_int32(obj.addcode)
	end
	if (obj.rolelist ~= nil) then
		serialize_int32(#(obj.rolelist))
		for i=1, #(obj.rolelist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolelist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if(obj.pairwin ~= nil) then
		serialize_int32(obj.pairwin)
	end
end

function PBMsgEnterRoomRes.GetSize(obj)
	local size = 0
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.used ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	if (obj.roomtype ~= nil) then
		size = size + 4
	end
	if (obj.muchwin ~= nil) then
		size = size + 4
	end
	if (obj.addcode ~= nil) then
		size = size + 4
	end
	if (obj.rolelist ~= nil) then
		for i=1,#(obj.rolelist) do
			size = size + 5
			size = size + (obj.rolelist[i]):GetSize()
		end
	end
	if (obj.pairwin ~= nil) then
		size = size + 4
	end
	size = size + 12
	return size
end

-- PBMsgReadyReq
PBMsgReadyReq = {}
PBMsgReadyReq.__index = PBMsgReadyReq
function PBMsgReadyReq.Create()
	local obj = setmetatable({},PBMsgReadyReq)
	return obj
end

function PBMsgReadyReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.used = deserialize_int32()
	end
	return obj
end

function PBMsgReadyReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.used ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
end

function PBMsgReadyReq.GetSize(obj)
	local size = 0
	if (obj.used ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgReadyRes
PBMsgReadyRes = {}
PBMsgReadyRes.__index = PBMsgReadyRes
function PBMsgReadyRes.Create()
	local obj = setmetatable({},PBMsgReadyRes)
	return obj
end

function PBMsgReadyRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.used = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.rolestate = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolestateSize = deserialize_data_length()
				local rolestateStartPos = get_position()
				obj.rolestate[i] = RoleStateInfo.Create()
				obj.rolestate[i] = (obj.rolestate[i]):DeSerialize()
				set_position(rolestateSize+rolestateStartPos )
			end
		end
	end
	return obj
end

function PBMsgReadyRes.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.used ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if (obj.rolestate ~= nil) then
		serialize_int32(#(obj.rolestate))
		for i=1, #(obj.rolestate) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolestate[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgReadyRes.GetSize(obj)
	local size = 0
	if (obj.used ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.rolestate ~= nil) then
		for i=1,#(obj.rolestate) do
			size = size + 5
			size = size + (obj.rolestate[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBRoleCardInfo
PBRoleCardInfo = {}
PBRoleCardInfo.__index = PBRoleCardInfo
function PBRoleCardInfo.Create()
	local obj = setmetatable({},PBRoleCardInfo)
	return obj
end

function PBRoleCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.handcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local handcardSize = deserialize_data_length()
				local handcardStartPos = get_position()
				obj.handcard[i] = PBCard.Create()
				obj.handcard[i] = (obj.handcard[i]):DeSerialize()
				set_position(handcardSize+handcardStartPos )
			end
		end
	end

	if (fieldCount >= 2) then
		obj.pengcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local pengcardSize = deserialize_data_length()
				local pengcardStartPos = get_position()
				obj.pengcard[i] = PBCard.Create()
				obj.pengcard[i] = (obj.pengcard[i]):DeSerialize()
				set_position(pengcardSize+pengcardStartPos )
			end
		end
	end

	if (fieldCount >= 3) then
		obj.gangcardm = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardmSize = deserialize_data_length()
				local gangcardmStartPos = get_position()
				obj.gangcardm[i] = PBCard.Create()
				obj.gangcardm[i] = (obj.gangcardm[i]):DeSerialize()
				set_position(gangcardmSize+gangcardmStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.gangcarda = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardaSize = deserialize_data_length()
				local gangcardaStartPos = get_position()
				obj.gangcarda[i] = PBCard.Create()
				obj.gangcarda[i] = (obj.gangcarda[i]):DeSerialize()
				set_position(gangcardaSize+gangcardaStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.gangcardg = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardgSize = deserialize_data_length()
				local gangcardgStartPos = get_position()
				obj.gangcardg[i] = PBCard.Create()
				obj.gangcardg[i] = (obj.gangcardg[i]):DeSerialize()
				set_position(gangcardgSize+gangcardgStartPos )
			end
		end
	end
	return obj
end

function PBRoleCardInfo.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.handcard ~= nil) then
		serialize_int32(#(obj.handcard))
		for i=1, #(obj.handcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.handcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.pengcard ~= nil) then
		serialize_int32(#(obj.pengcard))
		for i=1, #(obj.pengcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.pengcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardm ~= nil) then
		serialize_int32(#(obj.gangcardm))
		for i=1, #(obj.gangcardm) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardm[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcarda ~= nil) then
		serialize_int32(#(obj.gangcarda))
		for i=1, #(obj.gangcarda) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcarda[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardg ~= nil) then
		serialize_int32(#(obj.gangcardg))
		for i=1, #(obj.gangcardg) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardg[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoleCardInfo.GetSize(obj)
	local size = 0
	if (obj.handcard ~= nil) then
		for i=1,#(obj.handcard) do
			size = size + 5
			size = size + (obj.handcard[i]):GetSize()
		end
	end
	if (obj.pengcard ~= nil) then
		for i=1,#(obj.pengcard) do
			size = size + 5
			size = size + (obj.pengcard[i]):GetSize()
		end
	end
	if (obj.gangcardm ~= nil) then
		for i=1,#(obj.gangcardm) do
			size = size + 5
			size = size + (obj.gangcardm[i]):GetSize()
		end
	end
	if (obj.gangcarda ~= nil) then
		for i=1,#(obj.gangcarda) do
			size = size + 5
			size = size + (obj.gangcarda[i]):GetSize()
		end
	end
	if (obj.gangcardg ~= nil) then
		for i=1,#(obj.gangcardg) do
			size = size + 5
			size = size + (obj.gangcardg[i]):GetSize()
		end
	end
	size = size + 30
	return size
end

-- PBOtherCardInfo
PBOtherCardInfo = {}
PBOtherCardInfo.__index = PBOtherCardInfo
function PBOtherCardInfo.Create()
	local obj = setmetatable({},PBOtherCardInfo)
	return obj
end

function PBOtherCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.handnum = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.pengcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local pengcardSize = deserialize_data_length()
				local pengcardStartPos = get_position()
				obj.pengcard[i] = PBCard.Create()
				obj.pengcard[i] = (obj.pengcard[i]):DeSerialize()
				set_position(pengcardSize+pengcardStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.gangcardm = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardmSize = deserialize_data_length()
				local gangcardmStartPos = get_position()
				obj.gangcardm[i] = PBCard.Create()
				obj.gangcardm[i] = (obj.gangcardm[i]):DeSerialize()
				set_position(gangcardmSize+gangcardmStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.gangcarda = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardaSize = deserialize_data_length()
				local gangcardaStartPos = get_position()
				obj.gangcarda[i] = PBCard.Create()
				obj.gangcarda[i] = (obj.gangcarda[i]):DeSerialize()
				set_position(gangcardaSize+gangcardaStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.gangcardg = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardgSize = deserialize_data_length()
				local gangcardgStartPos = get_position()
				obj.gangcardg[i] = PBCard.Create()
				obj.gangcardg[i] = (obj.gangcardg[i]):DeSerialize()
				set_position(gangcardgSize+gangcardgStartPos )
			end
		end
	end
	return obj
end

function PBOtherCardInfo.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.handnum ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.handnum ~= nil) then
		serialize_int32(obj.handnum)
	end
	if (obj.pengcard ~= nil) then
		serialize_int32(#(obj.pengcard))
		for i=1, #(obj.pengcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.pengcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardm ~= nil) then
		serialize_int32(#(obj.gangcardm))
		for i=1, #(obj.gangcardm) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardm[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcarda ~= nil) then
		serialize_int32(#(obj.gangcarda))
		for i=1, #(obj.gangcarda) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcarda[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardg ~= nil) then
		serialize_int32(#(obj.gangcardg))
		for i=1, #(obj.gangcardg) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardg[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBOtherCardInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.handnum ~= nil) then
		size = size + 4
	end
	if (obj.pengcard ~= nil) then
		for i=1,#(obj.pengcard) do
			size = size + 5
			size = size + (obj.pengcard[i]):GetSize()
		end
	end
	if (obj.gangcardm ~= nil) then
		for i=1,#(obj.gangcardm) do
			size = size + 5
			size = size + (obj.gangcardm[i]):GetSize()
		end
	end
	if (obj.gangcarda ~= nil) then
		for i=1,#(obj.gangcarda) do
			size = size + 5
			size = size + (obj.gangcarda[i]):GetSize()
		end
	end
	if (obj.gangcardg ~= nil) then
		for i=1,#(obj.gangcardg) do
			size = size + 5
			size = size + (obj.gangcardg[i]):GetSize()
		end
	end
	size = size + 26
	return size
end

-- PBPlayCardInfo
PBPlayCardInfo = {}
PBPlayCardInfo.__index = PBPlayCardInfo
function PBPlayCardInfo.Create()
	local obj = setmetatable({},PBPlayCardInfo)
	return obj
end

function PBPlayCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end

	if (fieldCount >= 2) then
		obj.cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardsSize = deserialize_data_length()
				local cardsStartPos = get_position()
				obj.cards[i] = PBCard.Create()
				obj.cards[i] = (obj.cards[i]):DeSerialize()
				set_position(cardsSize+cardsStartPos )
			end
		end
	end
	return obj
end

function PBPlayCardInfo.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if (obj.cards ~= nil) then
		serialize_int32(#(obj.cards))
		for i=1, #(obj.cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBPlayCardInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.cards ~= nil) then
		for i=1,#(obj.cards) do
			size = size + 5
			size = size + (obj.cards[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBTableCardInfo
PBTableCardInfo = {}
PBTableCardInfo.__index = PBTableCardInfo
function PBTableCardInfo.Create()
	local obj = setmetatable({},PBTableCardInfo)
	return obj
end

function PBTableCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.playcards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local playcardsSize = deserialize_data_length()
				local playcardsStartPos = get_position()
				obj.playcards[i] = PBPlayCardInfo.Create()
				obj.playcards[i] = (obj.playcards[i]):DeSerialize()
				set_position(playcardsSize+playcardsStartPos )
			end
		end
	end
	return obj
end

function PBTableCardInfo.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.playcards ~= nil) then
		serialize_int32(#(obj.playcards))
		for i=1, #(obj.playcards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.playcards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBTableCardInfo.GetSize(obj)
	local size = 0
	if (obj.playcards ~= nil) then
		for i=1,#(obj.playcards) do
			size = size + 5
			size = size + (obj.playcards[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBRoomCardInfoReq
PBRoomCardInfoReq = {}
PBRoomCardInfoReq.__index = PBRoomCardInfoReq
function PBRoomCardInfoReq.Create()
	local obj = setmetatable({},PBRoomCardInfoReq)
	return obj
end

function PBRoomCardInfoReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBRoomCardInfoReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBRoomCardInfoReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBRoomCardInfoSync
PBRoomCardInfoSync = {}
PBRoomCardInfoSync.__index = PBRoomCardInfoSync
function PBRoomCardInfoSync.Create()
	local obj = setmetatable({},PBRoomCardInfoSync)
	return obj
end

function PBRoomCardInfoSync.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local owncardsSize = deserialize_data_length()
		local owncardsStartPos = get_position()
		obj.owncards = PBRoleCardInfo.Create()
		obj.owncards = obj.owncards:DeSerialize()
		set_position(owncardsSize+owncardsStartPos )
	end

	if (fieldCount >= 2) then
		obj.othercards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local othercardsSize = deserialize_data_length()
				local othercardsStartPos = get_position()
				obj.othercards[i] = PBOtherCardInfo.Create()
				obj.othercards[i] = (obj.othercards[i]):DeSerialize()
				set_position(othercardsSize+othercardsStartPos )
			end
		end
	end

	if (fieldCount >= 3) then
		obj.tablecards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local tablecardsSize = deserialize_data_length()
				local tablecardsStartPos = get_position()
				obj.tablecards[i] = PBPlayCardInfo.Create()
				obj.tablecards[i] = (obj.tablecards[i]):DeSerialize()
				set_position(tablecardsSize+tablecardsStartPos )
			end
		end
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.leftnum = deserialize_int32()
	end
	return obj
end

function PBRoomCardInfoSync.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.owncards ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.leftnum ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.owncards ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.owncards:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.othercards ~= nil) then
		serialize_int32(#(obj.othercards))
		for i=1, #(obj.othercards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.othercards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.tablecards ~= nil) then
		serialize_int32(#(obj.tablecards))
		for i=1, #(obj.tablecards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.tablecards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if(obj.leftnum ~= nil) then
		serialize_int32(obj.leftnum)
	end
end

function PBRoomCardInfoSync.GetSize(obj)
	local size = 0
	if (obj.owncards ~= nil) then
		size = size + obj.owncards:GetSize()
	end
	if (obj.othercards ~= nil) then
		for i=1,#(obj.othercards) do
			size = size + 5
			size = size + (obj.othercards[i]):GetSize()
		end
	end
	if (obj.tablecards ~= nil) then
		for i=1,#(obj.tablecards) do
			size = size + 5
			size = size + (obj.tablecards[i]):GetSize()
		end
	end
	if (obj.leftnum ~= nil) then
		size = size + 4
	end
	size = size + 21
	return size
end

-- PBMsgErrorCodeNotice
PBMsgErrorCodeNotice = {}
PBMsgErrorCodeNotice.__index = PBMsgErrorCodeNotice
function PBMsgErrorCodeNotice.Create()
	local obj = setmetatable({},PBMsgErrorCodeNotice)
	return obj
end

function PBMsgErrorCodeNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.err_code = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.err_type = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.err_para = deserialize_int32_array()
	end
	return obj
end

function PBMsgErrorCodeNotice.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.err_code ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.err_type ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.err_code ~= nil) then
		serialize_int32(obj.err_code)
	end
	if(obj.err_type ~= nil) then
		serialize_int32(obj.err_type)
	end
	serialize_int32_array(obj.err_para)
end

function PBMsgErrorCodeNotice.GetSize(obj)
	local size = 0
	if (obj.err_code ~= nil) then
		size = size + 4
	end
	if (obj.err_type ~= nil) then
		size = size + 4
	end
	if (obj.err_para ~= nil) then
		for i=1,#(obj.err_para) do
			size = size + 4
		end
	end
	size = size + 11
	return size
end

-- PBMsgPlayCardReq
PBMsgPlayCardReq = {}
PBMsgPlayCardReq.__index = PBMsgPlayCardReq
function PBMsgPlayCardReq.Create()
	local obj = setmetatable({},PBMsgPlayCardReq)
	return obj
end

function PBMsgPlayCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	return obj
end

function PBMsgPlayCardReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.card ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.index ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
end

function PBMsgPlayCardReq.GetSize(obj)
	local size = 0
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	size = size + 11
	return size
end

-- PBMsgPlayCardRes
PBMsgPlayCardRes = {}
PBMsgPlayCardRes.__index = PBMsgPlayCardRes
function PBMsgPlayCardRes.Create()
	local obj = setmetatable({},PBMsgPlayCardRes)
	return obj
end

function PBMsgPlayCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPlayCardRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.index ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.card ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPlayCardRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgPengCardReq
PBMsgPengCardReq = {}
PBMsgPengCardReq.__index = PBMsgPengCardReq
function PBMsgPengCardReq.Create()
	local obj = setmetatable({},PBMsgPengCardReq)
	return obj
end

function PBMsgPengCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPengCardReq.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.index ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.card ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPengCardReq.GetSize(obj)
	local size = 0
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgPengCardRes
PBMsgPengCardRes = {}
PBMsgPengCardRes.__index = PBMsgPengCardRes
function PBMsgPengCardRes.Create()
	local obj = setmetatable({},PBMsgPengCardRes)
	return obj
end

function PBMsgPengCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.srcid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPengCardRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.srcid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.index ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.card ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.srcid ~= nil) then
		serialize_int32(obj.srcid)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPengCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.srcid ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGangCardReq
PBMsgGangCardReq = {}
PBMsgGangCardReq.__index = PBMsgGangCardReq
function PBMsgGangCardReq.Create()
	local obj = setmetatable({},PBMsgGangCardReq)
	return obj
end

function PBMsgGangCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGangCardReq.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.index ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.card ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGangCardReq.GetSize(obj)
	local size = 0
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGangCardRes
PBMsgGangCardRes = {}
PBMsgGangCardRes.__index = PBMsgGangCardRes
function PBMsgGangCardRes.Create()
	local obj = setmetatable({},PBMsgGangCardRes)
	return obj
end

function PBMsgGangCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.srcid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGangCardRes.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.srcid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.index ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.card ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.srcid ~= nil) then
		serialize_int32(obj.srcid)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGangCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.srcid ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgWinGameReq
PBMsgWinGameReq = {}
PBMsgWinGameReq.__index = PBMsgWinGameReq
function PBMsgWinGameReq.Create()
	local obj = setmetatable({},PBMsgWinGameReq)
	return obj
end

function PBMsgWinGameReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgWinGameReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgWinGameReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBRoleResult
PBRoleResult = {}
PBRoleResult.__index = PBRoleResult
function PBRoleResult.Create()
	local obj = setmetatable({},PBRoleResult)
	return obj
end

function PBRoleResult.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end

	if (fieldCount >= 4) then
		obj.hand_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local hand_cardsSize = deserialize_data_length()
				local hand_cardsStartPos = get_position()
				obj.hand_cards[i] = PBCard.Create()
				obj.hand_cards[i] = (obj.hand_cards[i]):DeSerialize()
				set_position(hand_cardsSize+hand_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.peng_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local peng_cardsSize = deserialize_data_length()
				local peng_cardsStartPos = get_position()
				obj.peng_cards[i] = PBCard.Create()
				obj.peng_cards[i] = (obj.peng_cards[i]):DeSerialize()
				set_position(peng_cardsSize+peng_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.gangm_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangm_cardsSize = deserialize_data_length()
				local gangm_cardsStartPos = get_position()
				obj.gangm_cards[i] = PBCard.Create()
				obj.gangm_cards[i] = (obj.gangm_cards[i]):DeSerialize()
				set_position(gangm_cardsSize+gangm_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 7) then
		obj.ganga_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local ganga_cardsSize = deserialize_data_length()
				local ganga_cardsStartPos = get_position()
				obj.ganga_cards[i] = PBCard.Create()
				obj.ganga_cards[i] = (obj.ganga_cards[i]):DeSerialize()
				set_position(ganga_cardsSize+ganga_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 8) then
		obj.gangg_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangg_cardsSize = deserialize_data_length()
				local gangg_cardsStartPos = get_position()
				obj.gangg_cards[i] = PBCard.Create()
				obj.gangg_cards[i] = (obj.gangg_cards[i]):DeSerialize()
				set_position(gangg_cardsSize+gangg_cardsStartPos )
			end
		end
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.username = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	return obj
end

function PBRoleResult.Serialize(obj)
	local fieldCount = 10
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.score ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.username ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.amount ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if (obj.hand_cards ~= nil) then
		serialize_int32(#(obj.hand_cards))
		for i=1, #(obj.hand_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.hand_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.peng_cards ~= nil) then
		serialize_int32(#(obj.peng_cards))
		for i=1, #(obj.peng_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.peng_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangm_cards ~= nil) then
		serialize_int32(#(obj.gangm_cards))
		for i=1, #(obj.gangm_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangm_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.ganga_cards ~= nil) then
		serialize_int32(#(obj.ganga_cards))
		for i=1, #(obj.ganga_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.ganga_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangg_cards ~= nil) then
		serialize_int32(#(obj.gangg_cards))
		for i=1, #(obj.gangg_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangg_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if(obj.username ~= nil) then
		serialize_string(obj.username)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
end

function PBRoleResult.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.hand_cards ~= nil) then
		for i=1,#(obj.hand_cards) do
			size = size + 5
			size = size + (obj.hand_cards[i]):GetSize()
		end
	end
	if (obj.peng_cards ~= nil) then
		for i=1,#(obj.peng_cards) do
			size = size + 5
			size = size + (obj.peng_cards[i]):GetSize()
		end
	end
	if (obj.gangm_cards ~= nil) then
		for i=1,#(obj.gangm_cards) do
			size = size + 5
			size = size + (obj.gangm_cards[i]):GetSize()
		end
	end
	if (obj.ganga_cards ~= nil) then
		for i=1,#(obj.ganga_cards) do
			size = size + 5
			size = size + (obj.ganga_cards[i]):GetSize()
		end
	end
	if (obj.gangg_cards ~= nil) then
		for i=1,#(obj.gangg_cards) do
			size = size + 5
			size = size + (obj.gangg_cards[i]):GetSize()
		end
	end
	if (obj.username ~= nil) then
		local sizeStr = string.len(obj.username)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	size = size + 31
	return size
end

-- PBGameResultInfo
PBGameResultInfo = {}
PBGameResultInfo.__index = PBGameResultInfo
function PBGameResultInfo.Create()
	local obj = setmetatable({},PBGameResultInfo)
	return obj
end

function PBGameResultInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		local win_cardSize = deserialize_data_length()
		local win_cardStartPos = get_position()
		obj.win_card = PBCard.Create()
		obj.win_card = obj.win_card:DeSerialize()
		set_position(win_cardSize+win_cardStartPos )
	end

	if (fieldCount >= 3) then
		obj.role_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local role_cardsSize = deserialize_data_length()
				local role_cardsStartPos = get_position()
				obj.role_cards[i] = PBRoleResult.Create()
				obj.role_cards[i] = (obj.role_cards[i]):DeSerialize()
				set_position(role_cardsSize+role_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.table_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local table_cardsSize = deserialize_data_length()
				local table_cardsStartPos = get_position()
				obj.table_cards[i] = PBCard.Create()
				obj.table_cards[i] = (obj.table_cards[i]):DeSerialize()
				set_position(table_cardsSize+table_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.rest_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rest_cardsSize = deserialize_data_length()
				local rest_cardsStartPos = get_position()
				obj.rest_cards[i] = PBCard.Create()
				obj.rest_cards[i] = (obj.rest_cards[i]):DeSerialize()
				set_position(rest_cardsSize+rest_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.code_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local code_cardsSize = deserialize_data_length()
				local code_cardsStartPos = get_position()
				obj.code_cards[i] = PBCard.Create()
				obj.code_cards[i] = (obj.code_cards[i]):DeSerialize()
				set_position(code_cardsSize+code_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 7) then
		obj.role_list = deserialize_int32_array()
	end
	return obj
end

function PBGameResultInfo.Serialize(obj)
	local fieldCount = 7
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.win_card ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.win_card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.win_card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.role_cards ~= nil) then
		serialize_int32(#(obj.role_cards))
		for i=1, #(obj.role_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.role_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.table_cards ~= nil) then
		serialize_int32(#(obj.table_cards))
		for i=1, #(obj.table_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.table_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.rest_cards ~= nil) then
		serialize_int32(#(obj.rest_cards))
		for i=1, #(obj.rest_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rest_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.code_cards ~= nil) then
		serialize_int32(#(obj.code_cards))
		for i=1, #(obj.code_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.code_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.role_list)
end

function PBGameResultInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.win_card ~= nil) then
		size = size + obj.win_card:GetSize()
	end
	if (obj.role_cards ~= nil) then
		for i=1,#(obj.role_cards) do
			size = size + 5
			size = size + (obj.role_cards[i]):GetSize()
		end
	end
	if (obj.table_cards ~= nil) then
		for i=1,#(obj.table_cards) do
			size = size + 5
			size = size + (obj.table_cards[i]):GetSize()
		end
	end
	if (obj.rest_cards ~= nil) then
		for i=1,#(obj.rest_cards) do
			size = size + 5
			size = size + (obj.rest_cards[i]):GetSize()
		end
	end
	if (obj.code_cards ~= nil) then
		for i=1,#(obj.code_cards) do
			size = size + 5
			size = size + (obj.code_cards[i]):GetSize()
		end
	end
	if (obj.role_list ~= nil) then
		for i=1,#(obj.role_list) do
			size = size + 4
		end
	end
	size = size + 36
	return size
end

-- PBBalanceInfo
PBBalanceInfo = {}
PBBalanceInfo.__index = PBBalanceInfo
function PBBalanceInfo.Create()
	local obj = setmetatable({},PBBalanceInfo)
	return obj
end

function PBBalanceInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.win_count = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.gangm = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.ganga = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.gangg = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.code_count = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.username = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.host = deserialize_int32()
	end
	return obj
end

function PBBalanceInfo.Serialize(obj)
	local fieldCount = 9
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.win_count ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.score ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.gangm ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.ganga ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.gangg ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.code_count ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.username ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.host ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.win_count ~= nil) then
		serialize_int32(obj.win_count)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.gangm ~= nil) then
		serialize_int32(obj.gangm)
	end
	if(obj.ganga ~= nil) then
		serialize_int32(obj.ganga)
	end
	if(obj.gangg ~= nil) then
		serialize_int32(obj.gangg)
	end
	if(obj.code_count ~= nil) then
		serialize_int32(obj.code_count)
	end
	if(obj.username ~= nil) then
		serialize_string(obj.username)
	end
	if(obj.host ~= nil) then
		serialize_int32(obj.host)
	end
end

function PBBalanceInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.win_count ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.gangm ~= nil) then
		size = size + 4
	end
	if (obj.ganga ~= nil) then
		size = size + 4
	end
	if (obj.gangg ~= nil) then
		size = size + 4
	end
	if (obj.code_count ~= nil) then
		size = size + 4
	end
	if (obj.username ~= nil) then
		local sizeStr = string.len(obj.username)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.host ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- PBMsgWinGameRes
PBMsgWinGameRes = {}
PBMsgWinGameRes.__index = PBMsgWinGameRes
function PBMsgWinGameRes.Create()
	local obj = setmetatable({},PBMsgWinGameRes)
	return obj
end

function PBMsgWinGameRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.count = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.card = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardSize = deserialize_data_length()
				local cardStartPos = get_position()
				obj.card[i] = PBCard.Create()
				obj.card[i] = (obj.card[i]):DeSerialize()
				set_position(cardSize+cardStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.role_list = deserialize_int32_array()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local result_infoSize = deserialize_data_length()
		local result_infoStartPos = get_position()
		obj.result_info = PBGameResultInfo.Create()
		obj.result_info = obj.result_info:DeSerialize()
		set_position(result_infoSize+result_infoStartPos )
	end

	if (fieldCount >= 6) then
		obj.balances = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local balancesSize = deserialize_data_length()
				local balancesStartPos = get_position()
				obj.balances[i] = PBBalanceInfo.Create()
				obj.balances[i] = (obj.balances[i]):DeSerialize()
				set_position(balancesSize+balancesStartPos )
			end
		end
	end
	return obj
end

function PBMsgWinGameRes.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.count ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.result_info ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.count ~= nil) then
		serialize_int32(obj.count)
	end
	if (obj.card ~= nil) then
		serialize_int32(#(obj.card))
		for i=1, #(obj.card) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.card[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.role_list)
	if(obj.result_info ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.result_info:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.balances ~= nil) then
		serialize_int32(#(obj.balances))
		for i=1, #(obj.balances) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.balances[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgWinGameRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.count ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		for i=1,#(obj.card) do
			size = size + 5
			size = size + (obj.card[i]):GetSize()
		end
	end
	if (obj.role_list ~= nil) then
		for i=1,#(obj.role_list) do
			size = size + 4
		end
	end
	if (obj.result_info ~= nil) then
		size = size + obj.result_info:GetSize()
	end
	if (obj.balances ~= nil) then
		for i=1,#(obj.balances) do
			size = size + 5
			size = size + (obj.balances[i]):GetSize()
		end
	end
	size = size + 26
	return size
end

-- PBPXMsgWinGameReq
PBPXMsgWinGameReq = {}
PBPXMsgWinGameReq.__index = PBPXMsgWinGameReq
function PBPXMsgWinGameReq.Create()
	local obj = setmetatable({},PBPXMsgWinGameReq)
	return obj
end

function PBPXMsgWinGameReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBPXMsgWinGameReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBPXMsgWinGameReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBPXRoleResult
PBPXRoleResult = {}
PBPXRoleResult.__index = PBPXRoleResult
function PBPXRoleResult.Create()
	local obj = setmetatable({},PBPXRoleResult)
	return obj
end

function PBPXRoleResult.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end

	if (fieldCount >= 4) then
		obj.hand_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local hand_cardsSize = deserialize_data_length()
				local hand_cardsStartPos = get_position()
				obj.hand_cards[i] = PBCard.Create()
				obj.hand_cards[i] = (obj.hand_cards[i]):DeSerialize()
				set_position(hand_cardsSize+hand_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.peng_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local peng_cardsSize = deserialize_data_length()
				local peng_cardsStartPos = get_position()
				obj.peng_cards[i] = PBCard.Create()
				obj.peng_cards[i] = (obj.peng_cards[i]):DeSerialize()
				set_position(peng_cardsSize+peng_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.gangm_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangm_cardsSize = deserialize_data_length()
				local gangm_cardsStartPos = get_position()
				obj.gangm_cards[i] = PBCard.Create()
				obj.gangm_cards[i] = (obj.gangm_cards[i]):DeSerialize()
				set_position(gangm_cardsSize+gangm_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 7) then
		obj.ganga_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local ganga_cardsSize = deserialize_data_length()
				local ganga_cardsStartPos = get_position()
				obj.ganga_cards[i] = PBCard.Create()
				obj.ganga_cards[i] = (obj.ganga_cards[i]):DeSerialize()
				set_position(ganga_cardsSize+ganga_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 8) then
		obj.gangg_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangg_cardsSize = deserialize_data_length()
				local gangg_cardsStartPos = get_position()
				obj.gangg_cards[i] = PBCard.Create()
				obj.gangg_cards[i] = (obj.gangg_cards[i]):DeSerialize()
				set_position(gangg_cardsSize+gangg_cardsStartPos )
			end
		end
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.username = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.overtype = deserialize_int32()
	end
	return obj
end

function PBPXRoleResult.Serialize(obj)
	local fieldCount = 11
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.score ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.username ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.amount ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.overtype ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if (obj.hand_cards ~= nil) then
		serialize_int32(#(obj.hand_cards))
		for i=1, #(obj.hand_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.hand_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.peng_cards ~= nil) then
		serialize_int32(#(obj.peng_cards))
		for i=1, #(obj.peng_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.peng_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangm_cards ~= nil) then
		serialize_int32(#(obj.gangm_cards))
		for i=1, #(obj.gangm_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangm_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.ganga_cards ~= nil) then
		serialize_int32(#(obj.ganga_cards))
		for i=1, #(obj.ganga_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.ganga_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangg_cards ~= nil) then
		serialize_int32(#(obj.gangg_cards))
		for i=1, #(obj.gangg_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangg_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if(obj.username ~= nil) then
		serialize_string(obj.username)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.overtype ~= nil) then
		serialize_int32(obj.overtype)
	end
end

function PBPXRoleResult.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.hand_cards ~= nil) then
		for i=1,#(obj.hand_cards) do
			size = size + 5
			size = size + (obj.hand_cards[i]):GetSize()
		end
	end
	if (obj.peng_cards ~= nil) then
		for i=1,#(obj.peng_cards) do
			size = size + 5
			size = size + (obj.peng_cards[i]):GetSize()
		end
	end
	if (obj.gangm_cards ~= nil) then
		for i=1,#(obj.gangm_cards) do
			size = size + 5
			size = size + (obj.gangm_cards[i]):GetSize()
		end
	end
	if (obj.ganga_cards ~= nil) then
		for i=1,#(obj.ganga_cards) do
			size = size + 5
			size = size + (obj.ganga_cards[i]):GetSize()
		end
	end
	if (obj.gangg_cards ~= nil) then
		for i=1,#(obj.gangg_cards) do
			size = size + 5
			size = size + (obj.gangg_cards[i]):GetSize()
		end
	end
	if (obj.username ~= nil) then
		local sizeStr = string.len(obj.username)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.overtype ~= nil) then
		size = size + 4
	end
	size = size + 31
	return size
end

-- PBPXGameResultInfo
PBPXGameResultInfo = {}
PBPXGameResultInfo.__index = PBPXGameResultInfo
function PBPXGameResultInfo.Create()
	local obj = setmetatable({},PBPXGameResultInfo)
	return obj
end

function PBPXGameResultInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		local win_cardSize = deserialize_data_length()
		local win_cardStartPos = get_position()
		obj.win_card = PBCard.Create()
		obj.win_card = obj.win_card:DeSerialize()
		set_position(win_cardSize+win_cardStartPos )
	end

	if (fieldCount >= 3) then
		obj.role_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local role_cardsSize = deserialize_data_length()
				local role_cardsStartPos = get_position()
				obj.role_cards[i] = PBRoleResult.Create()
				obj.role_cards[i] = (obj.role_cards[i]):DeSerialize()
				set_position(role_cardsSize+role_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.table_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local table_cardsSize = deserialize_data_length()
				local table_cardsStartPos = get_position()
				obj.table_cards[i] = PBCard.Create()
				obj.table_cards[i] = (obj.table_cards[i]):DeSerialize()
				set_position(table_cardsSize+table_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.rest_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rest_cardsSize = deserialize_data_length()
				local rest_cardsStartPos = get_position()
				obj.rest_cards[i] = PBCard.Create()
				obj.rest_cards[i] = (obj.rest_cards[i]):DeSerialize()
				set_position(rest_cardsSize+rest_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.code_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local code_cardsSize = deserialize_data_length()
				local code_cardsStartPos = get_position()
				obj.code_cards[i] = PBCard.Create()
				obj.code_cards[i] = (obj.code_cards[i]):DeSerialize()
				set_position(code_cardsSize+code_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 7) then
		obj.role_list = deserialize_int32_array()
	end
	return obj
end

function PBPXGameResultInfo.Serialize(obj)
	local fieldCount = 7
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.win_card ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.win_card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.win_card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.role_cards ~= nil) then
		serialize_int32(#(obj.role_cards))
		for i=1, #(obj.role_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.role_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.table_cards ~= nil) then
		serialize_int32(#(obj.table_cards))
		for i=1, #(obj.table_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.table_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.rest_cards ~= nil) then
		serialize_int32(#(obj.rest_cards))
		for i=1, #(obj.rest_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rest_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.code_cards ~= nil) then
		serialize_int32(#(obj.code_cards))
		for i=1, #(obj.code_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.code_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.role_list)
end

function PBPXGameResultInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.win_card ~= nil) then
		size = size + obj.win_card:GetSize()
	end
	if (obj.role_cards ~= nil) then
		for i=1,#(obj.role_cards) do
			size = size + 5
			size = size + (obj.role_cards[i]):GetSize()
		end
	end
	if (obj.table_cards ~= nil) then
		for i=1,#(obj.table_cards) do
			size = size + 5
			size = size + (obj.table_cards[i]):GetSize()
		end
	end
	if (obj.rest_cards ~= nil) then
		for i=1,#(obj.rest_cards) do
			size = size + 5
			size = size + (obj.rest_cards[i]):GetSize()
		end
	end
	if (obj.code_cards ~= nil) then
		for i=1,#(obj.code_cards) do
			size = size + 5
			size = size + (obj.code_cards[i]):GetSize()
		end
	end
	if (obj.role_list ~= nil) then
		for i=1,#(obj.role_list) do
			size = size + 4
		end
	end
	size = size + 36
	return size
end

-- PBPXBalanceInfo
PBPXBalanceInfo = {}
PBPXBalanceInfo.__index = PBPXBalanceInfo
function PBPXBalanceInfo.Create()
	local obj = setmetatable({},PBPXBalanceInfo)
	return obj
end

function PBPXBalanceInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.win_count = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.gangm = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.ganga = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.gangg = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.code_count = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.username = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.host = deserialize_int32()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.point_gun = deserialize_int32()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.meet_gun = deserialize_int32()
	end
	if(has_optional_flag(11,optionLength,option)) then
		obj.own_win = deserialize_int32()
	end
	if(has_optional_flag(12,optionLength,option)) then
		obj.add_code = deserialize_int32()
	end
	return obj
end

function PBPXBalanceInfo.Serialize(obj)
	local fieldCount = 13
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.win_count ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.score ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.gangm ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.ganga ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.gangg ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.code_count ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.username ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.host ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.point_gun ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.meet_gun ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	if(obj.own_win ~= nil) then
		flag[12] = true
	else
		flag[12] = false
	end
	if(obj.add_code ~= nil) then
		flag[13] = true
	else
		flag[13] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.win_count ~= nil) then
		serialize_int32(obj.win_count)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.gangm ~= nil) then
		serialize_int32(obj.gangm)
	end
	if(obj.ganga ~= nil) then
		serialize_int32(obj.ganga)
	end
	if(obj.gangg ~= nil) then
		serialize_int32(obj.gangg)
	end
	if(obj.code_count ~= nil) then
		serialize_int32(obj.code_count)
	end
	if(obj.username ~= nil) then
		serialize_string(obj.username)
	end
	if(obj.host ~= nil) then
		serialize_int32(obj.host)
	end
	if(obj.point_gun ~= nil) then
		serialize_int32(obj.point_gun)
	end
	if(obj.meet_gun ~= nil) then
		serialize_int32(obj.meet_gun)
	end
	if(obj.own_win ~= nil) then
		serialize_int32(obj.own_win)
	end
	if(obj.add_code ~= nil) then
		serialize_int32(obj.add_code)
	end
end

function PBPXBalanceInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.win_count ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.gangm ~= nil) then
		size = size + 4
	end
	if (obj.ganga ~= nil) then
		size = size + 4
	end
	if (obj.gangg ~= nil) then
		size = size + 4
	end
	if (obj.code_count ~= nil) then
		size = size + 4
	end
	if (obj.username ~= nil) then
		local sizeStr = string.len(obj.username)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.host ~= nil) then
		size = size + 4
	end
	if (obj.point_gun ~= nil) then
		size = size + 4
	end
	if (obj.meet_gun ~= nil) then
		size = size + 4
	end
	if (obj.own_win ~= nil) then
		size = size + 4
	end
	if (obj.add_code ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- PBPXMsgWinGameRes
PBPXMsgWinGameRes = {}
PBPXMsgWinGameRes.__index = PBPXMsgWinGameRes
function PBPXMsgWinGameRes.Create()
	local obj = setmetatable({},PBPXMsgWinGameRes)
	return obj
end

function PBPXMsgWinGameRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.count = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.card = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardSize = deserialize_data_length()
				local cardStartPos = get_position()
				obj.card[i] = PBCard.Create()
				obj.card[i] = (obj.card[i]):DeSerialize()
				set_position(cardSize+cardStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.role_list = deserialize_int32_array()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local result_infoSize = deserialize_data_length()
		local result_infoStartPos = get_position()
		obj.result_info = PBPXGameResultInfo.Create()
		obj.result_info = obj.result_info:DeSerialize()
		set_position(result_infoSize+result_infoStartPos )
	end

	if (fieldCount >= 6) then
		obj.balances = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local balancesSize = deserialize_data_length()
				local balancesStartPos = get_position()
				obj.balances[i] = PBPXBalanceInfo.Create()
				obj.balances[i] = (obj.balances[i]):DeSerialize()
				set_position(balancesSize+balancesStartPos )
			end
		end
	end
	return obj
end

function PBPXMsgWinGameRes.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.count ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.result_info ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.count ~= nil) then
		serialize_int32(obj.count)
	end
	if (obj.card ~= nil) then
		serialize_int32(#(obj.card))
		for i=1, #(obj.card) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.card[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.role_list)
	if(obj.result_info ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.result_info:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.balances ~= nil) then
		serialize_int32(#(obj.balances))
		for i=1, #(obj.balances) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.balances[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBPXMsgWinGameRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.count ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		for i=1,#(obj.card) do
			size = size + 5
			size = size + (obj.card[i]):GetSize()
		end
	end
	if (obj.role_list ~= nil) then
		for i=1,#(obj.role_list) do
			size = size + 4
		end
	end
	if (obj.result_info ~= nil) then
		size = size + obj.result_info:GetSize()
	end
	if (obj.balances ~= nil) then
		for i=1,#(obj.balances) do
			size = size + 5
			size = size + (obj.balances[i]):GetSize()
		end
	end
	size = size + 26
	return size
end

-- PBMsgGameResultReq
PBMsgGameResultReq = {}
PBMsgGameResultReq.__index = PBMsgGameResultReq
function PBMsgGameResultReq.Create()
	local obj = setmetatable({},PBMsgGameResultReq)
	return obj
end

function PBMsgGameResultReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roomid = deserialize_int32()
	end
	return obj
end

function PBMsgGameResultReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roomid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roomid ~= nil) then
		serialize_int32(obj.roomid)
	end
end

function PBMsgGameResultReq.GetSize(obj)
	local size = 0
	if (obj.roomid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameResultRes
PBMsgGameResultRes = {}
PBMsgGameResultRes.__index = PBMsgGameResultRes
function PBMsgGameResultRes.Create()
	local obj = setmetatable({},PBMsgGameResultRes)
	return obj
end

function PBMsgGameResultRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		local win_cardSize = deserialize_data_length()
		local win_cardStartPos = get_position()
		obj.win_card = PBCard.Create()
		obj.win_card = obj.win_card:DeSerialize()
		set_position(win_cardSize+win_cardStartPos )
	end

	if (fieldCount >= 3) then
		obj.role_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local role_cardsSize = deserialize_data_length()
				local role_cardsStartPos = get_position()
				obj.role_cards[i] = PBRoleResult.Create()
				obj.role_cards[i] = (obj.role_cards[i]):DeSerialize()
				set_position(role_cardsSize+role_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.table_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local table_cardsSize = deserialize_data_length()
				local table_cardsStartPos = get_position()
				obj.table_cards[i] = PBCard.Create()
				obj.table_cards[i] = (obj.table_cards[i]):DeSerialize()
				set_position(table_cardsSize+table_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.rest_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rest_cardsSize = deserialize_data_length()
				local rest_cardsStartPos = get_position()
				obj.rest_cards[i] = PBCard.Create()
				obj.rest_cards[i] = (obj.rest_cards[i]):DeSerialize()
				set_position(rest_cardsSize+rest_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.code_cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local code_cardsSize = deserialize_data_length()
				local code_cardsStartPos = get_position()
				obj.code_cards[i] = PBCard.Create()
				obj.code_cards[i] = (obj.code_cards[i]):DeSerialize()
				set_position(code_cardsSize+code_cardsStartPos )
			end
		end
	end

	if (fieldCount >= 7) then
		obj.role_list = deserialize_int32_array()
	end
	return obj
end

function PBMsgGameResultRes.Serialize(obj)
	local fieldCount = 7
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.win_card ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.win_card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.win_card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.role_cards ~= nil) then
		serialize_int32(#(obj.role_cards))
		for i=1, #(obj.role_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.role_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.table_cards ~= nil) then
		serialize_int32(#(obj.table_cards))
		for i=1, #(obj.table_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.table_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.rest_cards ~= nil) then
		serialize_int32(#(obj.rest_cards))
		for i=1, #(obj.rest_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rest_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.code_cards ~= nil) then
		serialize_int32(#(obj.code_cards))
		for i=1, #(obj.code_cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.code_cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.role_list)
end

function PBMsgGameResultRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.win_card ~= nil) then
		size = size + obj.win_card:GetSize()
	end
	if (obj.role_cards ~= nil) then
		for i=1,#(obj.role_cards) do
			size = size + 5
			size = size + (obj.role_cards[i]):GetSize()
		end
	end
	if (obj.table_cards ~= nil) then
		for i=1,#(obj.table_cards) do
			size = size + 5
			size = size + (obj.table_cards[i]):GetSize()
		end
	end
	if (obj.rest_cards ~= nil) then
		for i=1,#(obj.rest_cards) do
			size = size + 5
			size = size + (obj.rest_cards[i]):GetSize()
		end
	end
	if (obj.code_cards ~= nil) then
		for i=1,#(obj.code_cards) do
			size = size + 5
			size = size + (obj.code_cards[i]):GetSize()
		end
	end
	if (obj.role_list ~= nil) then
		for i=1,#(obj.role_list) do
			size = size + 4
		end
	end
	size = size + 36
	return size
end

-- PBMsgGameGetCardReq
PBMsgGameGetCardReq = {}
PBMsgGameGetCardReq.__index = PBMsgGameGetCardReq
function PBMsgGameGetCardReq.Create()
	local obj = setmetatable({},PBMsgGameGetCardReq)
	return obj
end

function PBMsgGameGetCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGameGetCardReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGameGetCardReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgGameGetCardRes
PBMsgGameGetCardRes = {}
PBMsgGameGetCardRes.__index = PBMsgGameGetCardRes
function PBMsgGameGetCardRes.Create()
	local obj = setmetatable({},PBMsgGameGetCardRes)
	return obj
end

function PBMsgGameGetCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end

	if (fieldCount >= 3) then
		obj.cardlist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardlistSize = deserialize_data_length()
				local cardlistStartPos = get_position()
				obj.cardlist[i] = PBCard.Create()
				obj.cardlist[i] = (obj.cardlist[i]):DeSerialize()
				set_position(cardlistSize+cardlistStartPos )
			end
		end
	end
	return obj
end

function PBMsgGameGetCardRes.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.card ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.cardlist ~= nil) then
		serialize_int32(#(obj.cardlist))
		for i=1, #(obj.cardlist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.cardlist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgGameGetCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	if (obj.cardlist ~= nil) then
		for i=1,#(obj.cardlist) do
			size = size + 5
			size = size + (obj.cardlist[i]):GetSize()
		end
	end
	size = size + 16
	return size
end

-- PBMsgGameDeleteRoomReq
PBMsgGameDeleteRoomReq = {}
PBMsgGameDeleteRoomReq.__index = PBMsgGameDeleteRoomReq
function PBMsgGameDeleteRoomReq.Create()
	local obj = setmetatable({},PBMsgGameDeleteRoomReq)
	return obj
end

function PBMsgGameDeleteRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	return obj
end

function PBMsgGameDeleteRoomReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.room_pass ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
end

function PBMsgGameDeleteRoomReq.GetSize(obj)
	local size = 0
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameDeleteRoomRes
PBMsgGameDeleteRoomRes = {}
PBMsgGameDeleteRoomRes.__index = PBMsgGameDeleteRoomRes
function PBMsgGameDeleteRoomRes.Create()
	local obj = setmetatable({},PBMsgGameDeleteRoomRes)
	return obj
end

function PBMsgGameDeleteRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBMsgGameDeleteRoomRes.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBMsgGameDeleteRoomRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameQuitRoomReq
PBMsgGameQuitRoomReq = {}
PBMsgGameQuitRoomReq.__index = PBMsgGameQuitRoomReq
function PBMsgGameQuitRoomReq.Create()
	local obj = setmetatable({},PBMsgGameQuitRoomReq)
	return obj
end

function PBMsgGameQuitRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	return obj
end

function PBMsgGameQuitRoomReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.room_pass ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
end

function PBMsgGameQuitRoomReq.GetSize(obj)
	local size = 0
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameQuitRoomRes
PBMsgGameQuitRoomRes = {}
PBMsgGameQuitRoomRes.__index = PBMsgGameQuitRoomRes
function PBMsgGameQuitRoomRes.Create()
	local obj = setmetatable({},PBMsgGameQuitRoomRes)
	return obj
end

function PBMsgGameQuitRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	return obj
end

function PBMsgGameQuitRoomRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
end

function PBMsgGameQuitRoomRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGamePassCardReq
PBMsgGamePassCardReq = {}
PBMsgGamePassCardReq.__index = PBMsgGamePassCardReq
function PBMsgGamePassCardReq.Create()
	local obj = setmetatable({},PBMsgGamePassCardReq)
	return obj
end

function PBMsgGamePassCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	return obj
end

function PBMsgGamePassCardReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.state ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
end

function PBMsgGamePassCardReq.GetSize(obj)
	local size = 0
	if (obj.state ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGamePassCardRes
PBMsgGamePassCardRes = {}
PBMsgGamePassCardRes.__index = PBMsgGamePassCardRes
function PBMsgGamePassCardRes.Create()
	local obj = setmetatable({},PBMsgGamePassCardRes)
	return obj
end

function PBMsgGamePassCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGamePassCardRes.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGamePassCardRes.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgGameWinCardReq
PBMsgGameWinCardReq = {}
PBMsgGameWinCardReq.__index = PBMsgGameWinCardReq
function PBMsgGameWinCardReq.Create()
	local obj = setmetatable({},PBMsgGameWinCardReq)
	return obj
end

function PBMsgGameWinCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGameWinCardReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.card ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGameWinCardReq.GetSize(obj)
	local size = 0
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGameWinCardRes
PBMsgGameWinCardRes = {}
PBMsgGameWinCardRes.__index = PBMsgGameWinCardRes
function PBMsgGameWinCardRes.Create()
	local obj = setmetatable({},PBMsgGameWinCardRes)
	return obj
end

function PBMsgGameWinCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.card = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardSize = deserialize_data_length()
				local cardStartPos = get_position()
				obj.card[i] = PBCard.Create()
				obj.card[i] = (obj.card[i]):DeSerialize()
				set_position(cardSize+cardStartPos )
			end
		end
	end
	return obj
end

function PBMsgGameWinCardRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.card ~= nil) then
		serialize_int32(#(obj.card))
		for i=1, #(obj.card) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.card[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgGameWinCardRes.GetSize(obj)
	local size = 0
	if (obj.card ~= nil) then
		for i=1,#(obj.card) do
			size = size + 5
			size = size + (obj.card[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBMsgGameBalanceReq
PBMsgGameBalanceReq = {}
PBMsgGameBalanceReq.__index = PBMsgGameBalanceReq
function PBMsgGameBalanceReq.Create()
	local obj = setmetatable({},PBMsgGameBalanceReq)
	return obj
end

function PBMsgGameBalanceReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.game_id = deserialize_int32()
	end
	return obj
end

function PBMsgGameBalanceReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.game_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.game_id ~= nil) then
		serialize_int32(obj.game_id)
	end
end

function PBMsgGameBalanceReq.GetSize(obj)
	local size = 0
	if (obj.game_id ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameBalanceRes
PBMsgGameBalanceRes = {}
PBMsgGameBalanceRes.__index = PBMsgGameBalanceRes
function PBMsgGameBalanceRes.Create()
	local obj = setmetatable({},PBMsgGameBalanceRes)
	return obj
end

function PBMsgGameBalanceRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.balances = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local balancesSize = deserialize_data_length()
				local balancesStartPos = get_position()
				obj.balances[i] = PBBalanceInfo.Create()
				obj.balances[i] = (obj.balances[i]):DeSerialize()
				set_position(balancesSize+balancesStartPos )
			end
		end
	end
	return obj
end

function PBMsgGameBalanceRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.balances ~= nil) then
		serialize_int32(#(obj.balances))
		for i=1, #(obj.balances) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.balances[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgGameBalanceRes.GetSize(obj)
	local size = 0
	if (obj.balances ~= nil) then
		for i=1,#(obj.balances) do
			size = size + 5
			size = size + (obj.balances[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBMsgClientAutoCloseSocketNotice
PBMsgClientAutoCloseSocketNotice = {}
PBMsgClientAutoCloseSocketNotice.__index = PBMsgClientAutoCloseSocketNotice
function PBMsgClientAutoCloseSocketNotice.Create()
	local obj = setmetatable({},PBMsgClientAutoCloseSocketNotice)
	return obj
end

function PBMsgClientAutoCloseSocketNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.SockIndex = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.DestIP = deserialize_int32()
	end
	return obj
end

function PBMsgClientAutoCloseSocketNotice.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.SockIndex ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.DestIP ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.SockIndex ~= nil) then
		serialize_int32(obj.SockIndex)
	end
	if(obj.DestIP ~= nil) then
		serialize_int32(obj.DestIP)
	end
end

function PBMsgClientAutoCloseSocketNotice.GetSize(obj)
	local size = 0
	if (obj.SockIndex ~= nil) then
		size = size + 4
	end
	if (obj.DestIP ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgServerAutoCloseSocketNotice
PBMsgServerAutoCloseSocketNotice = {}
PBMsgServerAutoCloseSocketNotice.__index = PBMsgServerAutoCloseSocketNotice
function PBMsgServerAutoCloseSocketNotice.Create()
	local obj = setmetatable({},PBMsgServerAutoCloseSocketNotice)
	return obj
end

function PBMsgServerAutoCloseSocketNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.reason = deserialize_int32()
	end
	return obj
end

function PBMsgServerAutoCloseSocketNotice.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.reason ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.reason ~= nil) then
		serialize_int32(obj.reason)
	end
end

function PBMsgServerAutoCloseSocketNotice.GetSize(obj)
	local size = 0
	if (obj.reason ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameReenterStateSync
PBMsgGameReenterStateSync = {}
PBMsgGameReenterStateSync.__index = PBMsgGameReenterStateSync
function PBMsgGameReenterStateSync.Create()
	local obj = setmetatable({},PBMsgGameReenterStateSync)
	return obj
end

function PBMsgGameReenterStateSync.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGameReenterStateSync.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.state ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.card ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGameReenterStateSync.GetSize(obj)
	local size = 0
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGameRoomChatReq
PBMsgGameRoomChatReq = {}
PBMsgGameRoomChatReq.__index = PBMsgGameRoomChatReq
function PBMsgGameRoomChatReq.Create()
	local obj = setmetatable({},PBMsgGameRoomChatReq)
	return obj
end

function PBMsgGameRoomChatReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.type_id = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.chat = deserialize_string()
	end
	return obj
end

function PBMsgGameRoomChatReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.type_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.chat ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.type_id ~= nil) then
		serialize_int32(obj.type_id)
	end
	if(obj.chat ~= nil) then
		serialize_string(obj.chat)
	end
end

function PBMsgGameRoomChatReq.GetSize(obj)
	local size = 0
	if (obj.type_id ~= nil) then
		size = size + 4
	end
	if (obj.chat ~= nil) then
		local sizeStr = string.len(obj.chat)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 6
	return size
end

-- PBMsgGameRoomChatRes
PBMsgGameRoomChatRes = {}
PBMsgGameRoomChatRes.__index = PBMsgGameRoomChatRes
function PBMsgGameRoomChatRes.Create()
	local obj = setmetatable({},PBMsgGameRoomChatRes)
	return obj
end

function PBMsgGameRoomChatRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.type_id = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.chat = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBMsgGameRoomChatRes.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.type_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.chat ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.roleid ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.type_id ~= nil) then
		serialize_int32(obj.type_id)
	end
	if(obj.chat ~= nil) then
		serialize_string(obj.chat)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBMsgGameRoomChatRes.GetSize(obj)
	local size = 0
	if (obj.type_id ~= nil) then
		size = size + 4
	end
	if (obj.chat ~= nil) then
		local sizeStr = string.len(obj.chat)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameHeartbeatReq
PBMsgGameHeartbeatReq = {}
PBMsgGameHeartbeatReq.__index = PBMsgGameHeartbeatReq
function PBMsgGameHeartbeatReq.Create()
	local obj = setmetatable({},PBMsgGameHeartbeatReq)
	return obj
end

function PBMsgGameHeartbeatReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGameHeartbeatReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGameHeartbeatReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgGameHeartbeatRes
PBMsgGameHeartbeatRes = {}
PBMsgGameHeartbeatRes.__index = PBMsgGameHeartbeatRes
function PBMsgGameHeartbeatRes.Create()
	local obj = setmetatable({},PBMsgGameHeartbeatRes)
	return obj
end

function PBMsgGameHeartbeatRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGameHeartbeatRes.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGameHeartbeatRes.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgRoleBaseInfoExReq
PBMsgRoleBaseInfoExReq = {}
PBMsgRoleBaseInfoExReq.__index = PBMsgRoleBaseInfoExReq
function PBMsgRoleBaseInfoExReq.Create()
	local obj = setmetatable({},PBMsgRoleBaseInfoExReq)
	return obj
end

function PBMsgRoleBaseInfoExReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBMsgRoleBaseInfoExReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBMsgRoleBaseInfoExReq.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoleBaseInfoExRes
PBMsgRoleBaseInfoExRes = {}
PBMsgRoleBaseInfoExRes.__index = PBMsgRoleBaseInfoExRes
function PBMsgRoleBaseInfoExRes.Create()
	local obj = setmetatable({},PBMsgRoleBaseInfoExRes)
	return obj
end

function PBMsgRoleBaseInfoExRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.address = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.sex = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.cardnum = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.name = deserialize_string()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.roundnum = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.roundwin = deserialize_int32()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	return obj
end

function PBMsgRoleBaseInfoExRes.Serialize(obj)
	local fieldCount = 9
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.imageurl ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.address ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.sex ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.cardnum ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.roleid ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.name ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.roundnum ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.roundwin ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.score ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	serialize_optional(flag)
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	if(obj.address ~= nil) then
		serialize_string(obj.address)
	end
	if(obj.sex ~= nil) then
		serialize_int32(obj.sex)
	end
	if(obj.cardnum ~= nil) then
		serialize_int32(obj.cardnum)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.name ~= nil) then
		serialize_string(obj.name)
	end
	if(obj.roundnum ~= nil) then
		serialize_int32(obj.roundnum)
	end
	if(obj.roundwin ~= nil) then
		serialize_int32(obj.roundwin)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
end

function PBMsgRoleBaseInfoExRes.GetSize(obj)
	local size = 0
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.address ~= nil) then
		local sizeStr = string.len(obj.address)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.sex ~= nil) then
		size = size + 4
	end
	if (obj.cardnum ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.name ~= nil) then
		local sizeStr = string.len(obj.name)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.roundnum ~= nil) then
		size = size + 4
	end
	if (obj.roundwin ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- PBRoleNumericValue
PBRoleNumericValue = {}
PBRoleNumericValue.__index = PBRoleNumericValue
function PBRoleNumericValue.Create()
	local obj = setmetatable({},PBRoleNumericValue)
	return obj
end

function PBRoleNumericValue.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.level = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.name = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.cardnum = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.roundnum = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.roundwin = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	return obj
end

function PBRoleNumericValue.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.level ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.name ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.cardnum ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.roundnum ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.roundwin ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.score ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	serialize_optional(flag)
	if(obj.level ~= nil) then
		serialize_int32(obj.level)
	end
	if(obj.name ~= nil) then
		serialize_string(obj.name)
	end
	if(obj.cardnum ~= nil) then
		serialize_int32(obj.cardnum)
	end
	if(obj.roundnum ~= nil) then
		serialize_int32(obj.roundnum)
	end
	if(obj.roundwin ~= nil) then
		serialize_int32(obj.roundwin)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
end

function PBRoleNumericValue.GetSize(obj)
	local size = 0
	if (obj.level ~= nil) then
		size = size + 4
	end
	if (obj.name ~= nil) then
		local sizeStr = string.len(obj.name)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.cardnum ~= nil) then
		size = size + 4
	end
	if (obj.roundnum ~= nil) then
		size = size + 4
	end
	if (obj.roundwin ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoleNumericValueReq
PBMsgRoleNumericValueReq = {}
PBMsgRoleNumericValueReq.__index = PBMsgRoleNumericValueReq
function PBMsgRoleNumericValueReq.Create()
	local obj = setmetatable({},PBMsgRoleNumericValueReq)
	return obj
end

function PBMsgRoleNumericValueReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgRoleNumericValueReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgRoleNumericValueReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgRoleNumericValueRes
PBMsgRoleNumericValueRes = {}
PBMsgRoleNumericValueRes.__index = PBMsgRoleNumericValueRes
function PBMsgRoleNumericValueRes.Create()
	local obj = setmetatable({},PBMsgRoleNumericValueRes)
	return obj
end

function PBMsgRoleNumericValueRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local numericSize = deserialize_data_length()
		local numericStartPos = get_position()
		obj.numeric = PBRoleNumericValue.Create()
		obj.numeric = obj.numeric:DeSerialize()
		set_position(numericSize+numericStartPos )
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.server_time = deserialize_int32()
	end
	return obj
end

function PBMsgRoleNumericValueRes.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.numeric ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.server_time ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.numeric ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.numeric:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if(obj.server_time ~= nil) then
		serialize_int32(obj.server_time)
	end
end

function PBMsgRoleNumericValueRes.GetSize(obj)
	local size = 0
	if (obj.numeric ~= nil) then
		size = size + obj.numeric:GetSize()
	end
	if (obj.server_time ~= nil) then
		size = size + 4
	end
	size = size + 11
	return size
end

-- PBMsgRoomDeleteConfirmReq
PBMsgRoomDeleteConfirmReq = {}
PBMsgRoomDeleteConfirmReq.__index = PBMsgRoomDeleteConfirmReq
function PBMsgRoomDeleteConfirmReq.Create()
	local obj = setmetatable({},PBMsgRoomDeleteConfirmReq)
	return obj
end

function PBMsgRoomDeleteConfirmReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.agree = deserialize_int32()
	end
	return obj
end

function PBMsgRoomDeleteConfirmReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.room_pass ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.agree ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
	if(obj.agree ~= nil) then
		serialize_int32(obj.agree)
	end
end

function PBMsgRoomDeleteConfirmReq.GetSize(obj)
	local size = 0
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	if (obj.agree ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoomDeleteConfirmRes
PBMsgRoomDeleteConfirmRes = {}
PBMsgRoomDeleteConfirmRes.__index = PBMsgRoomDeleteConfirmRes
function PBMsgRoomDeleteConfirmRes.Create()
	local obj = setmetatable({},PBMsgRoomDeleteConfirmRes)
	return obj
end

function PBMsgRoomDeleteConfirmRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBMsgRoomDeleteConfirmRes.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBMsgRoomDeleteConfirmRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoomDeleteAgreeReq
PBMsgRoomDeleteAgreeReq = {}
PBMsgRoomDeleteAgreeReq.__index = PBMsgRoomDeleteAgreeReq
function PBMsgRoomDeleteAgreeReq.Create()
	local obj = setmetatable({},PBMsgRoomDeleteAgreeReq)
	return obj
end

function PBMsgRoomDeleteAgreeReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.agree = deserialize_int32()
	end
	return obj
end

function PBMsgRoomDeleteAgreeReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.agree ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.agree ~= nil) then
		serialize_int32(obj.agree)
	end
end

function PBMsgRoomDeleteAgreeReq.GetSize(obj)
	local size = 0
	if (obj.agree ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBDeleteAgree
PBDeleteAgree = {}
PBDeleteAgree.__index = PBDeleteAgree
function PBDeleteAgree.Create()
	local obj = setmetatable({},PBDeleteAgree)
	return obj
end

function PBDeleteAgree.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.agree = deserialize_int32()
	end
	return obj
end

function PBDeleteAgree.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.agree ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.agree ~= nil) then
		serialize_int32(obj.agree)
	end
end

function PBDeleteAgree.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.agree ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoomDeleteAgreeRes
PBMsgRoomDeleteAgreeRes = {}
PBMsgRoomDeleteAgreeRes.__index = PBMsgRoomDeleteAgreeRes
function PBMsgRoomDeleteAgreeRes.Create()
	local obj = setmetatable({},PBMsgRoomDeleteAgreeRes)
	return obj
end

function PBMsgRoomDeleteAgreeRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.deletelist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local deletelistSize = deserialize_data_length()
				local deletelistStartPos = get_position()
				obj.deletelist[i] = PBDeleteAgree.Create()
				obj.deletelist[i] = (obj.deletelist[i]):DeSerialize()
				set_position(deletelistSize+deletelistStartPos )
			end
		end
	end
	return obj
end

function PBMsgRoomDeleteAgreeRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.deletelist ~= nil) then
		serialize_int32(#(obj.deletelist))
		for i=1, #(obj.deletelist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.deletelist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgRoomDeleteAgreeRes.GetSize(obj)
	local size = 0
	if (obj.deletelist ~= nil) then
		for i=1,#(obj.deletelist) do
			size = size + 5
			size = size + (obj.deletelist[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBMsgRoomBalanceRecordReq
PBMsgRoomBalanceRecordReq = {}
PBMsgRoomBalanceRecordReq.__index = PBMsgRoomBalanceRecordReq
function PBMsgRoomBalanceRecordReq.Create()
	local obj = setmetatable({},PBMsgRoomBalanceRecordReq)
	return obj
end

function PBMsgRoomBalanceRecordReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.page = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.num = deserialize_int32()
	end
	return obj
end

function PBMsgRoomBalanceRecordReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.page ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.num ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.page ~= nil) then
		serialize_int32(obj.page)
	end
	if(obj.num ~= nil) then
		serialize_int32(obj.num)
	end
end

function PBMsgRoomBalanceRecordReq.GetSize(obj)
	local size = 0
	if (obj.page ~= nil) then
		size = size + 4
	end
	if (obj.num ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBRoleRecord
PBRoleRecord = {}
PBRoleRecord.__index = PBRoleRecord
function PBRoleRecord.Create()
	local obj = setmetatable({},PBRoleRecord)
	return obj
end

function PBRoleRecord.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.nickname = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	return obj
end

function PBRoleRecord.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.nickname ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.score ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.nickname ~= nil) then
		serialize_string(obj.nickname)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
end

function PBRoleRecord.GetSize(obj)
	local size = 0
	if (obj.nickname ~= nil) then
		local sizeStr = string.len(obj.nickname)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBRoomBalanceRecord
PBRoomBalanceRecord = {}
PBRoomBalanceRecord.__index = PBRoomBalanceRecord
function PBRoomBalanceRecord.Create()
	local obj = setmetatable({},PBRoomBalanceRecord)
	return obj
end

function PBRoomBalanceRecord.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roomid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.used = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.time = deserialize_string()
	end

	if (fieldCount >= 5) then
		obj.records = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local recordsSize = deserialize_data_length()
				local recordsStartPos = get_position()
				obj.records[i] = PBRoleRecord.Create()
				obj.records[i] = (obj.records[i]):DeSerialize()
				set_position(recordsSize+recordsStartPos )
			end
		end
	end
	return obj
end

function PBRoomBalanceRecord.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roomid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.used ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.time ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roomid ~= nil) then
		serialize_int32(obj.roomid)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
	if(obj.time ~= nil) then
		serialize_string(obj.time)
	end
	if (obj.records ~= nil) then
		serialize_int32(#(obj.records))
		for i=1, #(obj.records) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.records[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoomBalanceRecord.GetSize(obj)
	local size = 0
	if (obj.roomid ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.used ~= nil) then
		size = size + 4
	end
	if (obj.time ~= nil) then
		local sizeStr = string.len(obj.time)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.records ~= nil) then
		for i=1,#(obj.records) do
			size = size + 5
			size = size + (obj.records[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBMsgBalanceRecordRes
PBMsgBalanceRecordRes = {}
PBMsgBalanceRecordRes.__index = PBMsgBalanceRecordRes
function PBMsgBalanceRecordRes.Create()
	local obj = setmetatable({},PBMsgBalanceRecordRes)
	return obj
end

function PBMsgBalanceRecordRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.record_list = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local record_listSize = deserialize_data_length()
				local record_listStartPos = get_position()
				obj.record_list[i] = PBRoomBalanceRecord.Create()
				obj.record_list[i] = (obj.record_list[i]):DeSerialize()
				set_position(record_listSize+record_listStartPos )
			end
		end
	end
	return obj
end

function PBMsgBalanceRecordRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.record_list ~= nil) then
		serialize_int32(#(obj.record_list))
		for i=1, #(obj.record_list) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.record_list[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgBalanceRecordRes.GetSize(obj)
	local size = 0
	if (obj.record_list ~= nil) then
		for i=1,#(obj.record_list) do
			size = size + 5
			size = size + (obj.record_list[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PB_OP_CODE_TYPE
PB_OP_CODE_TYPE = {}
PB_OP_CODE_TYPE.__index = PB_OP_CODE_TYPE
function PB_OP_CODE_TYPE.Create()
	local obj = setmetatable({},PB_OP_CODE_TYPE)
	return obj
end

function PB_OP_CODE_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_OP_CODE_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_OP_CODE_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBInstruction
PBInstruction = {}
PBInstruction.__index = PBInstruction
function PBInstruction.Create()
	local obj = setmetatable({},PBInstruction)
	return obj
end

function PBInstruction.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.opcode = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.ax = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.bx = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.cx = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.dx = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.ex = deserialize_int32()
	end
	return obj
end

function PBInstruction.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.opcode ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.ax ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.bx ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.cx ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.dx ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.ex ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	serialize_optional(flag)
	if(obj.opcode ~= nil) then
		serialize_int32(obj.opcode)
	end
	if(obj.ax ~= nil) then
		serialize_int32(obj.ax)
	end
	if(obj.bx ~= nil) then
		serialize_int32(obj.bx)
	end
	if(obj.cx ~= nil) then
		serialize_int32(obj.cx)
	end
	if(obj.dx ~= nil) then
		serialize_int32(obj.dx)
	end
	if(obj.ex ~= nil) then
		serialize_int32(obj.ex)
	end
end

function PBInstruction.GetSize(obj)
	local size = 0
	if (obj.opcode ~= nil) then
		size = size + 4
	end
	if (obj.ax ~= nil) then
		size = size + 4
	end
	if (obj.bx ~= nil) then
		size = size + 4
	end
	if (obj.cx ~= nil) then
		size = size + 4
	end
	if (obj.dx ~= nil) then
		size = size + 4
	end
	if (obj.ex ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBPlayRole
PBPlayRole = {}
PBPlayRole.__index = PBPlayRole
function PBPlayRole.Create()
	local obj = setmetatable({},PBPlayRole)
	return obj
end

function PBPlayRole.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.nickname = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.direct = deserialize_int32()
	end
	return obj
end

function PBPlayRole.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.nickname ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.imageurl ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.direct ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.nickname ~= nil) then
		serialize_string(obj.nickname)
	end
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	if(obj.direct ~= nil) then
		serialize_int32(obj.direct)
	end
end

function PBPlayRole.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.nickname ~= nil) then
		local sizeStr = string.len(obj.nickname)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.direct ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBPlayRoleCard
PBPlayRoleCard = {}
PBPlayRoleCard.__index = PBPlayRoleCard
function PBPlayRoleCard.Create()
	local obj = setmetatable({},PBPlayRoleCard)
	return obj
end

function PBPlayRoleCard.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.makers = deserialize_int32()
	end

	if (fieldCount >= 5) then
		obj.cards = deserialize_int32_array()
	end
	return obj
end

function PBPlayRoleCard.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.score ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.amount ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.makers ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.makers ~= nil) then
		serialize_int32(obj.makers)
	end
	serialize_int32_array(obj.cards)
end

function PBPlayRoleCard.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.makers ~= nil) then
		size = size + 4
	end
	if (obj.cards ~= nil) then
		for i=1,#(obj.cards) do
			size = size + 4
		end
	end
	size = size + 11
	return size
end

-- PBPlayProcess
PBPlayProcess = {}
PBPlayProcess.__index = PBPlayProcess
function PBPlayProcess.Create()
	local obj = setmetatable({},PBPlayProcess)
	return obj
end

function PBPlayProcess.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.used = deserialize_int32()
	end

	if (fieldCount >= 2) then
		obj.rolecard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolecardSize = deserialize_data_length()
				local rolecardStartPos = get_position()
				obj.rolecard[i] = PBPlayRoleCard.Create()
				obj.rolecard[i] = (obj.rolecard[i]):DeSerialize()
				set_position(rolecardSize+rolecardStartPos )
			end
		end
	end

	if (fieldCount >= 3) then
		obj.sequence = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local sequenceSize = deserialize_data_length()
				local sequenceStartPos = get_position()
				obj.sequence[i] = PBInstruction.Create()
				obj.sequence[i] = (obj.sequence[i]):DeSerialize()
				set_position(sequenceSize+sequenceStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.codecards = deserialize_int32_array()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.time = deserialize_string()
	end
	return obj
end

function PBPlayProcess.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.used ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.time ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
	if (obj.rolecard ~= nil) then
		serialize_int32(#(obj.rolecard))
		for i=1, #(obj.rolecard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolecard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.sequence ~= nil) then
		serialize_int32(#(obj.sequence))
		for i=1, #(obj.sequence) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.sequence[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	serialize_int32_array(obj.codecards)
	if(obj.time ~= nil) then
		serialize_string(obj.time)
	end
end

function PBPlayProcess.GetSize(obj)
	local size = 0
	if (obj.used ~= nil) then
		size = size + 4
	end
	if (obj.rolecard ~= nil) then
		for i=1,#(obj.rolecard) do
			size = size + 5
			size = size + (obj.rolecard[i]):GetSize()
		end
	end
	if (obj.sequence ~= nil) then
		for i=1,#(obj.sequence) do
			size = size + 5
			size = size + (obj.sequence[i]):GetSize()
		end
	end
	if (obj.codecards ~= nil) then
		for i=1,#(obj.codecards) do
			size = size + 4
		end
	end
	if (obj.time ~= nil) then
		local sizeStr = string.len(obj.time)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 21
	return size
end

-- PBRoomPlayBackReq
PBRoomPlayBackReq = {}
PBRoomPlayBackReq.__index = PBRoomPlayBackReq
function PBRoomPlayBackReq.Create()
	local obj = setmetatable({},PBRoomPlayBackReq)
	return obj
end

function PBRoomPlayBackReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roomid = deserialize_int32()
	end
	return obj
end

function PBRoomPlayBackReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roomid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roomid ~= nil) then
		serialize_int32(obj.roomid)
	end
end

function PBRoomPlayBackReq.GetSize(obj)
	local size = 0
	if (obj.roomid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBRoomPlayBackRes
PBRoomPlayBackRes = {}
PBRoomPlayBackRes.__index = PBRoomPlayBackRes
function PBRoomPlayBackRes.Create()
	local obj = setmetatable({},PBRoomPlayBackRes)
	return obj
end

function PBRoomPlayBackRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roomid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.hostid = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.rolelist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolelistSize = deserialize_data_length()
				local rolelistStartPos = get_position()
				obj.rolelist[i] = PBPlayRole.Create()
				obj.rolelist[i] = (obj.rolelist[i]):DeSerialize()
				set_position(rolelistSize+rolelistStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.processlist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local processlistSize = deserialize_data_length()
				local processlistStartPos = get_position()
				obj.processlist[i] = PBPlayProcess.Create()
				obj.processlist[i] = (obj.processlist[i]):DeSerialize()
				set_position(processlistSize+processlistStartPos )
			end
		end
	end
	return obj
end

function PBRoomPlayBackRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roomid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.hostid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roomid ~= nil) then
		serialize_int32(obj.roomid)
	end
	if(obj.hostid ~= nil) then
		serialize_int32(obj.hostid)
	end
	if (obj.rolelist ~= nil) then
		serialize_int32(#(obj.rolelist))
		for i=1, #(obj.rolelist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolelist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.processlist ~= nil) then
		serialize_int32(#(obj.processlist))
		for i=1, #(obj.processlist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.processlist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoomPlayBackRes.GetSize(obj)
	local size = 0
	if (obj.roomid ~= nil) then
		size = size + 4
	end
	if (obj.hostid ~= nil) then
		size = size + 4
	end
	if (obj.rolelist ~= nil) then
		for i=1,#(obj.rolelist) do
			size = size + 5
			size = size + (obj.rolelist[i]):GetSize()
		end
	end
	if (obj.processlist ~= nil) then
		for i=1,#(obj.processlist) do
			size = size + 5
			size = size + (obj.processlist[i]):GetSize()
		end
	end
	size = size + 16
	return size
end

-- PBPXAddCodeReq
PBPXAddCodeReq = {}
PBPXAddCodeReq.__index = PBPXAddCodeReq
function PBPXAddCodeReq.Create()
	local obj = setmetatable({},PBPXAddCodeReq)
	return obj
end

function PBPXAddCodeReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBPXAddCodeReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBPXAddCodeReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBPXAddCodeRes
PBPXAddCodeRes = {}
PBPXAddCodeRes.__index = PBPXAddCodeRes
function PBPXAddCodeRes.Create()
	local obj = setmetatable({},PBPXAddCodeRes)
	return obj
end

function PBPXAddCodeRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBPXAddCodeRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBPXAddCodeRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

