enumMSGID_MODULE_05 = {
	ID_MODULE_05_BEGIN = 1280,
	ID_ROLE_REQ = 1281,
	ID_ROLE_RES = 1282,
	ID_ROLE_SESSION_ID_NOTICE = 1283,
	ID_ERROR_CODE_NOTICE = 1284,
	ID_GAME_ROOM_CREATE_REQ = 1285,
	ID_GAME_ROOM_CREATE_RES = 1286,
	ID_GAME_ROOM_ENTER_REQ = 1287,
	ID_GAME_ROOM_ENTER_RES = 1288,
	ID_GAME_READY_REQ = 1289,
	ID_GAME_READY_RES = 1290,
	ID_GAME_PLAY_CARD_REQ = 1291,
	ID_GAME_PLAY_CARD_RES = 1292,
	ID_GAME_PENG_CARD_REQ = 1293,
	ID_GAME_PENG_CARD_RES = 1294,
	ID_GAME_GANG_CARD_REQ = 1295,
	ID_GAME_GANG_CARD_RES = 1296,
	ID_GAME_WIN_GAME_REQ = 1297,
	ID_GAME_WIN_GAME_RES = 1298,
	ID_GAME_ROOM_CARD_SYNC = 1300,
	ID_GAME_RESULT_REQ = 1301,
	ID_GAME_RESULT_RES = 1302,
	ID_GAME_GET_CARD_REQ = 1303,
	ID_GAME_GET_CARD_RES = 1304,
	ID_GAME_DELETE_ROOM_REQ = 1305,
	ID_GAME_DELETE_ROOM_RES = 1306,
	ID_GAME_QUIT_ROOM_REQ = 1307,
	ID_GAME_QUIT_ROOM_RES = 1308,
	ID_GAME_PASS_CARD_REQ = 1309,
	ID_GAME_PASS_CARD_RES = 1310,
	ID_MODULE_05_END = 1535,
}

enumCARD_TYPE = {
	CARD_WANG_TYPE = 0,
	CARD_TONG_TYPE = 1,
	CARD_TIAO_TYPE = 2,
	CARD_HONG_TYPE = 3,
}

enumDIRECTION_TYPE = {
	DIRECTION_EAST = 1,
	DIRECTION_NORTH = 2,
	DIRECTION_WEST = 3,
	DIRECTION_SOUTH = 4,
}

enumCARD_GANG_TYPE = {
	CARD_GANG_M_TYPE = 0,
	CARD_GANG_A_TYPE = 1,
	CARD_GANG_G_TYPE = 2,
}

-- PB_MSGID_MODULE_05
PB_MSGID_MODULE_05 = {}
PB_MSGID_MODULE_05.__index = PB_MSGID_MODULE_05
function PB_MSGID_MODULE_05.Create()
	local obj = setmetatable({},PB_MSGID_MODULE_05)
	return obj
end

function PB_MSGID_MODULE_05.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_MSGID_MODULE_05.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_MSGID_MODULE_05.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_TYPE
PB_CARD_TYPE = {}
PB_CARD_TYPE.__index = PB_CARD_TYPE
function PB_CARD_TYPE.Create()
	local obj = setmetatable({},PB_CARD_TYPE)
	return obj
end

function PB_CARD_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_DIRECTION_TYPE
PB_DIRECTION_TYPE = {}
PB_DIRECTION_TYPE.__index = PB_DIRECTION_TYPE
function PB_DIRECTION_TYPE.Create()
	local obj = setmetatable({},PB_DIRECTION_TYPE)
	return obj
end

function PB_DIRECTION_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_DIRECTION_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_DIRECTION_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PB_CARD_GANG_TYPE
PB_CARD_GANG_TYPE = {}
PB_CARD_GANG_TYPE.__index = PB_CARD_GANG_TYPE
function PB_CARD_GANG_TYPE.Create()
	local obj = setmetatable({},PB_CARD_GANG_TYPE)
	return obj
end

function PB_CARD_GANG_TYPE.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PB_CARD_GANG_TYPE.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PB_CARD_GANG_TYPE.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- RoleBaseInfo
RoleBaseInfo = {}
RoleBaseInfo.__index = RoleBaseInfo
function RoleBaseInfo.Create()
	local obj = setmetatable({},RoleBaseInfo)
	return obj
end

function RoleBaseInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.rolename = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.avatar = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.integral = deserialize_int32()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.host = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.makers = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.status = deserialize_int32()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.direct = deserialize_int32()
	end
	return obj
end

function RoleBaseInfo.Serialize(obj)
	local fieldCount = 9
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.rolename ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.avatar ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.imageurl ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.integral ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.host ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.makers ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.status ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.direct ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	serialize_optional(flag)
	if(obj.rolename ~= nil) then
		serialize_string(obj.rolename)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.avatar ~= nil) then
		serialize_int32(obj.avatar)
	end
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	if(obj.integral ~= nil) then
		serialize_int32(obj.integral)
	end
	if(obj.host ~= nil) then
		serialize_int32(obj.host)
	end
	if(obj.makers ~= nil) then
		serialize_int32(obj.makers)
	end
	if(obj.status ~= nil) then
		serialize_int32(obj.status)
	end
	if(obj.direct ~= nil) then
		serialize_int32(obj.direct)
	end
end

function RoleBaseInfo.GetSize(obj)
	local size = 0
	if (obj.rolename ~= nil) then
		local sizeStr = string.len(obj.rolename)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.avatar ~= nil) then
		size = size + 4
	end
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.integral ~= nil) then
		size = size + 4
	end
	if (obj.host ~= nil) then
		size = size + 4
	end
	if (obj.makers ~= nil) then
		size = size + 4
	end
	if (obj.status ~= nil) then
		size = size + 4
	end
	if (obj.direct ~= nil) then
		size = size + 4
	end
	size = size + 7
	return size
end

-- RoleStateInfo
RoleStateInfo = {}
RoleStateInfo.__index = RoleStateInfo
function RoleStateInfo.Create()
	local obj = setmetatable({},RoleStateInfo)
	return obj
end

function RoleStateInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	return obj
end

function RoleStateInfo.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.state ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
end

function RoleStateInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBCard
PBCard = {}
PBCard.__index = PBCard
function PBCard.Create()
	local obj = setmetatable({},PBCard)
	return obj
end

function PBCard.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.type_id = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.code_id = deserialize_int32()
	end
	return obj
end

function PBCard.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.type_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.code_id ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.type_id ~= nil) then
		serialize_int32(obj.type_id)
	end
	if(obj.code_id ~= nil) then
		serialize_int32(obj.code_id)
	end
end

function PBCard.GetSize(obj)
	local size = 0
	if (obj.type_id ~= nil) then
		size = size + 4
	end
	if (obj.code_id ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgRoleInfoReq
PBMsgRoleInfoReq = {}
PBMsgRoleInfoReq.__index = PBMsgRoleInfoReq
function PBMsgRoleInfoReq.Create()
	local obj = setmetatable({},PBMsgRoleInfoReq)
	return obj
end

function PBMsgRoleInfoReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.UserName = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.Passwd = deserialize_string()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.GameID = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.ServerID = deserialize_string()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.SessionID = deserialize_int64()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.OS = deserialize_string()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.Mac = deserialize_string()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.IdentityID = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.EratingID = deserialize_int32()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.hardware_sin1 = deserialize_string()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.hardware_sin2 = deserialize_string()
	end
	if(has_optional_flag(11,optionLength,option)) then
		obj.ad_id = deserialize_string()
	end
	if(has_optional_flag(12,optionLength,option)) then
		obj.client_type = deserialize_int32()
	end
	if(has_optional_flag(13,optionLength,option)) then
		obj.token = deserialize_string()
	end
	if(has_optional_flag(14,optionLength,option)) then
		obj.unix_time = deserialize_int32()
	end
	if(has_optional_flag(15,optionLength,option)) then
		obj.cp_id = deserialize_string()
	end
	if(has_optional_flag(16,optionLength,option)) then
		obj.sdk = deserialize_string()
	end
	if(has_optional_flag(17,optionLength,option)) then
		obj.uid = deserialize_string()
	end
	if(has_optional_flag(18,optionLength,option)) then
		obj.idcode = deserialize_string()
	end
	if(has_optional_flag(19,optionLength,option)) then
		obj.adult = deserialize_int32()
	end
	if(has_optional_flag(20,optionLength,option)) then
		obj.CodeVersion = deserialize_string()
	end
	if(has_optional_flag(21,optionLength,option)) then
		obj.openid = deserialize_string()
	end
	return obj
end

function PBMsgRoleInfoReq.Serialize(obj)
	local fieldCount = 22
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.UserName ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.Passwd ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.GameID ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.ServerID ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.SessionID ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.OS ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.Mac ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.IdentityID ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.EratingID ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.hardware_sin1 ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.hardware_sin2 ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	if(obj.ad_id ~= nil) then
		flag[12] = true
	else
		flag[12] = false
	end
	if(obj.client_type ~= nil) then
		flag[13] = true
	else
		flag[13] = false
	end
	if(obj.token ~= nil) then
		flag[14] = true
	else
		flag[14] = false
	end
	if(obj.unix_time ~= nil) then
		flag[15] = true
	else
		flag[15] = false
	end
	if(obj.cp_id ~= nil) then
		flag[16] = true
	else
		flag[16] = false
	end
	if(obj.sdk ~= nil) then
		flag[17] = true
	else
		flag[17] = false
	end
	if(obj.uid ~= nil) then
		flag[18] = true
	else
		flag[18] = false
	end
	if(obj.idcode ~= nil) then
		flag[19] = true
	else
		flag[19] = false
	end
	if(obj.adult ~= nil) then
		flag[20] = true
	else
		flag[20] = false
	end
	if(obj.CodeVersion ~= nil) then
		flag[21] = true
	else
		flag[21] = false
	end
	if(obj.openid ~= nil) then
		flag[22] = true
	else
		flag[22] = false
	end
	serialize_optional(flag)
	if(obj.UserName ~= nil) then
		serialize_string(obj.UserName)
	end
	if(obj.Passwd ~= nil) then
		serialize_string(obj.Passwd)
	end
	if(obj.GameID ~= nil) then
		serialize_int32(obj.GameID)
	end
	if(obj.ServerID ~= nil) then
		serialize_string(obj.ServerID)
	end
	if(obj.SessionID ~= nil) then
		serialize_int64(obj.SessionID)
	end
	if(obj.OS ~= nil) then
		serialize_string(obj.OS)
	end
	if(obj.Mac ~= nil) then
		serialize_string(obj.Mac)
	end
	if(obj.IdentityID ~= nil) then
		serialize_string(obj.IdentityID)
	end
	if(obj.EratingID ~= nil) then
		serialize_int32(obj.EratingID)
	end
	if(obj.hardware_sin1 ~= nil) then
		serialize_string(obj.hardware_sin1)
	end
	if(obj.hardware_sin2 ~= nil) then
		serialize_string(obj.hardware_sin2)
	end
	if(obj.ad_id ~= nil) then
		serialize_string(obj.ad_id)
	end
	if(obj.client_type ~= nil) then
		serialize_int32(obj.client_type)
	end
	if(obj.token ~= nil) then
		serialize_string(obj.token)
	end
	if(obj.unix_time ~= nil) then
		serialize_int32(obj.unix_time)
	end
	if(obj.cp_id ~= nil) then
		serialize_string(obj.cp_id)
	end
	if(obj.sdk ~= nil) then
		serialize_string(obj.sdk)
	end
	if(obj.uid ~= nil) then
		serialize_string(obj.uid)
	end
	if(obj.idcode ~= nil) then
		serialize_string(obj.idcode)
	end
	if(obj.adult ~= nil) then
		serialize_int32(obj.adult)
	end
	if(obj.CodeVersion ~= nil) then
		serialize_string(obj.CodeVersion)
	end
	if(obj.openid ~= nil) then
		serialize_string(obj.openid)
	end
end

function PBMsgRoleInfoReq.GetSize(obj)
	local size = 0
	if (obj.UserName ~= nil) then
		local sizeStr = string.len(obj.UserName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.Passwd ~= nil) then
		local sizeStr = string.len(obj.Passwd)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.GameID ~= nil) then
		size = size + 4
	end
	if (obj.ServerID ~= nil) then
		local sizeStr = string.len(obj.ServerID)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.SessionID ~= nil) then
		size = size + 8
	end
	if (obj.OS ~= nil) then
		local sizeStr = string.len(obj.OS)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.Mac ~= nil) then
		local sizeStr = string.len(obj.Mac)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.IdentityID ~= nil) then
		local sizeStr = string.len(obj.IdentityID)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.EratingID ~= nil) then
		size = size + 4
	end
	if (obj.hardware_sin1 ~= nil) then
		local sizeStr = string.len(obj.hardware_sin1)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.hardware_sin2 ~= nil) then
		local sizeStr = string.len(obj.hardware_sin2)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.ad_id ~= nil) then
		local sizeStr = string.len(obj.ad_id)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.client_type ~= nil) then
		size = size + 4
	end
	if (obj.token ~= nil) then
		local sizeStr = string.len(obj.token)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.unix_time ~= nil) then
		size = size + 4
	end
	if (obj.cp_id ~= nil) then
		local sizeStr = string.len(obj.cp_id)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.sdk ~= nil) then
		local sizeStr = string.len(obj.sdk)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.uid ~= nil) then
		local sizeStr = string.len(obj.uid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.idcode ~= nil) then
		local sizeStr = string.len(obj.idcode)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.adult ~= nil) then
		size = size + 4
	end
	if (obj.CodeVersion ~= nil) then
		local sizeStr = string.len(obj.CodeVersion)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.openid ~= nil) then
		local sizeStr = string.len(obj.openid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 9
	return size
end

-- PBMsgRoleInfoRes
PBMsgRoleInfoRes = {}
PBMsgRoleInfoRes.__index = PBMsgRoleInfoRes
function PBMsgRoleInfoRes.Create()
	local obj = setmetatable({},PBMsgRoleInfoRes)
	return obj
end

function PBMsgRoleInfoRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.RoleName = deserialize_string()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.RoleID = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.server_time = deserialize_int64()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.erating_id = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.userName = deserialize_string()
	end
	if(has_optional_flag(5,optionLength,option)) then
		obj.integral = deserialize_int32()
	end
	if(has_optional_flag(6,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	if(has_optional_flag(7,optionLength,option)) then
		obj.nickname = deserialize_string()
	end
	if(has_optional_flag(8,optionLength,option)) then
		obj.openid = deserialize_string()
	end
	if(has_optional_flag(9,optionLength,option)) then
		obj.sex = deserialize_string()
	end
	if(has_optional_flag(10,optionLength,option)) then
		obj.province = deserialize_string()
	end
	if(has_optional_flag(11,optionLength,option)) then
		obj.city = deserialize_string()
	end
	if(has_optional_flag(12,optionLength,option)) then
		obj.country = deserialize_string()
	end
	if(has_optional_flag(13,optionLength,option)) then
		obj.imageurl = deserialize_string()
	end

	if (fieldCount >= 15) then
		obj.privilege = deserialize_string_array()
	end
	if(has_optional_flag(14,optionLength,option)) then
		obj.unionid = deserialize_string()
	end
	return obj
end

function PBMsgRoleInfoRes.Serialize(obj)
	local fieldCount = 16
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.RoleName ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.RoleID ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.server_time ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.erating_id ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.userName ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	if(obj.integral ~= nil) then
		flag[6] = true
	else
		flag[6] = false
	end
	if(obj.room_pass ~= nil) then
		flag[7] = true
	else
		flag[7] = false
	end
	if(obj.nickname ~= nil) then
		flag[8] = true
	else
		flag[8] = false
	end
	if(obj.openid ~= nil) then
		flag[9] = true
	else
		flag[9] = false
	end
	if(obj.sex ~= nil) then
		flag[10] = true
	else
		flag[10] = false
	end
	if(obj.province ~= nil) then
		flag[11] = true
	else
		flag[11] = false
	end
	if(obj.city ~= nil) then
		flag[12] = true
	else
		flag[12] = false
	end
	if(obj.country ~= nil) then
		flag[13] = true
	else
		flag[13] = false
	end
	if(obj.imageurl ~= nil) then
		flag[14] = true
	else
		flag[14] = false
	end
	if(obj.unionid ~= nil) then
		flag[15] = true
	else
		flag[15] = false
	end
	serialize_optional(flag)
	if(obj.RoleName ~= nil) then
		serialize_string(obj.RoleName)
	end
	if(obj.RoleID ~= nil) then
		serialize_int32(obj.RoleID)
	end
	if(obj.server_time ~= nil) then
		serialize_int64(obj.server_time)
	end
	if(obj.erating_id ~= nil) then
		serialize_int32(obj.erating_id)
	end
	if(obj.userName ~= nil) then
		serialize_string(obj.userName)
	end
	if(obj.integral ~= nil) then
		serialize_int32(obj.integral)
	end
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
	if(obj.nickname ~= nil) then
		serialize_string(obj.nickname)
	end
	if(obj.openid ~= nil) then
		serialize_string(obj.openid)
	end
	if(obj.sex ~= nil) then
		serialize_string(obj.sex)
	end
	if(obj.province ~= nil) then
		serialize_string(obj.province)
	end
	if(obj.city ~= nil) then
		serialize_string(obj.city)
	end
	if(obj.country ~= nil) then
		serialize_string(obj.country)
	end
	if(obj.imageurl ~= nil) then
		serialize_string(obj.imageurl)
	end
	serialize_string_array(obj.privilege)
	if(obj.unionid ~= nil) then
		serialize_string(obj.unionid)
	end
end

function PBMsgRoleInfoRes.GetSize(obj)
	local size = 0
	if (obj.RoleName ~= nil) then
		local sizeStr = string.len(obj.RoleName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.RoleID ~= nil) then
		size = size + 4
	end
	if (obj.server_time ~= nil) then
		size = size + 8
	end
	if (obj.erating_id ~= nil) then
		size = size + 4
	end
	if (obj.userName ~= nil) then
		local sizeStr = string.len(obj.userName)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.integral ~= nil) then
		size = size + 4
	end
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	if (obj.nickname ~= nil) then
		local sizeStr = string.len(obj.nickname)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.openid ~= nil) then
		local sizeStr = string.len(obj.openid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.sex ~= nil) then
		local sizeStr = string.len(obj.sex)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.province ~= nil) then
		local sizeStr = string.len(obj.province)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.city ~= nil) then
		local sizeStr = string.len(obj.city)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.country ~= nil) then
		local sizeStr = string.len(obj.country)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.imageurl ~= nil) then
		local sizeStr = string.len(obj.imageurl)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	if (obj.privilege ~= nil) then
		for i=1,#(obj.privilege) do
			local sizeStr = string.len(obj.privilege[i])
			size = size + serialize_get_str_actual_size(sizeStr)
		end
	end
	if (obj.unionid ~= nil) then
		local sizeStr = string.len(obj.unionid)
		size = size + serialize_get_str_actual_size(sizeStr)
	end
	size = size + 13
	return size
end

-- PBMsgRoleSessionIdNotice
PBMsgRoleSessionIdNotice = {}
PBMsgRoleSessionIdNotice.__index = PBMsgRoleSessionIdNotice
function PBMsgRoleSessionIdNotice.Create()
	local obj = setmetatable({},PBMsgRoleSessionIdNotice)
	return obj
end

function PBMsgRoleSessionIdNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.session_id = deserialize_int64()
	end
	return obj
end

function PBMsgRoleSessionIdNotice.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.session_id ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.session_id ~= nil) then
		serialize_int64(obj.session_id)
	end
end

function PBMsgRoleSessionIdNotice.GetSize(obj)
	local size = 0
	if (obj.session_id ~= nil) then
		size = size + 8
	end
	size = size + 6
	return size
end

-- PBMsgCreateRoomReq
PBMsgCreateRoomReq = {}
PBMsgCreateRoomReq.__index = PBMsgCreateRoomReq
function PBMsgCreateRoomReq.Create()
	local obj = setmetatable({},PBMsgCreateRoomReq)
	return obj
end

function PBMsgCreateRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.unid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.addition = deserialize_int32()
	end
	return obj
end

function PBMsgCreateRoomReq.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.unid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.addition ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.unid ~= nil) then
		serialize_int32(obj.unid)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
end

function PBMsgCreateRoomReq.GetSize(obj)
	local size = 0
	if (obj.unid ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgCreateRoomRes
PBMsgCreateRoomRes = {}
PBMsgCreateRoomRes.__index = PBMsgCreateRoomRes
function PBMsgCreateRoomRes.Create()
	local obj = setmetatable({},PBMsgCreateRoomRes)
	return obj
end

function PBMsgCreateRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.addition = deserialize_int32()
	end
	return obj
end

function PBMsgCreateRoomRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.passwd ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.addition ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
end

function PBMsgCreateRoomRes.GetSize(obj)
	local size = 0
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgEnterRoomReq
PBMsgEnterRoomReq = {}
PBMsgEnterRoomReq.__index = PBMsgEnterRoomReq
function PBMsgEnterRoomReq.Create()
	local obj = setmetatable({},PBMsgEnterRoomReq)
	return obj
end

function PBMsgEnterRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	return obj
end

function PBMsgEnterRoomReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.passwd ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
end

function PBMsgEnterRoomReq.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgEnterRoomRes
PBMsgEnterRoomRes = {}
PBMsgEnterRoomRes.__index = PBMsgEnterRoomRes
function PBMsgEnterRoomRes.Create()
	local obj = setmetatable({},PBMsgEnterRoomRes)
	return obj
end

function PBMsgEnterRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.passwd = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.amount = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.horse = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.used = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		obj.addition = deserialize_int32()
	end

	if (fieldCount >= 6) then
		obj.rolelist = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolelistSize = deserialize_data_length()
				local rolelistStartPos = get_position()
				obj.rolelist[i] = RoleBaseInfo.Create()
				obj.rolelist[i] = (obj.rolelist[i]):DeSerialize()
				set_position(rolelistSize+rolelistStartPos )
			end
		end
	end
	return obj
end

function PBMsgEnterRoomRes.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.passwd ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.amount ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.horse ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.used ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.addition ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	serialize_optional(flag)
	if(obj.passwd ~= nil) then
		serialize_int32(obj.passwd)
	end
	if(obj.amount ~= nil) then
		serialize_int32(obj.amount)
	end
	if(obj.horse ~= nil) then
		serialize_int32(obj.horse)
	end
	if(obj.used ~= nil) then
		serialize_int32(obj.used)
	end
	if(obj.addition ~= nil) then
		serialize_int32(obj.addition)
	end
	if (obj.rolelist ~= nil) then
		serialize_int32(#(obj.rolelist))
		for i=1, #(obj.rolelist) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolelist[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgEnterRoomRes.GetSize(obj)
	local size = 0
	if (obj.passwd ~= nil) then
		size = size + 4
	end
	if (obj.amount ~= nil) then
		size = size + 4
	end
	if (obj.horse ~= nil) then
		size = size + 4
	end
	if (obj.used ~= nil) then
		size = size + 4
	end
	if (obj.addition ~= nil) then
		size = size + 4
	end
	if (obj.rolelist ~= nil) then
		for i=1,#(obj.rolelist) do
			size = size + 5
			size = size + (obj.rolelist[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBMsgReadyReq
PBMsgReadyReq = {}
PBMsgReadyReq.__index = PBMsgReadyReq
function PBMsgReadyReq.Create()
	local obj = setmetatable({},PBMsgReadyReq)
	return obj
end

function PBMsgReadyReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgReadyReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgReadyReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgReadyRes
PBMsgReadyRes = {}
PBMsgReadyRes.__index = PBMsgReadyRes
function PBMsgReadyRes.Create()
	local obj = setmetatable({},PBMsgReadyRes)
	return obj
end

function PBMsgReadyRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.rolestate = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local rolestateSize = deserialize_data_length()
				local rolestateStartPos = get_position()
				obj.rolestate[i] = RoleStateInfo.Create()
				obj.rolestate[i] = (obj.rolestate[i]):DeSerialize()
				set_position(rolestateSize+rolestateStartPos )
			end
		end
	end
	return obj
end

function PBMsgReadyRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.rolestate ~= nil) then
		serialize_int32(#(obj.rolestate))
		for i=1, #(obj.rolestate) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.rolestate[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgReadyRes.GetSize(obj)
	local size = 0
	if (obj.rolestate ~= nil) then
		for i=1,#(obj.rolestate) do
			size = size + 5
			size = size + (obj.rolestate[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBRoleCardInfo
PBRoleCardInfo = {}
PBRoleCardInfo.__index = PBRoleCardInfo
function PBRoleCardInfo.Create()
	local obj = setmetatable({},PBRoleCardInfo)
	return obj
end

function PBRoleCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.handcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local handcardSize = deserialize_data_length()
				local handcardStartPos = get_position()
				obj.handcard[i] = PBCard.Create()
				obj.handcard[i] = (obj.handcard[i]):DeSerialize()
				set_position(handcardSize+handcardStartPos )
			end
		end
	end

	if (fieldCount >= 2) then
		obj.pengcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local pengcardSize = deserialize_data_length()
				local pengcardStartPos = get_position()
				obj.pengcard[i] = PBCard.Create()
				obj.pengcard[i] = (obj.pengcard[i]):DeSerialize()
				set_position(pengcardSize+pengcardStartPos )
			end
		end
	end

	if (fieldCount >= 3) then
		obj.gangcardm = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardmSize = deserialize_data_length()
				local gangcardmStartPos = get_position()
				obj.gangcardm[i] = PBCard.Create()
				obj.gangcardm[i] = (obj.gangcardm[i]):DeSerialize()
				set_position(gangcardmSize+gangcardmStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.gangcarda = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardaSize = deserialize_data_length()
				local gangcardaStartPos = get_position()
				obj.gangcarda[i] = PBCard.Create()
				obj.gangcarda[i] = (obj.gangcarda[i]):DeSerialize()
				set_position(gangcardaSize+gangcardaStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.gangcardg = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardgSize = deserialize_data_length()
				local gangcardgStartPos = get_position()
				obj.gangcardg[i] = PBCard.Create()
				obj.gangcardg[i] = (obj.gangcardg[i]):DeSerialize()
				set_position(gangcardgSize+gangcardgStartPos )
			end
		end
	end
	return obj
end

function PBRoleCardInfo.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.handcard ~= nil) then
		serialize_int32(#(obj.handcard))
		for i=1, #(obj.handcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.handcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.pengcard ~= nil) then
		serialize_int32(#(obj.pengcard))
		for i=1, #(obj.pengcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.pengcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardm ~= nil) then
		serialize_int32(#(obj.gangcardm))
		for i=1, #(obj.gangcardm) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardm[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcarda ~= nil) then
		serialize_int32(#(obj.gangcarda))
		for i=1, #(obj.gangcarda) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcarda[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardg ~= nil) then
		serialize_int32(#(obj.gangcardg))
		for i=1, #(obj.gangcardg) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardg[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoleCardInfo.GetSize(obj)
	local size = 0
	if (obj.handcard ~= nil) then
		for i=1,#(obj.handcard) do
			size = size + 5
			size = size + (obj.handcard[i]):GetSize()
		end
	end
	if (obj.pengcard ~= nil) then
		for i=1,#(obj.pengcard) do
			size = size + 5
			size = size + (obj.pengcard[i]):GetSize()
		end
	end
	if (obj.gangcardm ~= nil) then
		for i=1,#(obj.gangcardm) do
			size = size + 5
			size = size + (obj.gangcardm[i]):GetSize()
		end
	end
	if (obj.gangcarda ~= nil) then
		for i=1,#(obj.gangcarda) do
			size = size + 5
			size = size + (obj.gangcarda[i]):GetSize()
		end
	end
	if (obj.gangcardg ~= nil) then
		for i=1,#(obj.gangcardg) do
			size = size + 5
			size = size + (obj.gangcardg[i]):GetSize()
		end
	end
	size = size + 30
	return size
end

-- PBOtherCardInfo
PBOtherCardInfo = {}
PBOtherCardInfo.__index = PBOtherCardInfo
function PBOtherCardInfo.Create()
	local obj = setmetatable({},PBOtherCardInfo)
	return obj
end

function PBOtherCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.handnum = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.pengcard = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local pengcardSize = deserialize_data_length()
				local pengcardStartPos = get_position()
				obj.pengcard[i] = PBCard.Create()
				obj.pengcard[i] = (obj.pengcard[i]):DeSerialize()
				set_position(pengcardSize+pengcardStartPos )
			end
		end
	end

	if (fieldCount >= 4) then
		obj.gangcardm = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardmSize = deserialize_data_length()
				local gangcardmStartPos = get_position()
				obj.gangcardm[i] = PBCard.Create()
				obj.gangcardm[i] = (obj.gangcardm[i]):DeSerialize()
				set_position(gangcardmSize+gangcardmStartPos )
			end
		end
	end

	if (fieldCount >= 5) then
		obj.gangcarda = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardaSize = deserialize_data_length()
				local gangcardaStartPos = get_position()
				obj.gangcarda[i] = PBCard.Create()
				obj.gangcarda[i] = (obj.gangcarda[i]):DeSerialize()
				set_position(gangcardaSize+gangcardaStartPos )
			end
		end
	end

	if (fieldCount >= 6) then
		obj.gangcardg = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local gangcardgSize = deserialize_data_length()
				local gangcardgStartPos = get_position()
				obj.gangcardg[i] = PBCard.Create()
				obj.gangcardg[i] = (obj.gangcardg[i]):DeSerialize()
				set_position(gangcardgSize+gangcardgStartPos )
			end
		end
	end
	return obj
end

function PBOtherCardInfo.Serialize(obj)
	local fieldCount = 6
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.handnum ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.handnum ~= nil) then
		serialize_int32(obj.handnum)
	end
	if (obj.pengcard ~= nil) then
		serialize_int32(#(obj.pengcard))
		for i=1, #(obj.pengcard) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.pengcard[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardm ~= nil) then
		serialize_int32(#(obj.gangcardm))
		for i=1, #(obj.gangcardm) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardm[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcarda ~= nil) then
		serialize_int32(#(obj.gangcarda))
		for i=1, #(obj.gangcarda) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcarda[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.gangcardg ~= nil) then
		serialize_int32(#(obj.gangcardg))
		for i=1, #(obj.gangcardg) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.gangcardg[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBOtherCardInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.handnum ~= nil) then
		size = size + 4
	end
	if (obj.pengcard ~= nil) then
		for i=1,#(obj.pengcard) do
			size = size + 5
			size = size + (obj.pengcard[i]):GetSize()
		end
	end
	if (obj.gangcardm ~= nil) then
		for i=1,#(obj.gangcardm) do
			size = size + 5
			size = size + (obj.gangcardm[i]):GetSize()
		end
	end
	if (obj.gangcarda ~= nil) then
		for i=1,#(obj.gangcarda) do
			size = size + 5
			size = size + (obj.gangcarda[i]):GetSize()
		end
	end
	if (obj.gangcardg ~= nil) then
		for i=1,#(obj.gangcardg) do
			size = size + 5
			size = size + (obj.gangcardg[i]):GetSize()
		end
	end
	size = size + 26
	return size
end

-- PBPlayCardInfo
PBPlayCardInfo = {}
PBPlayCardInfo.__index = PBPlayCardInfo
function PBPlayCardInfo.Create()
	local obj = setmetatable({},PBPlayCardInfo)
	return obj
end

function PBPlayCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end

	if (fieldCount >= 2) then
		obj.cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardsSize = deserialize_data_length()
				local cardsStartPos = get_position()
				obj.cards[i] = PBCard.Create()
				obj.cards[i] = (obj.cards[i]):DeSerialize()
				set_position(cardsSize+cardsStartPos )
			end
		end
	end
	return obj
end

function PBPlayCardInfo.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if (obj.cards ~= nil) then
		serialize_int32(#(obj.cards))
		for i=1, #(obj.cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBPlayCardInfo.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.cards ~= nil) then
		for i=1,#(obj.cards) do
			size = size + 5
			size = size + (obj.cards[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBTableCardInfo
PBTableCardInfo = {}
PBTableCardInfo.__index = PBTableCardInfo
function PBTableCardInfo.Create()
	local obj = setmetatable({},PBTableCardInfo)
	return obj
end

function PBTableCardInfo.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.playcards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local playcardsSize = deserialize_data_length()
				local playcardsStartPos = get_position()
				obj.playcards[i] = PBPlayCardInfo.Create()
				obj.playcards[i] = (obj.playcards[i]):DeSerialize()
				set_position(playcardsSize+playcardsStartPos )
			end
		end
	end
	return obj
end

function PBTableCardInfo.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.playcards ~= nil) then
		serialize_int32(#(obj.playcards))
		for i=1, #(obj.playcards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.playcards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBTableCardInfo.GetSize(obj)
	local size = 0
	if (obj.playcards ~= nil) then
		for i=1,#(obj.playcards) do
			size = size + 5
			size = size + (obj.playcards[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBRoomCardInfoSync
PBRoomCardInfoSync = {}
PBRoomCardInfoSync.__index = PBRoomCardInfoSync
function PBRoomCardInfoSync.Create()
	local obj = setmetatable({},PBRoomCardInfoSync)
	return obj
end

function PBRoomCardInfoSync.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local owncardsSize = deserialize_data_length()
		local owncardsStartPos = get_position()
		obj.owncards = PBRoleCardInfo.Create()
		obj.owncards = obj.owncards:DeSerialize()
		set_position(owncardsSize+owncardsStartPos )
	end

	if (fieldCount >= 2) then
		obj.othercards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local othercardsSize = deserialize_data_length()
				local othercardsStartPos = get_position()
				obj.othercards[i] = PBOtherCardInfo.Create()
				obj.othercards[i] = (obj.othercards[i]):DeSerialize()
				set_position(othercardsSize+othercardsStartPos )
			end
		end
	end

	if (fieldCount >= 3) then
		obj.tablecards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local tablecardsSize = deserialize_data_length()
				local tablecardsStartPos = get_position()
				obj.tablecards[i] = PBPlayCardInfo.Create()
				obj.tablecards[i] = (obj.tablecards[i]):DeSerialize()
				set_position(tablecardsSize+tablecardsStartPos )
			end
		end
	end
	return obj
end

function PBRoomCardInfoSync.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.owncards ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.owncards ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.owncards:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if (obj.othercards ~= nil) then
		serialize_int32(#(obj.othercards))
		for i=1, #(obj.othercards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.othercards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
	if (obj.tablecards ~= nil) then
		serialize_int32(#(obj.tablecards))
		for i=1, #(obj.tablecards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.tablecards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoomCardInfoSync.GetSize(obj)
	local size = 0
	if (obj.owncards ~= nil) then
		size = size + obj.owncards:GetSize()
	end
	if (obj.othercards ~= nil) then
		for i=1,#(obj.othercards) do
			size = size + 5
			size = size + (obj.othercards[i]):GetSize()
		end
	end
	if (obj.tablecards ~= nil) then
		for i=1,#(obj.tablecards) do
			size = size + 5
			size = size + (obj.tablecards[i]):GetSize()
		end
	end
	size = size + 21
	return size
end

-- PBMsgErrorCodeNotice
PBMsgErrorCodeNotice = {}
PBMsgErrorCodeNotice.__index = PBMsgErrorCodeNotice
function PBMsgErrorCodeNotice.Create()
	local obj = setmetatable({},PBMsgErrorCodeNotice)
	return obj
end

function PBMsgErrorCodeNotice.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.err_code = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.err_type = deserialize_int32()
	end

	if (fieldCount >= 3) then
		obj.err_para = deserialize_int32_array()
	end
	return obj
end

function PBMsgErrorCodeNotice.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.err_code ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.err_type ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.err_code ~= nil) then
		serialize_int32(obj.err_code)
	end
	if(obj.err_type ~= nil) then
		serialize_int32(obj.err_type)
	end
	serialize_int32_array(obj.err_para)
end

function PBMsgErrorCodeNotice.GetSize(obj)
	local size = 0
	if (obj.err_code ~= nil) then
		size = size + 4
	end
	if (obj.err_type ~= nil) then
		size = size + 4
	end
	if (obj.err_para ~= nil) then
		for i=1,#(obj.err_para) do
			size = size + 4
		end
	end
	size = size + 11
	return size
end

-- PBMsgPlayCardReq
PBMsgPlayCardReq = {}
PBMsgPlayCardReq.__index = PBMsgPlayCardReq
function PBMsgPlayCardReq.Create()
	local obj = setmetatable({},PBMsgPlayCardReq)
	return obj
end

function PBMsgPlayCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	return obj
end

function PBMsgPlayCardReq.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.card ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.index ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
end

function PBMsgPlayCardReq.GetSize(obj)
	local size = 0
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	size = size + 11
	return size
end

-- PBMsgPlayCardRes
PBMsgPlayCardRes = {}
PBMsgPlayCardRes.__index = PBMsgPlayCardRes
function PBMsgPlayCardRes.Create()
	local obj = setmetatable({},PBMsgPlayCardRes)
	return obj
end

function PBMsgPlayCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPlayCardRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.index ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.card ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPlayCardRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgPengCardReq
PBMsgPengCardReq = {}
PBMsgPengCardReq.__index = PBMsgPengCardReq
function PBMsgPengCardReq.Create()
	local obj = setmetatable({},PBMsgPengCardReq)
	return obj
end

function PBMsgPengCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPengCardReq.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.index ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.card ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPengCardReq.GetSize(obj)
	local size = 0
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgPengCardRes
PBMsgPengCardRes = {}
PBMsgPengCardRes.__index = PBMsgPengCardRes
function PBMsgPengCardRes.Create()
	local obj = setmetatable({},PBMsgPengCardRes)
	return obj
end

function PBMsgPengCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.srcid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgPengCardRes.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.srcid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.index ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.card ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.srcid ~= nil) then
		serialize_int32(obj.srcid)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgPengCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.srcid ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGangCardReq
PBMsgGangCardReq = {}
PBMsgGangCardReq.__index = PBMsgGangCardReq
function PBMsgGangCardReq.Create()
	local obj = setmetatable({},PBMsgGangCardReq)
	return obj
end

function PBMsgGangCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGangCardReq.Serialize(obj)
	local fieldCount = 3
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.index ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.roleid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.card ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGangCardReq.GetSize(obj)
	local size = 0
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGangCardRes
PBMsgGangCardRes = {}
PBMsgGangCardRes.__index = PBMsgGangCardRes
function PBMsgGangCardRes.Create()
	local obj = setmetatable({},PBMsgGangCardRes)
	return obj
end

function PBMsgGangCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.srcid = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end
	if(has_optional_flag(3,optionLength,option)) then
		obj.index = deserialize_int32()
	end
	if(has_optional_flag(4,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGangCardRes.Serialize(obj)
	local fieldCount = 5
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.srcid ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	if(obj.index ~= nil) then
		flag[4] = true
	else
		flag[4] = false
	end
	if(obj.card ~= nil) then
		flag[5] = true
	else
		flag[5] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.srcid ~= nil) then
		serialize_int32(obj.srcid)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if(obj.index ~= nil) then
		serialize_int32(obj.index)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGangCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.srcid ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.index ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgWinGameReq
PBMsgWinGameReq = {}
PBMsgWinGameReq.__index = PBMsgWinGameReq
function PBMsgWinGameReq.Create()
	local obj = setmetatable({},PBMsgWinGameReq)
	return obj
end

function PBMsgWinGameReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgWinGameReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgWinGameReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgWinGameRes
PBMsgWinGameRes = {}
PBMsgWinGameRes.__index = PBMsgWinGameRes
function PBMsgWinGameRes.Create()
	local obj = setmetatable({},PBMsgWinGameRes)
	return obj
end

function PBMsgWinGameRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	return obj
end

function PBMsgWinGameRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
end

function PBMsgWinGameRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameResultReq
PBMsgGameResultReq = {}
PBMsgGameResultReq.__index = PBMsgGameResultReq
function PBMsgGameResultReq.Create()
	local obj = setmetatable({},PBMsgGameResultReq)
	return obj
end

function PBMsgGameResultReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGameResultReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGameResultReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBRoleResult
PBRoleResult = {}
PBRoleResult.__index = PBRoleResult
function PBRoleResult.Create()
	local obj = setmetatable({},PBRoleResult)
	return obj
end

function PBRoleResult.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		obj.score = deserialize_int32()
	end
	if(has_optional_flag(2,optionLength,option)) then
		obj.state = deserialize_int32()
	end

	if (fieldCount >= 4) then
		obj.cards = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local cardsSize = deserialize_data_length()
				local cardsStartPos = get_position()
				obj.cards[i] = PBCard.Create()
				obj.cards[i] = (obj.cards[i]):DeSerialize()
				set_position(cardsSize+cardsStartPos )
			end
		end
	end
	return obj
end

function PBRoleResult.Serialize(obj)
	local fieldCount = 4
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.score ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	if(obj.state ~= nil) then
		flag[3] = true
	else
		flag[3] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.score ~= nil) then
		serialize_int32(obj.score)
	end
	if(obj.state ~= nil) then
		serialize_int32(obj.state)
	end
	if (obj.cards ~= nil) then
		serialize_int32(#(obj.cards))
		for i=1, #(obj.cards) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.cards[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBRoleResult.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.score ~= nil) then
		size = size + 4
	end
	if (obj.state ~= nil) then
		size = size + 4
	end
	if (obj.cards ~= nil) then
		for i=1,#(obj.cards) do
			size = size + 5
			size = size + (obj.cards[i]):GetSize()
		end
	end
	size = size + 11
	return size
end

-- PBMsgGameResultRes
PBMsgGameResultRes = {}
PBMsgGameResultRes.__index = PBMsgGameResultRes
function PBMsgGameResultRes.Create()
	local obj = setmetatable({},PBMsgGameResultRes)
	return obj
end

function PBMsgGameResultRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()

	if (fieldCount >= 1) then
		obj.result = {}
		local len = deserialize_int32()
		if (len > 0) then
			for i=1,len do
				local resultSize = deserialize_data_length()
				local resultStartPos = get_position()
				obj.result[i] = PBRoleResult.Create()
				obj.result[i] = (obj.result[i]):DeSerialize()
				set_position(resultSize+resultStartPos )
			end
		end
	end
	return obj
end

function PBMsgGameResultRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
	if (obj.result ~= nil) then
		serialize_int32(#(obj.result))
		for i=1, #(obj.result) do
			local WaitPos = get_position()
			set_position(WaitPos+4)
			obj.result[i]:Serialize()
			local MaxPosNow = get_position()
			local RealSize = MaxPosNow-(WaitPos+4)
			set_position(WaitPos)
			serialize_data_length(RealSize)
			set_position(MaxPosNow)
		end
	else
		serialize_int32(0)
	end
end

function PBMsgGameResultRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		for i=1,#(obj.result) do
			size = size + 5
			size = size + (obj.result[i]):GetSize()
		end
	end
	size = size + 10
	return size
end

-- PBMsgGameGetCardReq
PBMsgGameGetCardReq = {}
PBMsgGameGetCardReq.__index = PBMsgGameGetCardReq
function PBMsgGameGetCardReq.Create()
	local obj = setmetatable({},PBMsgGameGetCardReq)
	return obj
end

function PBMsgGameGetCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGameGetCardReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGameGetCardReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgGameGetCardRes
PBMsgGameGetCardRes = {}
PBMsgGameGetCardRes.__index = PBMsgGameGetCardRes
function PBMsgGameGetCardRes.Create()
	local obj = setmetatable({},PBMsgGameGetCardRes)
	return obj
end

function PBMsgGameGetCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.roleid = deserialize_int32()
	end
	if(has_optional_flag(1,optionLength,option)) then
		local cardSize = deserialize_data_length()
		local cardStartPos = get_position()
		obj.card = PBCard.Create()
		obj.card = obj.card:DeSerialize()
		set_position(cardSize+cardStartPos )
	end
	return obj
end

function PBMsgGameGetCardRes.Serialize(obj)
	local fieldCount = 2
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.roleid ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	if(obj.card ~= nil) then
		flag[2] = true
	else
		flag[2] = false
	end
	serialize_optional(flag)
	if(obj.roleid ~= nil) then
		serialize_int32(obj.roleid)
	end
	if(obj.card ~= nil) then
		local WaitPos = get_position()
	set_position(WaitPos+4)
	obj.card:Serialize()
	local MaxPosNow = get_position()
	local RealSize = MaxPosNow-(WaitPos+4)
	set_position(WaitPos)
	serialize_data_length(RealSize)
	set_position(MaxPosNow)
	end
end

function PBMsgGameGetCardRes.GetSize(obj)
	local size = 0
	if (obj.roleid ~= nil) then
		size = size + 4
	end
	if (obj.card ~= nil) then
		size = size + obj.card:GetSize()
	end
	size = size + 11
	return size
end

-- PBMsgGameDeleteRoomReq
PBMsgGameDeleteRoomReq = {}
PBMsgGameDeleteRoomReq.__index = PBMsgGameDeleteRoomReq
function PBMsgGameDeleteRoomReq.Create()
	local obj = setmetatable({},PBMsgGameDeleteRoomReq)
	return obj
end

function PBMsgGameDeleteRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	return obj
end

function PBMsgGameDeleteRoomReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.room_pass ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
end

function PBMsgGameDeleteRoomReq.GetSize(obj)
	local size = 0
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameDeleteRoomRes
PBMsgGameDeleteRoomRes = {}
PBMsgGameDeleteRoomRes.__index = PBMsgGameDeleteRoomRes
function PBMsgGameDeleteRoomRes.Create()
	local obj = setmetatable({},PBMsgGameDeleteRoomRes)
	return obj
end

function PBMsgGameDeleteRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	return obj
end

function PBMsgGameDeleteRoomRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
end

function PBMsgGameDeleteRoomRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameQuitRoomReq
PBMsgGameQuitRoomReq = {}
PBMsgGameQuitRoomReq.__index = PBMsgGameQuitRoomReq
function PBMsgGameQuitRoomReq.Create()
	local obj = setmetatable({},PBMsgGameQuitRoomReq)
	return obj
end

function PBMsgGameQuitRoomReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.room_pass = deserialize_int32()
	end
	return obj
end

function PBMsgGameQuitRoomReq.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.room_pass ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.room_pass ~= nil) then
		serialize_int32(obj.room_pass)
	end
end

function PBMsgGameQuitRoomReq.GetSize(obj)
	local size = 0
	if (obj.room_pass ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGameQuitRoomRes
PBMsgGameQuitRoomRes = {}
PBMsgGameQuitRoomRes.__index = PBMsgGameQuitRoomRes
function PBMsgGameQuitRoomRes.Create()
	local obj = setmetatable({},PBMsgGameQuitRoomRes)
	return obj
end

function PBMsgGameQuitRoomRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	if(has_optional_flag(0,optionLength,option)) then
		obj.result = deserialize_int32()
	end
	return obj
end

function PBMsgGameQuitRoomRes.Serialize(obj)
	local fieldCount = 1
	serialize_int32(fieldCount)
	local flag = {}
	if(obj.result ~= nil) then
		flag[1] = true
	else
		flag[1] = false
	end
	serialize_optional(flag)
	if(obj.result ~= nil) then
		serialize_int32(obj.result)
	end
end

function PBMsgGameQuitRoomRes.GetSize(obj)
	local size = 0
	if (obj.result ~= nil) then
		size = size + 4
	end
	size = size + 6
	return size
end

-- PBMsgGamePassCardReq
PBMsgGamePassCardReq = {}
PBMsgGamePassCardReq.__index = PBMsgGamePassCardReq
function PBMsgGamePassCardReq.Create()
	local obj = setmetatable({},PBMsgGamePassCardReq)
	return obj
end

function PBMsgGamePassCardReq.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGamePassCardReq.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGamePassCardReq.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

-- PBMsgGamePassCardRes
PBMsgGamePassCardRes = {}
PBMsgGamePassCardRes.__index = PBMsgGamePassCardRes
function PBMsgGamePassCardRes.Create()
	local obj = setmetatable({},PBMsgGamePassCardRes)
	return obj
end

function PBMsgGamePassCardRes.DeSerialize(obj)
	local fieldCount = deserialize_int32()
	local option,optionLength = deserialize_optional()
	return obj
end

function PBMsgGamePassCardRes.Serialize(obj)
	local fieldCount = 0
	serialize_int32(fieldCount)
	local flag = {}
	serialize_optional(flag)
end

function PBMsgGamePassCardRes.GetSize(obj)
	local size = 0
	size = size + 5
	return size
end

