TableBottom = {}

function TableBottom:Start( )
    TableBottom.Clear(self)

    Client.TableChooseCard = Client.TableChooseCard + {self, TableBottom.ChooseCard}
    Client.TablePlayCardEnd = Client.TablePlayCardEnd + {self, TableBottom.PlayCardEnd}
    Client.DeleteCard = Client.DeleteCard + {self, TableBottom.DeleteCard}

    local tempHeight = 640
    local tempWidth = tempHeight * Screen.get_width() / Screen.get_height()
    if tempWidth < 960 then
        self.cardSize = 0.9
    elseif tempWidth >= 960 and tempWidth < 1050 then
        self.cardSize = 1
    elseif tempWidth >= 1050 and tempWidth < 1135 then
        self.cardSize = 1.1
    elseif tempWidth >= 1135 then
        self.cardSize = 1.2
    end

    LuaDebug.Log("*****tempWidth: "..tempWidth..", cardSize: "..self.cardSize)

    self.Grid:get_transform():set_localScale(LuaVector3.Create(self.cardSize, self.cardSize, 1))
    self.CardNew:get_transform():set_localScale(LuaVector3.Create(self.cardSize, self.cardSize, 1))
end

function TableBottom:OnDestroy( )
    Client.TableChooseCard = Client.TableChooseCard - {self,TableBottom.ChooseCard}
    Client.TablePlayCardEnd = Client.TablePlayCardEnd - {self, TableBottom.PlayCardEnd}
    Client.DeleteCard = Client.DeleteCard - {self, TableBottom.DeleteCard}
end

function TableBottom:Clear()
    self.PlayNum = 0
    self.LeftNum = 0
    self.CanPlayCard = false
    self.handCard = {}
    self.pengCard = {}
    self.gangCardM = {}
    self.gangCardA = {}
    self.gangCardG = {} --碰牌 杠

    self.tingCard = {}
end

-- 最后一张为所发的牌
function TableBottom:CardInfoSync(handcard)
    local handCardNum = #handcard
    for i = 1, handCardNum do
        local card = handcard[i]
        --LuaDebug.Log("card.type_id: "..card.type_id..", card.code_id: "..card.code_id)
        --[[
        if i <= 3 then
            card = handcard[1]
            local tempCard = {}
            tempCard.type_id = enumCARD_TYPE.CARD_HONG_TYPE
            tempCard.code_id = 0
            card = tempCard
        end
        --]]
        local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/MyCard",self.Grid:get_gameObject())
        ref.gameObject:set_name("MyCard")
        ref.Message:target(ref.gameObject)
        self.handCard[i] = ref
        ref.Init(ref, card, i)
    end

    TableBottom.SortCard(self)
    TableBottom.SetHeadCardPosition(self)
end

function TableBottom:LeftCardSync(owncards)
    if owncards.pengcard ~= nil then
        for i = 1, #(owncards.pengcard) do
            local card = owncards.pengcard[i]
            table.insert(self.pengCard, card)
            for num = 1, 3 do
                TableBottom.SetLeftCard(self, card)
            end
        end
    end

    if owncards.gangcardm ~= nil then
        for i = 1, #(owncards.gangcardm) do
            local card = owncards.gangcardm[i]
            table.insert(self.gangCardM, card)
            for num = 1, 4 do
                TableBottom.SetLeftCard(self, card)
            end
        end
    end

    if owncards.gangcarda ~= nil then
        for i = 1, #(owncards.gangcarda) do
            local card = owncards.gangcarda[i]
            table.insert(self.gangCardA, card)
            for num = 1, 4 do
                TableBottom.SetLeftCard(self, card)
            end
        end
    end

    if owncards.gangcardg ~= nil then
        for i = 1, #(owncards.gangcardg) do
            local card = owncards.gangcardg[i]
            table.insert(self.gangCardG, card)
            for num = 1, 4 do
                TableBottom.SetLeftCard(self, card)
            end
        end
    end

    self.LeftCardGrid:Reposition()
end

function TableBottom:PlayCardSync(cards)
    for i = 1, #cards do
        self.lastCard = TableBottom.SetPlayCard(self, cards[i])
    end

    self.PlayedCardsGrid:Reposition()
end

function TableBottom:SetLeftCard(card)
    --LuaDebug.Log("left card, type: "..card.type_id..", id: "..card.code_id)
    local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/PengCard",self.LeftCardGrid:get_gameObject())
    local spriteName = MJTableCtrl.GetLeftCardSprite(card)
    ref.Card:set_spriteName(spriteName)
    ref.Card:MakePixelPerfectWithSizeInAtlas()

    self.LeftNum = self.LeftNum + 1
end

function TableBottom:ChooseCard(i)
    if not self.CanPlayCard then
        return
    end

    if self.lastIndex ~= nil and self.lastIndex ~= i then
        -- 回归原位
        self.handCard[self.lastIndex].ResetPos(self.handCard[self.lastIndex])
        self.lastIndex = nil
    end

    if i == self.lastIndex then
        ClientSendMsg.SendPlayCard(i, self.handCard[i].card.type_id, self.handCard[i].card.code_id)
        self.CanPlayCard = false
        Client.BottomPlayCard:Do(self.roleId, i, self.handCard[i].card)
        self.lastIndex = nil
    else
        self.lastIndex = i

        self.handCard[i].SetPosUp(self.handCard[i])

        -- 已经听牌，并且选择的是最后一张牌则不请求听牌
        --local handCardNum = #(self.handCard)
        --if i == handCardNum and self.TingCard:get_activeSelf() then
            -- 不发
        --else
            ClientSendMsg.SendWinCard(self.handCard[i].card.type_id, self.handCard[i].card.code_id)
        --end
    end
end

function TableBottom:HandlePlayCard(i, card)
    if i ~= nil then
        self.handCard[i].Animation(self.handCard[i])
    end

    self.lastIndex = nil
end

function TableBottom:SetPlayCard(card)
    local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/PlayCard",self.PlayedCardsGrid:get_gameObject())
    if self.PlayNum > 7 then
        ref.Card:set_depth(5)
        ref.Back:set_depth(4)
    end

    local spriteName = MJTableCtrl.GetLeftCardSprite(card)
    ref.Card:set_spriteName(spriteName)
    ref.Card:MakePixelPerfectWithSizeInAtlas()
    self.PlayNum = self.PlayNum + 1

    return ref
end

function TableBottom:PlayCardEnd(i)
    local card = self.handCard[i].card
    local ref = TableBottom.SetPlayCard(self, card)

    self.PlayedCardsGrid:Reposition()
    self.toward:get_transform():SetParent(ref.Card:get_transform())
    self.toward:get_transform():set_localPosition(LuaVector3.Create(0, 0, 0))

    local handCardNum = #(self.handCard)
    -- 整理手牌
    if i ~= handCardNum then
        self.handCard[i].Init(self.handCard[i], self.handCard[handCardNum].card, i)
        self.handCard[handCardNum].gameObject:Destroy1()
        self.handCard[handCardNum] = nil
        TableBottom.SortCard(self)
        self.Grid:Reposition()
    else
        self.handCard[handCardNum].gameObject:Destroy1()
        self.handCard[handCardNum] = nil
    end

    self.lastCard = ref
end

function TableBottom:SetHeadInfo(info, toward)
    self.toward = toward
    self.roleId = info.roleid
    local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/TableHead",self.HeadInfo)
    ref.gameObject:get_transform():set_localPosition(LuaVector3.Create(0, 0, 0))
    ref.Init(ref, info)
    self.TableHead = ref
end

function TableBottom:HandleGetCard(card)
    local handCardNum = #(self.handCard)
    local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/MyCard",self.CardNew)
    ref.gameObject:set_name("MyCard")
    ref.Message:target(ref.gameObject)
    self.handCard[handCardNum + 1] = ref

    ref.Init(ref, card, handCardNum + 1)
    ref.Shinning:set_enabled(true)
    --ref.gameObject:get_transform():set_localPosition(LuaVector3.Create(768, 0, 0))

    self.CanPlayCard = true
end

function TableBottom:DeleteCard(srcRoleId)
    if self.roleId == srcRoleId then
        self.lastCard.Card:get_gameObject():Destroy1()
        self.PlayNum = self.PlayNum - 1
    end
end

function TableBottom:IsPengCard(card)
    LuaDebug.Log("IsPengCard")
    local num = TableBottom.GetSameCardNum(self, card)
    if num >= 2 then
        return true
    end

    return false
end

function TableBottom:IsGangAHandCard()
    for i = 1, #(self.handCard) do
        local card = self.handCard[i].card
        local num = TableBottom.GetSameCardNum(self, card)
        if num >= 4 then
            return enumCARD_GANG_TYPE.CARD_GANG_A_TYPE, card
        end
    end

    return nil
end

function TableBottom:IsGangACard(card)
    LuaDebug.Log("IsGangACard")
    local num = TableBottom.GetSameCardNum(self, card)
    if num == 3 then
        return enumCARD_GANG_TYPE.CARD_GANG_A_TYPE
    end

    return nil
end

function TableBottom:IsGangMPlayCard(card)
    LuaDebug.Log("IsGangMPlayCard")
    local num = TableBottom.GetSameCardNum(self, card)
    if num == 3 then
        return enumCARD_GANG_TYPE.CARD_GANG_M_TYPE
    end

    return nil
end

function TableBottom:IsGangMGetCard(card)
    LuaDebug.Log("IsGangMGetCard")
    for i = 1, #(self.pengCard) do
        local tmp = self.pengCard[i]
        if card.type_id == tmp.type_id and card.code_id == tmp.code_id then
            return enumCARD_GANG_TYPE.CARD_GANG_G_TYPE
        end
    end

    return nil
end

function TableBottom:GetSameCardNum(card)
    local num = 0
    for i = 1, #(self.handCard) do
        local tmp = self.handCard[i].card
        if card.type_id == tmp.type_id and card.code_id == tmp.code_id then
            num = num + 1
            --LuaDebug.Log("same card index: "..i)
        end
    end

    return num
end

function TableBottom:HandlePengCard(card, srcRoleId)
    -- 显示左边的碰牌
    table.insert(self.pengCard, card)
    for num = 1, 3 do
        TableBottom.SetLeftCard(self, card)
    end

    self.LeftCardGrid:Reposition()

    -- 消掉手里碰出的牌
    local index = TableBottom.RemoveHandCard(self, card, 2)
    TableBottom.SortCard(self)

    -- 设置位置，重新组牌
    TableBottom.SetHeadCardPosition(self)

    return index
end

function TableBottom:SetHeadCardPosition()
    local num = #(self.handCard)
    LuaDebug.Log("handCard num: "..num)
    local oldPos = self.Grid:get_transform():get_localPosition()
    local posX = (13 - num)*58*self.cardSize -348*self.cardSize
    if posX < -348*self.cardSize then
        posX = -348*self.cardSize
    end
    self.Grid:get_transform():set_localPosition(LuaVector3.Create(posX, oldPos:y(), oldPos:z()))
    self.Grid:Reposition()
end

function TableBottom:HandleGangCard(card, srcRoleId, gangType)
    local index = nil
    if gangType == enumCARD_GANG_TYPE.CARD_GANG_M_TYPE then --明杠
        -- 显示左边的杠牌
        table.insert(self.gangCardM, card)
        for num = 1, 4 do
            TableBottom.SetLeftCard(self, card)
        end

        self.LeftCardGrid:Reposition()

        -- 消掉手里杠出的牌，三张牌
        index = TableBottom.RemoveHandCard(self, card, 3)
        TableBottom.SortCard(self)
    elseif gangType == enumCARD_GANG_TYPE.CARD_GANG_A_TYPE then --暗杠
        table.insert(self.gangCardA, card)
        for num = 1, 4 do
            TableBottom.SetLeftCard(self, card)
        end

        self.LeftCardGrid:Reposition()
        -- 如果最后一张牌不是暗杠牌，还需要删除掉
        local handCardNum = #(self.handCard)
        local tempCard = self.handCard[handCardNum].card
        if tempCard.type_id == card.type_id and tempCard.code_id == card.type_id then
        else
            self.handCard[handCardNum].gameObject:get_transform():SetParent(self.Grid:get_transform())
            self.handCard[handCardNum].Shinning:set_enabled(false)
        end

        index = TableBottom.RemoveHandCard(self, card, 4)
        TableBottom.SortCard(self)
    elseif gangType == enumCARD_GANG_TYPE.CARD_GANG_G_TYPE then --碰杠
        table.insert(self.gangCardG, card)
        TableBottom.SetLeftCard(self, card)

        self.LeftCardGrid:Reposition()

        index = TableBottom.RemoveHandCard(self, card, 1)
        TableBottom.SortCard(self)
    end

    -- 设置位置，重新组牌
    TableBottom.SetHeadCardPosition(self)
    return index
end

function TableBottom:SortCard()
    --先分组，再排序
    local wanList = {}
    local tongList = {}
    local tiaoList = {}
    local zhongList = {}

    local num = #(self.handCard)
    for i = 1, num do
        local card = self.handCard[i].card
        if card.type_id == enumCARD_TYPE.CARD_TIAO_TYPE then
            table.insert(tiaoList, card)
        elseif card.type_id == enumCARD_TYPE.CARD_TONG_TYPE then
            table.insert(tongList, card)
        elseif card.type_id == enumCARD_TYPE.CARD_WANG_TYPE then
            table.insert(wanList, card)
        elseif card.type_id == enumCARD_TYPE.CARD_HONG_TYPE then
            table.insert(zhongList, card)
        end
    end

    table.sort(wanList, function(a, b)
            return a.code_id < b.code_id
    end)

    table.sort(tongList, function(a, b)
            return a.code_id < b.code_id
    end)

    table.sort(tiaoList, function(a, b)
            return a.code_id < b.code_id
    end)

    local index = 1
    for i = 1, #wanList do
        self.handCard[index].Init(self.handCard[index], wanList[i], index)
        index = index + 1
    end

    for i = 1, #tongList do
        self.handCard[index].Init(self.handCard[index], tongList[i], index)
        index = index + 1
    end

    for i = 1, #tiaoList do
        self.handCard[index].Init(self.handCard[index], tiaoList[i], index)
        index = index + 1
    end

    for i = 1, #zhongList do
        self.handCard[index].Init(self.handCard[index], zhongList[i], index)
        index = index + 1
    end
end

function TableBottom:RemoveHandCard(card, numTotal)
    local index = nil
    for num = 1, numTotal do
        for i,v in ipairs(self.handCard) do
            if v.card.type_id == card.type_id and v.card.code_id == card.code_id then
                v.gameObject:SetActive(false)
                v.gameObject:Destroy1()
                table.remove(self.handCard, i)
                if index == nil then
                    index = i
                end
                break
            end
        end
    end

    return index
end

function TableBottom:HandleTingCard(cards)
    if cards == nil then
        self.TingCard:SetActive(false)
        for i = 1, #(self.tingCard) do
            self.tingCard[i].gameObject:SetActive(false)
        end
        return
    end

    local num = #cards
    if num == 0 then
        self.TingCard:SetActive(false)
        for i = 1, #(self.tingCard) do
            self.tingCard[i].gameObject:SetActive(false)
        end
        return
    end

    LuaDebug.Log("TingCard num: "..num)
    self.TingCard:SetActive(true)
    -- 计算长度
    self.TingBG:set_width(109 + (num - 1)*28)
    self.TingBG:MarkAsChanged()

    -- 生成牌
    for i = 1, num do
        local ref = self.tingCard[i]
        if ref == nil then
            ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/MyCard",self.TingCardGird:get_gameObject())
            ref.gameObject:get_transform():set_localScale(LuaVector3.Create(0.46, 0.46, 1))
        end
        self.tingCard[i] = ref
        ref.Init(ref, cards[i], i)
        ref.gameObject:SetActive(true)
    end

    local tingCardNum = #(self.tingCard)
    if tingCardNum > num then
        for i = num + 1, tingCardNum do
            self.tingCard[i].gameObject:SetActive(false)
        end
    end

    self.TingCardGird:Reposition()
end

function TableBottom:TableClear()
    TableBottom.Clear(self)

    self.TingCard:SetActive(false)
end

function TableBottom:IsHuPai(card)
    -- 先判断加上card是否有四个红中，或者手里直接有四个红中
    if card.type_id == enumCARD_TYPE.CARD_HONG_TYPE then
        local num = TableBottom.GetSameCardNum(self, card)
        if num >= 3 then
            return true
        end
    end

    local tempCard = {}
    tempCard.type_id = enumCARD_TYPE.CARD_HONG_TYPE
    tempCard.code_id = 0
    local num = TableBottom.GetSameCardNum(self, tempCard)
    if num >= 4 then
        return true
    end

    for i = 1, #(self.tingCard) do
        local ref = self.tingCard[i]
        if ref.gameObject:get_activeSelf() then
            if ref.card.type_id == card.type_id and ref.card.code_id == card.code_id then
                return true
            end
        end
    end

    return false
end
