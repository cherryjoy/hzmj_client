MJTableCtrl = {}

function MJTableCtrl:Start( )
    local mt=TextureMgr.get_Instance():LoadTexture("MJTable/MJTable", true)
    self.Texture:set_material(mt)

    Client.BottomPlayCard = Client.BottomPlayCard + {self, MJTableCtrl.HandlePlayCard}
    Client.ResetToward = Client.ResetToward + {self, MJTableCtrl.ResetToward}
    Client.TableClear = Client.TableClear + {self, MJTableCtrl.TableClear}
end

function MJTableCtrl:OnDestroy( )
    Client.BottomPlayCard = Client.BottomPlayCard - {self, MJTableCtrl.HandlePlayCard}
    Client.ResetToward = Client.ResetToward - {self, MJTableCtrl.ResetToward}
    Client.TableClear = Client.TableClear - {self, MJTableCtrl.TableClear}
end

function MJTableCtrl:Init(passwd, horse, beishu, rolelist)
    self.roomId = passwd
    self.ID:set_text(string.format(Text.TableName, passwd))
    self.MaShu:set_text(string.format(Text.MaShuName, beishu, horse))
    MJTableCtrl.SetJuShuPaiShu(self)

    local spriteName, myDirect = MJTableCtrl.GetMyDirectSprite(Client.RoleInfo.RoleID, rolelist)
    LuaDebug.Log("my direction: "..myDirect)
    self.myDirect = myDirect

    local angle = self.Direction:get_transform():get_localEulerAngles():z() - (myDirect - 1)*90
    self.Direction:get_transform():set_localEulerAngles(LuaVector3.Create(0, 0, angle))
    self.TimerBack:set_spriteName(spriteName)
end

function MJTableCtrl:SetJuShuPaiShu()
    self.JuShu:set_text(string.format(Text.JuShuName, Client.RoleInfo.Used + 1, Client.RoleInfo.Amount, Client.RoleInfo.RestCard))
end

function MJTableCtrl:EnterRoomSync(rolelist)
    LuaDebug.Log("rolelist: "..#rolelist)
    for i = 1, #rolelist do
        LuaDebug.Log("roleList[i].roleid: "..rolelist[i].roleid)
        LuaDebug.Log("roleList[i].direct: "..rolelist[i].direct)
        LuaDebug.Log("roleList[i].rolename: "..rolelist[i].rolename)
        LuaDebug.Log("roleList[i].integral: "..rolelist[i].integral)
    end

    MJTableCtrl.InitRoleList(self, self.myDirect, rolelist)

    self.roleList = rolelist
end

function MJTableCtrl:CardInfoSync(cardInfo)
    --if #(cardInfo.owncards.handcard) ~= 14 then
    --    return
    --end

    -- 同步自己的牌
    if cardInfo.owncards ~= nil then
        LuaDebug.Log("card num: "..#(cardInfo.owncards.handcard))
        Client.RoleInfo.RestCard = Client.RoleInfo.RestCard - #(cardInfo.owncards.handcard)
        self.Drect1.CardInfoSync(self.Drect1, cardInfo.owncards.handcard)
    end

    self.Drect1.LeftCardSync(self.Drect1, cardInfo.owncards)

    -- 同步其他人的牌
    LuaDebug.Log("#(cardInfo.othercards): "..#(cardInfo.othercards))
    for i = 1, #(cardInfo.othercards) do
        --LuaDebug.Log("othercards roleid: "..cardInfo.othercards[i].roleid..", handnum: "..cardInfo.othercards[i].handnum)
        for j = 1, 4 do
            if self["Drect"..j].roleId == cardInfo.othercards[i].roleid then
                LuaDebug.Log("drect "..j.." : "..cardInfo.othercards[i].handnum)
                Client.RoleInfo.RestCard = Client.RoleInfo.RestCard - cardInfo.othercards[i].handnum
                self["Drect"..j].CardInfoSync(self["Drect"..j], cardInfo.othercards[i].handnum)
            end
        end
    end

    -- 准备手消失
    for i = 1, 4 do
        self["Drect"..i].Ready:SetActive(false)
    end

    MJTableCtrl.SetJuShuPaiShu(self)
end

function MJTableCtrl:DeleteRoom_OnClick()
    ClientSendMsg.SendDeleteRoom(self.roomId)
end

function MJTableCtrl.GetCardSprite(card)
    local spriteName = nil
    if card.type_id == enumCARD_TYPE.CARD_TIAO_TYPE then
        spriteName = "tile_me_1"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_TONG_TYPE then
        spriteName = "tile_me_2"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_WANG_TYPE then
        spriteName = "tile_me_"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_HONG_TYPE then
        spriteName = "tile_me_35"
    end

    return spriteName
end

function MJTableCtrl.GetLeftCardSprite(card)
    local spriteName = nil
    if card.type_id == enumCARD_TYPE.CARD_TIAO_TYPE then
        spriteName = "tile_meUp_1"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_TONG_TYPE then
        spriteName = "tile_meUp_2"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_WANG_TYPE then
        spriteName = "tile_meUp_"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_HONG_TYPE then
        spriteName = "tile_meUp_35"
    end

    return spriteName
end

function MJTableCtrl.GetLeftRightCardSprite(card)
    local spriteName = nil
    if card.type_id == enumCARD_TYPE.CARD_TIAO_TYPE then
        spriteName = "tile_leftRight_1"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_TONG_TYPE then
        spriteName = "tile_leftRight_2"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_WANG_TYPE then
        spriteName = "tile_leftRight_"..card.code_id
    elseif card.type_id == enumCARD_TYPE.CARD_HONG_TYPE then
        spriteName = "tile_leftRight_35"
    end

    return spriteName
end

function MJTableCtrl.GetMyDirectSprite(roleId, roleList)
    for i = 1, #roleList do
        if roleId == roleList[i].roleid then
            if roleList[i].direct == enumDIRECTION_TYPE.DIRECTION_EAST then
                return "compassdong", roleList[i].direct
            elseif roleList[i].direct == enumDIRECTION_TYPE.DIRECTION_NORTH then
                return "compassbei", roleList[i].direct
            elseif roleList[i].direct == enumDIRECTION_TYPE.DIRECTION_WEST then
                return "compassxi", roleList[i].direct
            elseif roleList[i].direct == enumDIRECTION_TYPE.DIRECTION_SOUTH then
                return "compassnan", roleList[i].direct
            end
        end
    end
end

function MJTableCtrl:InitRoleList(myDirect, roleList)
    local idx = 1
    for i = myDirect, (myDirect + 3) do
        local index = i % 4
        if index == 0 then
            index = 4
        end

        local roleInfo = roleList[index]
        if roleInfo ~= nil then
            self["Drect"..idx].SetHeadInfo(self["Drect"..idx], roleInfo, self.TowardCard)
            --self["Drect"..idx].Ready:SetActive(true)
        end

        idx = idx + 1
    end
end

function MJTableCtrl:GameReady(roleStateList)
    LuaDebug.Log("roleStateList num: "..#roleStateList)
    for i = 1, #roleStateList do
        LuaDebug.Log("roleId : "..tostring(roleStateList[i].roleid)..", state : "..tostring(roleStateList[i].state))
        for j = 1, 4 do
            if self["Drect"..j].roleId == roleStateList[i].roleid then
                if roleStateList[i].state ~= 0 then
                    self["Drect"..j].Ready:SetActive(true)
                end
            end
        end
    end
end

function MJTableCtrl:HandlePlayCard(roleId, index, card, result)
    if roleId == self.Drect1.roleId and result ~= nil then
        return
    end

    LuaDebug.Log("roleId: "..roleId..", play card, type: "..card.type_id..", id: "..card.code_id)
    self.TowardCard:SetActive(true)

    MJTableCtrl.DoCountDownFinish(self)
    -- 判断当前的牌是否能碰、杠
    if result ~= nil and result ~= 0 then
        local peng = self.Drect1.IsPengCard(self.Drect1, card)
        local gangType = self.Drect1.IsGangMPlayCard(self.Drect1, card)
        LuaDebug.Log("peng: "..tostring(peng)..", gangType: "..tostring(gangType))
        if peng or gangType then
            self.ResultCard:SetActive(true)
            if gangType then
                self.Gang:SetActive(true)
                self.tempGangType = gangType
            end

            self.tempCard = card
            self.tempRoleId = roleId
        end
    end

    for i = 1, 4 do
        if self["Drect"..i].roleId == roleId then
            self["Drect"..i].HandlePlayCard(self["Drect"..i], index, card)
        end
    end
end

function MJTableCtrl:HandleGetCard(roleId, card)
    LuaDebug.Log("roleid: "..roleId)

    Client.RoleInfo.RestCard = Client.RoleInfo.RestCard - 1
    MJTableCtrl.SetJuShuPaiShu(self)
    -- 摸牌只对自己广播牌，其他方只广播roleId
    if card ~= nil then
        LuaDebug.Log("get card, type: "..card.type_id..", id: "..card.code_id)
        -- 判断是否杠牌
        local gangType = nil
        gangType = self.Drect1.IsGangACard(self.Drect1, card)
        if not gangType then
            gangType = self.Drect1.IsGangMGetCard(self.Drect1, card)
        end
        if gangType then
            self.ResultCard:SetActive(true)
            self.Gang:SetActive(true)
            self.tempGangType = gangType
            self.tempCard = card
            self.tempRoleId = roleId
        end

        -- 判断是否胡牌
        local huPai = self.Drect1.IsHuPai(self.Drect1, card)
        if huPai then
            self.ResultCard:SetActive(true)
            self.Win:SetActive(true)
            self.Peng:SetActive(false)
        end
    end

    MJTableCtrl.CountDownStart(self, roleId)
    -- 判断是哪方摸牌
    for i = 1, 4 do
        if self["Drect"..i].roleId == roleId then
            self["Drect"..i].HandleGetCard(self["Drect"..i], card)
        end
    end
end

function MJTableCtrl:CountDownStart(roleId)
    local spriteName, myDirect = MJTableCtrl.GetMyDirectSprite(roleId, self.roleList)
    LuaDebug.Log("my direction: "..myDirect)
    self.TimerBack:set_spriteName(spriteName)
    self.TimerBack:get_gameObject():SetActive(true)
    -- 倒计时
    self.CD = 15
    self.CountDown:set_text(tostring(self.CD))
    self.CountDown:set_enabled(true)

    if self.timer == nil then
        self.timer = Timer.NewEvent(self,10,150,MJTableCtrl.DoCountDown, false, MJTableCtrl.DoCountDownFinish)
    end
end

function MJTableCtrl:DoCountDown()
    self.CD = self.CD - 1
    self.CountDown:set_text(tostring(self.CD))
end

function MJTableCtrl:DoCountDownFinish()
    if self.timer ~= nil then
        Timer.RemoveEvent(self,self.timer)
        self.timer = nil
    end

    --self.CountDown:set_enabled(false)
    LuaDebug.Log("DoCountDownFinish")
end

function MJTableCtrl:Peng_OnClick()
    local index = self.Drect1.HandlePengCard(self.Drect1, self.tempCard, self.tempRoleId)
    ClientSendMsg.SendPengCard(index, self.tempCard.type_id, self.tempCard.code_id, self.tempRoleId)

    self.ResultCard:SetActive(false)
end

function MJTableCtrl:Gang_OnClick()
    local index = self.Drect1.HandleGangCard(self.Drect1, self.tempCard, self.tempRoleId, self.tempGangType)
    ClientSendMsg.SendGangCard(index, self.tempCard.type_id, self.tempCard.code_id, self.tempRoleId, self.tempGangType)

    self.ResultCard:SetActive(false)
end

function MJTableCtrl:Guo_OnClick()
    ClientSendMsg.SendGuoCard()

    self.ResultCard:SetActive(false)
end

function MJTableCtrl:Win_OnClick()
    ClientSendMsg.SendWinGame()

    self.ResultCard:SetActive(false)
    --[[
    local info = {}
    info.roleid = 1000006
    info.win_count = 3
    info.score = 88
    info.gangm = 2
    info.ganga = 5
    info.gangg = 8
    info.code_count = 9

    local balances = {}
    balances[1] = info
    balances[2] = info
    balances[3] = info
    balances[4] = info

    local ref = LuaUIViewCtr.OpenUINotLose("MJTable/GameBalance")
    ref.Init(ref, balances, self.roleList, self)
    --]]
    --[[
    local data = {}
    data.roleid = 1000006
    local card = {}
    card.type_id = 2
    card.code_id = 8
    data.win_card = card

    local roleCard = {}
    roleCard.roleid = 1000006
    roleCard.score = 99
    roleCard.hand_cards = {}
    roleCard.hand_cards[1] = card
    roleCard.hand_cards[2] = card
    roleCard.hand_cards[3] = card
    roleCard.hand_cards[4] = card
    roleCard.hand_cards[5] = card
    roleCard.peng_cards = {}
    roleCard.peng_cards[1] = card
    roleCard.gangm_cards = {}
    roleCard.gangm_cards[1] = card

    local roleCard = {}
    roleCard.roleid = 1000006
    roleCard.score = 99
    roleCard.hand_cards = {}
    roleCard.hand_cards[1] = card
    roleCard.hand_cards[2] = card
    roleCard.hand_cards[3] = card
    roleCard.hand_cards[4] = card
    roleCard.hand_cards[5] = card
    roleCard.peng_cards = {}
    roleCard.peng_cards[1] = card
    roleCard.gangm_cards = {}
    roleCard.gangm_cards[1] = card

    local roleCard2 = {}
    roleCard2.roleid = 1
    roleCard2.score = 99
    roleCard2.hand_cards = {}
    roleCard2.hand_cards[1] = card
    roleCard2.hand_cards[2] = card
    roleCard2.hand_cards[3] = card
    roleCard2.hand_cards[4] = card
    roleCard2.hand_cards[5] = card
    roleCard2.peng_cards = {}
    roleCard2.peng_cards[1] = card
    roleCard2.gangm_cards = {}
    roleCard2.gangm_cards[1] = card

    data.role_cards = {}
    data.role_cards[1] = roleCard
    data.role_cards[2] = roleCard2
    data.role_cards[3] = roleCard2
    data.role_cards[4] = roleCard2

    data.rest_cards = {}
    data.rest_cards[1] = card
    data.rest_cards[2] = card
    data.rest_cards[3] = card
    data.rest_cards[4] = card

    data.code_cards = {}
    data.code_cards[1] = card
    data.code_cards[2] = card
    data.code_cards[3] = card
    data.code_cards[4] = card

    local ref = LuaUIViewCtr.OpenUINotLose("MJTable/GameResult")
    ref.Init(ref, data, self.roleList)
    --]]
end

function MJTableCtrl:HandlePengCard(roleId, index, card, srcRoleId)
    -- 重置
    Client.ResetToward:Do()
    --消掉打牌方的牌
    Client.DeleteCard:Do(srcRoleId)

    --计时
    MJTableCtrl.CountDownStart(self, roleId)

    -- 判断是哪方碰牌
    for i = 2, 4 do
        if self["Drect"..i].roleId == roleId then
            self["Drect"..i].HandlePengCard(self["Drect"..i], card)
        end
    end

    -- 自己可以打牌了
    if roleId == self.Drect1.roleId then
        self.Drect1.CanPlayCard = true
    end
end

function MJTableCtrl:HandleGangCard(roleId, index, card, state, srcRoleId)
    -- 重置
    Client.ResetToward:Do()

    if state == enumCARD_GANG_TYPE.CARD_GANG_M_TYPE then
        Client.DeleteCard:Do(srcRoleId)
    elseif state == enumCARD_GANG_TYPE.CARD_GANG_A_TYPE then

    elseif state == enumCARD_GANG_TYPE.CARD_GANG_G_TYPE then

    end

    --计时
    MJTableCtrl.CountDownStart(self, roleId)

    -- 判断是哪方杠牌
    for i = 2, 4 do
        if self["Drect"..i].roleId == roleId then
            self["Drect"..i].HandleGangCard(self["Drect"..i], card, state)
        end
    end

    -- 自己可以打牌了
    if roleId == self.Drect1.roleId then
        self.Drect1.CanPlayCard = true
    end
end

function MJTableCtrl:HandleWinGame(roleId, count, cards)
    --[[
    local name = nil
    local roleList = self.roleList
    for i = 1, #roleList do
        if roleId == roleList[i].roleid then
            name = roleList[i].rolename
        end
    end

    local str = string.format(Text.WinCard, name)
    local box = LuaMessageBox.ShowSingle(str, MJTableCtrl.CloseTable, Text.Confirm, self)
    box.gameObject:get_transform():set_localPosition(LuaVector3.Create(0,30,0))
    --]]

    local ref = LuaUIViewCtr.OpenUIHasBg("MJTable/WinGame")
    ref.Init(ref, roleId, count, cards)
end

function MJTableCtrl:ResetToward()
    self.TowardCard:get_transform():SetParent(self.Direction:get_transform())
    self.TowardCard:get_transform():set_localPosition(LuaVector3.Create(0, 0, 0))
    self.TowardCard:SetActive(false)
end

function MJTableCtrl:CloseTable()
    self.gameObject:Destroy1()
end

function MJTableCtrl:HandleTingCard(cards)
    self.Drect1.HandleTingCard(self.Drect1, cards)
end

function MJTableCtrl:HandleGameResult(data)
    local ref = LuaUIViewCtr.OpenUINotLose("MJTable/GameResult")
    ref.Init(ref, data, self.roleList)
    self.GameResult = ref
end

function MJTableCtrl:TableClear(roleId)
    if self.GameResult ~= nil then
        self.GameResult.gameObject:Destroy1()
    end

    for i = 1, 4 do
        self["Drect"..i].TableClear(self["Drect"..i])
        self["Drect"..i].Ready:SetActive(false)
    end

    -- 方向不再闪烁
    self.CountDown:set_enabled(false)
    self.TimerBack:get_gameObject():SetActive(false)
end

function MJTableCtrl:HandleGameBalance(balances)
    local ref = LuaUIViewCtr.OpenUINotLose("MJTable/GameBalance")
    ref.Init(ref, balances, self.roleList, self)
end

function MJTableCtrl.GetRoleInfo(roleId, roleList)
    for i = 1, #roleList do
        if roleId == roleList[i].roleid then
            return roleList[i]
        end
    end

    return nil
end
