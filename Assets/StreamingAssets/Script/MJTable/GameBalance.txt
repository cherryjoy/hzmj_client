GameBalance = {}

function GameBalance:Start( )
    Client.TableClose = Client.TableClose + {self, GameBalance.TableClose}
end

function GameBalance:OnDestroy( )
    Client.TableClose = Client.TableClose - {self, GameBalance.TableClose}
end

function GameBalance:Init(balances, roleList)
    for i = 1, #balances do
        local ref = LuaUIViewCtr.OpenUINotLoseNest("MJTable/RoleBalance",self.ScoreListGrid:get_gameObject())
        local roleInfo = MJTableCtrl.GetRoleInfo(balances[i].roleid, roleList)
        ref.Init(ref, balances[i], roleInfo)
        local score = GameBalance.GetRoleIdOfMaxNum(balances)
        if score > 0 and balances[i].score == score then
            ref.Winner:set_enabled(true)
        end

        if balances[i].roleid == Client.RoleInfo.RoleID then
            ref.Background:set_color(LuaColor.Get(1,0,0,1))
        end
    end

    Client.m_CurrentState = EClientState.E_CS_Hall
end

function GameBalance:ReturnHall_OnClick()
    Client.TableClose:Do()
end

function GameBalance:Share_OnClick()
    PlatformHandler.CallShare("", "", "", "screenshot.png", "", "0")
end

function GameBalance.GetRoleIdOfMaxNum(balances)
    local index = 1
    local maxNum = 0
    for i = 1, #balances do
        if balances[i].score > maxNum then
            index = i
            maxNum = balances[i].score
        end
    end

    return maxNum
end

function GameBalance:TableClose()
    self.gameObject:Destroy1()
end
