require "Utils/LuaHelpTips"
require "Utils/ClientInfo"
require "Utils/RoleInfo"
----require "Bag/BagMgr"
--require "GameBattleSelect/GameBattleMapMgr"
--require "FairyUI/FairyMgr"
--require "FashionUI/FashionMgr"
--require "Task/TaskMgr"
--require "Task/SearchMgr"
--require "Guide/GuideManager"
--require "Utils/NewPromptMgr"
require "Utils/TishiTimeMgr"
--require "GhostUI/GhostManager"
--require "GameBattleSelect/GameBattleNDBMgr"
--require "Friend/FriendMgr"
--require "Message/MessageMgr"
--require "FairySecret/FairySecretMgr"
--require "City/LuaHeadUpMgr"
--require "KingTower/KingTowerMgr"
--require "WDB/WDB_Vip"
--require "HelpUI/HelpTips"
--require "FlowerAndEgg/FlowerRedDotMgr"
--require "City/CitySceneIdMgr"
--require "GVG/GVGMgr"
--require "PushMessage/PushMessageMgr"
--require "BattleSceneUI/SettlementMgr"
--require "GamePlayConfig/Scene/DamageAniConfig"

Client = {}

---------------------Variables------------------------
--PVP,PVE...net players
Client.NetPlayers = {}
Client.LoginPlayers = {}
Client.ClientInfo = ClientInfo
Client.RoleInfo = nil
Client.WipeInfo = {}
--Client.ItemToolTip = nil
--Client.AwardItemTip = nil
--Client.GameBattleNDBMgr = GameBattleNDBMgr.Init()
Client.PlatformInfo = {}
Client.OpenUIWithType = {}
--Client.TotalFightObjCount = 0
-- Client.FriendMgr = FriendMgr

EClientNetWorkState ={
    NOT_UNABLE = 0,
    NORMAL = 1,
    CONNECTED_FAILED = 2,
    DISCONNECTED = 3,
}

EClientState={
    E_CS_ReconectFail = -2,
    E_CS_Reconect = -1,
    E_CS_Login = 0,
    E_CS_Hall=1,
    E_CS_Table=2,
}


----------------FightPowerDelay---------------------
Client.fightPowerDelay=false
Client.lastFightPower=nil
----------------City init var-----------------------
Client.m_CurrentState=EClientState.E_CS_Login
Client.NetState = EClientNetWorkState.NORMAL
Client.CurrentCityId = 0
---------------------Network------------------------

function Client.ListenNetwork( state,ip,port )
    require "Utils/TishiCentre"
    LuaDebug.Log(ip .. "  netState call " .. state)
    if  state ==  EClientNetWorkState.DISCONNECTED or state == EClientNetWorkState.CONNECTED_FAILED or state == EClientNetWorkState.NOT_UNABLE then
        if Client.m_CurrentState==EClientState.E_CS_Login or Client.m_CurrentState==EClientState.E_CS_Reconect then
            Client.m_CurrentState = EClientState.E_CS_Reconect
            Client.lastIP = ip
            Client.lastPort = port
            ClientInfo.isFirstLogin = false
            --Client.NetConnectFail()
        else
            Client.NetDisconnect()
            if Client.m_CurrentState == EClientState.E_CS_Table then
                local ref = LuaMessageBox.ShowSingle(Text.Disconnected, nil, Text.Confirm, self)
                ref.button_Single:SetActive(false)
            end
        end
        Client.ConnectGoWrong:Do()
    end

    Client.NetState = state
end

function Client.NetDisconnect()
    --require "BattleSceneUI/GameBase"
	--GameBase.GameExit()
end

function Client.NetConnectFail()
    local prefab = LuaUIViewCtr.OpenUIHasBg("ToolsUI/MessageBox")
    LuaMessageBox.SetDataTable(prefab, {Message = Text.ConnectError,
                                        ConfirmName = Text.RetryText ,ConfirmFunc = Client.RetryConnect,
                                        --CancelName = Text.ServerList ,CancelFunc = Client.ShowServerListFunc,
                                        CancelName = Text.Cancel ,CancelFunc = Client.ShowServerListFunc,
                                        ref=self})
end

function Client.RetryConnect()
    LuaNetwork.DisConnect()
    local ret = LuaNetwork.Connect(Client.lastIP,Client.lastPort)
    if ret then
        Client.NetState = EClientNetWorkState.NORMAL
        Client.ConnectSuccess:Do()
    end
end

function Client.ShowServerListFunc()
    --Client.ShowServerList:Do()
end

function Client.RetryConnectByLastIp()
    local lastIpStr = PlayerPrefsEx.GetString("LastIp")
    local lastPortStr = PlayerPrefsEx.GetString("LastPort")
    LuaDebug.Log("ip: "..lastIpStr..", prot: "..lastPortStr)
    LuaNetwork.DisConnect()
    LuaNetwork.Connect(lastIpStr, lastPortStr)
end

function Client.LogicCloseSocket()
    Client.NetState = EClientNetWorkState.DISCONNECTED
end

function Client.NetCloseSocket(reason)
    -- EMCJ_LEAVE_REPEAT_LOGIN 3，帐号在其他设备登录，只能杀进程了
    if reason == enumEMCJLogInOutReason.EMCJ_LEAVE_REPEAT_LOGIN then
        local ref = LuaMessageBox.ShowSingle(Text.RepeatLogin, nil, Text.Confirm, self)
        ref.button_Single:SetActive(false)
        return
    end

    Client.LogicCloseSocket()
    --[[
    local prefab = LuaUIViewCtr.OpenUIHasBg("ToolsUI/MessageBox")
    LuaMessageBox.SetDataTable(prefab, {Message = Text.ConnectError.."，代码："..reason,
                                        ConfirmName = Text.RetryText ,ConfirmFunc = Client.RetryConnectByLastIp,
                                        CancelName = Text.Cancel ,CancelFunc = Client.ShowServerListFunc,
                                        ref=self})
    --]]
end

Client.PingThreshold = 3000
Client.PvpPingInterval = 1
Client.NormalPingInterval = 5
function Client.PingCallBack(ping)
    if not Client.RoleInfo.PingsT then
        Client.RoleInfo.PingsT = {}
    end
    local pingsT = Client.RoleInfo.PingsT
    table.insert(pingsT,ping)
    local effectPing = Client.GetEffectivePing(ping)
    if effectPing > Client.PingThreshold then
        Client.PingReachThreshold()
    end
end

function Client.GetEffectivePing(ping)
    local pingsT = Client.RoleInfo.PingsT
    table.sort(pingsT,function(data1,data2) return data1 > data2 end)
    local effectDataSum = 0
    local dataCount = #(pingsT)
    local startIndex = 1
    local endIndex = dataCount
    local effectDataCount = dataCount

    if dataCount >2 then
        startIndex = 2
        endIndex = dataCount-1
        effectDataCount = dataCount - 2
    end
    for i = startIndex,endIndex do
        effectDataSum = effectDataSum + pingsT[i]
    end
    local effectData = effectDataSum/effectDataCount

    return effectData
end

function Client.PingReachThreshold()
    LuaNetwork.DisConnect()
    LuaMessageBox.ShowSingle(Text.PingTooHigh, function ()
        GameBase.DoGameExit()
    end)
end

function  Client.UpdateGVGTime()
  if Client.updateGVGTimeEvent then
      Client.RemoveGVGTimeUpdate()
  end
  if Client.RoleInfo.GVGMgr.battlefield == nil then
      return
  end
  local leftTime = Client.RoleInfo.GVGMgr.battlefield.leftTime
  if leftTime ~= nil and leftTime ~= 0 then
      Client.updateGVGTimeEvent = Timer.NewGlobalEvent(10,leftTime*10,Client.UpdateGVGTimeHandle,false,nil)
  end
end

function Client.UpdateGVGTimeHandle()
    if Client.RoleInfo.GVGMgr.battlefield == nil then
        return
    end
    Client.RoleInfo.GVGMgr.battlefield.leftTime = Client.RoleInfo.GVGMgr.battlefield.leftTime - 1
    if Client.RoleInfo.GVGMgr.battlefield.leftTime == 0 then
        Client.RemoveGVGTimeUpdate()
    end
end

function Client.RemoveGVGTimeUpdate()
    if Client.updateGVGTimeEvent then
        Timer.RemoveGlobalEvent(Client.updateGVGTimeEvent)
        Client.updateGVGTimeEvent = nil
    end
end

function Client.UpdateGVGProgressStateTime()
    if Client.updateGVGProgressEvent then
        Client.RemoveGVGProgressStateTimeUpdate()
    end
    if Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown == 0 then
        return
    end
    local leftTime = Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown
    if leftTime ~= nil and leftTime ~= 0 then
        Client.updateGVGProgressEvent = Timer.NewGlobalEvent(10,leftTime*10,Client.UpdateGVGProgressStateTimeHandle,false,nil)
    end
end

function Client.UpdateGVGProgressStateTimeHandle()
    if Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown == 0 then
        return
    end
    Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown = Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown - 1
    if Client.RoleInfo.CorpsMgr.GVGProgressTimeHint.countdown == 0 then
        Client.RemoveGVGProgressStateTimeUpdate()
    end
end

function Client.RemoveGVGProgressStateTimeUpdate()
    if Client.updateGVGProgressEvent then
        Timer.RemoveGlobalEvent(Client.updateGVGProgressEvent)
        Client.updateGVGProgressEvent = nil
    end
end

------------------------ExitGame--------------------
function Client.SuccessExitGame()
    Client.m_CurrentState=EClientState.E_CS_Login
    if Application.get_loadedLevelName() ~= 'Login' then
        UnityLevelMgr.LoadLevel("Login")
    end
    Client.RemoveGVGTimeUpdate()
    Client.RemoveGVGProgressStateTimeUpdate()
end

-------------------------Event Function Called From C#-----------------
function Client.FuncUIOpen(uiRefTable,luaBehavType)
    --LuaDebug.Log("startype " .. luaBehavType)
    if uiRefTable.uiName then
        if Client.OpenUIWithType[luaBehavType] then
            Client.OpenUIWithType[luaBehavType][uiRefTable] = uiRefTable
        else
            Client.OpenUIWithType[luaBehavType] = {}
            Client.OpenUIWithType[luaBehavType][uiRefTable] = uiRefTable
        end
    end
    Client.UIOpen:Do(uiRefTable)
end

function Client.FuncUIDestroy(uiRefTable,luaBehavType)
    --LuaDebug.Log("destype " .. luaBehavType)
    if uiRefTable.uiName then
        if Client.OpenUIWithType[luaBehavType] ~= nil then
            Client.OpenUIWithType[luaBehavType][uiRefTable] = nil
        end
    end
    Client.UIDestroy:Do(uiRefTable)
end

function Client.FuncApplicationPause(isPause)
    Client.ApplicationPause:Do(isPause)
end

function Client.EscapeBtnOnClick()
    --LuaDebug.Log("escape")
end

function Client.GotoGodCity()
    if not InOutBtnMoveCtr.IsActiveForSmallBtn("OpenFairy") then
        TishiCentre.DisPlayText(Text.FairySystemTips)
        return
    end
    Client.RoleInfo.FairyMgr:GotoGodCity(function ()
        TishiCentre.DisPlayText(Text.FairyTrainTips)
    end)
end

-----------------------------Events------------------------------

-----common
Client.UIOpen = Event.Create()
Client.UIDestroy = Event.Create()
Client.ApplicationPause = Event.Create()
Client.ServerMsgGet = Event.Create()
Client.BuyCDTimeSuccess = Event.Create()
Client.BuyDayCountSuccess = Event.Create()
Client.SetBigBtnMoveInOut = Event.Create()
----Concrete events
Client.SessionCreated = Event.Create()
Client.LoginSuccess = Event.Create()
Client.ConnectSuccess = Event.Create()
Client.ConnectGoWrong = Event.Create()
Client.NeedUpdateGame = Event.Create()
--Client.NetDisconnect = Event.Create()
Client.LoginBeReplaced = Event.Create()
Client.ShowServerList = Event.Create()
Client.LoginAccountExit = Event.Create()

----Bag events
Client.ItemInBagAdded = Event.Create()
Client.ItemInBagDeleted = Event.Create()
Client.ItemInBagQuantityChanged = Event.Create()

---- Tool tip
Client.DisplayItemToolTipInBag = Event.Create()
Client.DisplayHallowBagToolTip = Event.Create()
Client.DisplayHallowPartToolTip = Event.Create()
Client.DisplayAmuletBagToolTip = Event.Create()
Client.DisplayAmuletPartToolTip = Event.Create()
Client.DisplayItemToolTipInShowBag = Event.Create()
Client.DisplayGemToolTipInBag = Event.Create()
Client.DisplayGemToolTipInRole = Event.Create()
Client.ToolTipUpdate = Event.Create()
Client.AmulteItemSelect = Event.Create()
---Login events
Client.RoleSummarySuccess = Event.Create()
Client.CreateRoleSuccess = Event.Create()
Client.RemoveRoleSuccess = Event.Create()
--Client.RegisteSuccess = Event.Create()
Client.EnterGameSuccess =Event.Create()
Client.ExitGameSuccess=Event.Create()
Client.RoleSelect = Event.Create()
Client.RoleAnimationEnd = Event.Create()
Client.GetRoleNameSuccess = Event.Create()

--City
Client.CityEnter = Event.Create()
Client.CityEnterNotify = Event.Create()
Client.CityQuitNotify = Event.Create()
Client.CityDisplay = Event.Create()
Client.CityRobotDisplay = Event.Create()
Client.CityMove = Event.Create()
Client.CityFObjMoveStop = Event.Create()
Client.GangNameNotify = Event.Create()
--Client.AwardStateChange = Event.Create()
Client.CityCreateCastleNpc = Event.Create()
Client.CityRemoveNpc = Event.Create()
Client.CityUpdateNpcHeadUp = Event.Create()
--Fight
Client.RoomStart = Event.Create()
Client.AIPVPSuccess = Event.Create()
Client.HonorIsOpen = Event.Create()
Client.PVPPatchTimeOut = Event.Create()
Client.ReliveSuccess = Event.Create()
Client.QuitRoomSuccess = Event.Create()
Client.ChangeCreateRole = Event.Create()

--Player
Client.PlayerLevelUp = Event.Create()
Client.NetPlayerLevelUp = Event.Create()
Client.NetPlayerHallowChange = Event.Create()
Client.NetPlayerFairyChange = Event.Create()
Client.PlayerVipLevelChange = Event.Create()
Client.NetVipChange = Event.Create()
Client.PlayerTotalChargeChange = Event.Create()
Client.PlayerRedDiamondChange = Event.Create()

--currency
Client.UpdateCurrency = Event.Create()
Client.HideCurBackGround = Event.Create()
Client.SetTitleActive = Event.Create()
--task
Client.TaskStateUpdate = Event.Create()

--Guide
Client.EnterBattle = Event.Create()
Client.FinishBattle = Event.Create()
Client.OpenNewBtn = Event.Create()
Client.RefreshBigBtn = Event.Create()
Client.ReachNPC = Event.Create()
Client.StartGuide = Event.Create()
Client.AutoBtnTaskGuide = Event.Create()

----new prompt point ----
Client.PromptStateChanged = Event.Create()

Client.PromptPointChanged = Event.Create()

Client.ExpValuesChanged=Event.Create()

--platform
Client.onSdkInitFinish = Event.Create()

Client.ShowToolTips = Event.Create()
Client.AnnounceHandle = Event.Create()
Client.ShowOrHideAnnounce = Event.Create()


-- majiang logic Event
Client.TableChooseCard = Event.Create()
Client.TablePlayCardEnd = Event.Create()
Client.BottomPlayCard = Event.Create()
Client.DeleteCard = Event.Create()
Client.ResetToward = Event.Create()
Client.TableClear = Event.Create()
Client.TableClose = Event.Create()
Client.PlayRecordVoice = Event.Create()
Client.RecordVoiceEnd = Event.Create()
