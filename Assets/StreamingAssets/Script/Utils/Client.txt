require "Utils/LuaHelpTips"
require "Utils/ClientInfo"
require "Utils/RoleInfo"
require "Utils/TishiTimeMgr"

Client = {}

---------------------Variables------------------------
Client.NetPlayers = {}
Client.LoginPlayers = {}
Client.ClientInfo = ClientInfo
Client.RoleInfo = nil
Client.WipeInfo = {}
Client.PlatformInfo = {}
Client.OpenUIWithType = {}

EClientNetWorkState ={
    NOT_UNABLE = 0,
    NORMAL = 1,
    CONNECTED_FAILED = 2,
    DISCONNECTED = 3,
}

EClientState={
    E_CS_ReconectFail = -2,
    E_CS_Reconect = -1,
    E_CS_Login = 0,
    E_CS_Hall=1,
    E_CS_Table=2,
    E_CS_TableReady=3,
}

----------------City init var-----------------------
Client.m_CurrentState=EClientState.E_CS_Login
Client.CurrentCityId = 0
---------------------Network------------------------

function Client.ListenNetwork( state,ip,port )
    require "Utils/TishiCentre"
    LuaDebug.Log("netState call " .. state)
    if  state ==  EClientNetWorkState.DISCONNECTED or state == EClientNetWorkState.CONNECTED_FAILED or state == EClientNetWorkState.NOT_UNABLE then
        if Client.m_CurrentState==EClientState.E_CS_Login or Client.m_CurrentState==EClientState.E_CS_Reconect then
            Client.m_CurrentState = EClientState.E_CS_Reconect
            Client.lastIP = ip
            Client.lastPort = port
            --ClientInfo.isFirstLogin = false
            --Client.NetConnectFail()
        end

        Client.OpenNetLoadingUI()
        Client.NetConnectFailed:Do()
    elseif state == EClientNetWorkState.NORMAL then
        Client.NetConnectSuccess:Do()
    end
end

function Client.NetConnectFail()
    local prefab = LuaUIViewCtr.OpenUIHasBg("ToolsUI/MessageBox")
    LuaMessageBox.SetDataTable(prefab, {Message = Text.ConnectError,
                                        ConfirmName = Text.RetryText ,ConfirmFunc = Client.RetryConnect,
                                        --CancelName = Text.ServerList ,CancelFunc = Client.ShowServerListFunc,
                                        CancelName = Text.Cancel ,CancelFunc = Client.ShowServerListFunc,
                                        ref=self})
end

function Client.RetryConnect()
    LuaNetwork.DisConnect()
    local ret = LuaNetwork.Connect(Client.lastIP,Client.lastPort)
end

function Client.ShowServerListFunc()
    --Client.ShowServerList:Do()
end

function Client.RetryConnectByLastIp()
    local lastIpStr = PlayerPrefsEx.GetString("LastIp")
    local lastPortStr = PlayerPrefsEx.GetString("LastPort")
    --LuaDebug.Log("ip: "..lastIpStr..", prot: "..lastPortStr)
    LuaNetwork.DisConnect()
    LuaNetwork.Connect(lastIpStr, lastPortStr)
end

function Client.NetCloseSocket(reason)
    -- EMCJ_LEAVE_REPEAT_LOGIN 3，帐号在其他设备登录，只能杀进程了
    if reason == enumEMCJLogInOutReason.EMCJ_LEAVE_REPEAT_LOGIN then
        local ref = LuaMessageBox.ShowSingle(Text.RepeatLogin, Client.ExitGame, Text.Exit, self)
    elseif reason == enumEMCJLogInOutReason.EMCJ_LEAVE_SIGUSR2 then
        local ref = LuaMessageBox.ShowSingle(Text.LeaveSIGUSR2, Client.ExitGame, Text.Exit, self)
    elseif reason == enumEMCJLogInOutReason.EMCJ_LEAVE_PING_ERROR then
        local ref = LuaMessageBox.ShowSingle(Text.LeavePing, Client.RetryConnectByLastIp, Text.RetryText, self)
    end

    --[[
    local prefab = LuaUIViewCtr.OpenUIHasBg("ToolsUI/MessageBox")
    LuaMessageBox.SetDataTable(prefab, {Message = Text.ConnectError.."，代码："..reason,
                                        ConfirmName = Text.RetryText ,ConfirmFunc = Client.RetryConnectByLastIp,
                                        CancelName = Text.Cancel ,CancelFunc = Client.ShowServerListFunc,
                                        ref=self})
    --]]
end

function Client.LoginAgain()
    UnityLevelMgr.LoadLevelName("Update")
end

function Client.ExitGame()
    LuaDebug.Log("Client.ExitGame")
    Application.Quit()
end

function Client.SeriousError(tips)
    if Client.seriousErrorRef == nil then
        Client.seriousErrorRef = LuaUIViewCtr.OpenUIHasBg("ToolsUI/MessageBox")
        LuaMessageBox.SetDataTable(Client.seriousErrorRef, {Message = tips,
                                        ConfirmName = Text.LoginAgain ,ConfirmFunc = Client.LoginAgain,
                                        CancelName = Text.ExitGame ,CancelFunc = Client.ExitGame,
                                        ref=self})
    end
end

function Client.OpenLoadingUI()
    if Client.loadingRef == nil then
		Client.loadingRef = LuaUIViewCtr.OpenUINotLose("CommonUI/LoadingUI")
	end
end

function Client.CloseLoadingUI()
    if Client.loadingRef ~= nil then
        Client.loadingRef.gameObject:Destroy1()
        Client.loadingRef = nil
    end
end

function Client.OpenNetLoadingUI()
    LuaDebug.Log("OpenNetLoadingUI")
    if Client.netLoadingRef == nil then
		Client.netLoadingRef = LuaUIViewCtr.OpenUINotLose("CommonUI/NetLoadingUI")
	end
end

function Client.CloseNetLoadingUI()
    if Client.netLoadingRef ~= nil then
        Client.netLoadingRef.gameObject:Destroy1()
        Client.netLoadingRef = nil
    end
end

Client.PingThreshold = 1*30*10000000
Client.SendPingThreshold = 1*10*10000000

-- ticks 100纳秒   100 毫微秒
function Client.CheckPing()
    -- 如果差值大于1分钟，则提示玩家网络异常
    --LuaDebug.Log("Ticks_Now: "..long_to_id(LuaDateTime.Ticks_Now()))
    --LuaDebug.Log(".PingTime: "..long_to_id(Client.PingTime))
    if LuaDateTime.LongLess(LuaDateTime.LongAdd(Client.PingTime, long_get(Client.PingThreshold)), LuaDateTime.Ticks_Now()) then
        Client.PingReachThreshold()
        return
    end

    -- 如果这个差值大于30秒，则向服务器发送心跳消息
    --if LuaDateTime.LongLess(LuaDateTime.LongAdd(Client.PingTime, long_get(Client.SendPingThreshold)), LuaDateTime.Ticks_Now()) then
        ClientSendMsg.SendGameHeartBeat()
    --end
end

function Client.PingReachThreshold()
    LuaDebug.Log("Client.PingReachThreshold()")
    Client.OpenNetLoadingUI()

    Timer.RemoveGlobalEvent(Client.PingGlobalTimer)
    Client.PingGlobalTimer = nil
end

------------------------ExitGame--------------------
function Client.SuccessExitGame()
    Client.m_CurrentState=EClientState.E_CS_Login
    if Application.get_loadedLevelName() ~= 'Login' then
        UnityLevelMgr.LoadLevel("Login")
    end
end

-------------------------Event Function Called From C#-----------------
function Client.FuncUIOpen(uiRefTable,luaBehavType)
    --LuaDebug.Log("startype " .. luaBehavType)
    if uiRefTable.uiName then
        if Client.OpenUIWithType[luaBehavType] then
            Client.OpenUIWithType[luaBehavType][uiRefTable] = uiRefTable
        else
            Client.OpenUIWithType[luaBehavType] = {}
            Client.OpenUIWithType[luaBehavType][uiRefTable] = uiRefTable
        end
    end
    Client.UIOpen:Do(uiRefTable)
end

function Client.FuncUIDestroy(uiRefTable,luaBehavType)
    --LuaDebug.Log("destype " .. luaBehavType)
    if uiRefTable.uiName then
        if Client.OpenUIWithType[luaBehavType] ~= nil then
            Client.OpenUIWithType[luaBehavType][uiRefTable] = nil
        end
    end
    Client.UIDestroy:Do(uiRefTable)
end

function Client.FuncApplicationPause(isPause)
    -- 切回来时判断一下，如果网络没有连接则重连一下
    if Client.m_CurrentState == EClientState.E_CS_Table or Client.m_CurrentState == EClientState.E_CS_Hall
        or Client.m_CurrentState == EClientState.E_CS_TableReady then
        --if not LuaNetwork.IsConnected() then
        if not isPause then
            Client.RetryConnectByLastIp()
        end
    end

    Client.ApplicationPause:Do(isPause)
end

function Client.IsDebugPlatform()
    if GameDefine_isLoginDebug == nil or GameDefine_isLoginDebug == true or
    Application.get_platform()==ERuntimePlatform.WindowsPlayer or Application.get_platform()==ERuntimePlatform.WindowsEditor then
        return true
    end

    return false
end

-----------------------------Events------------------------------

-----common
Client.UIOpen = Event.Create()
Client.UIDestroy = Event.Create()
Client.ApplicationPause = Event.Create()
Client.ServerMsgGet = Event.Create()
Client.BuyCDTimeSuccess = Event.Create()
Client.BuyDayCountSuccess = Event.Create()
Client.SetBigBtnMoveInOut = Event.Create()
----Concrete events
Client.SessionCreated = Event.Create()
Client.LoginSuccess = Event.Create()
Client.ConnectSuccess = Event.Create()
Client.NeedUpdateGame = Event.Create()
Client.LoginBeReplaced = Event.Create()
Client.ShowServerList = Event.Create()
Client.LoginAccountExit = Event.Create()
Client.NetConnectSuccess = Event.Create()
Client.NetConnectFailed = Event.Create()

----Bag events
Client.ItemInBagAdded = Event.Create()
Client.ItemInBagDeleted = Event.Create()
Client.ItemInBagQuantityChanged = Event.Create()

---- Tool tip
Client.DisplayItemToolTipInBag = Event.Create()
Client.DisplayHallowBagToolTip = Event.Create()
Client.DisplayHallowPartToolTip = Event.Create()
Client.DisplayAmuletBagToolTip = Event.Create()
Client.DisplayAmuletPartToolTip = Event.Create()
Client.DisplayItemToolTipInShowBag = Event.Create()
Client.DisplayGemToolTipInBag = Event.Create()
Client.DisplayGemToolTipInRole = Event.Create()
Client.ToolTipUpdate = Event.Create()
Client.AmulteItemSelect = Event.Create()
---Login events
Client.RoleSummarySuccess = Event.Create()
Client.CreateRoleSuccess = Event.Create()
Client.RemoveRoleSuccess = Event.Create()
--Client.RegisteSuccess = Event.Create()
Client.EnterGameSuccess =Event.Create()
Client.ExitGameSuccess=Event.Create()
Client.RoleSelect = Event.Create()
Client.RoleAnimationEnd = Event.Create()
Client.GetRoleNameSuccess = Event.Create()

--City
Client.CityEnter = Event.Create()
Client.CityEnterNotify = Event.Create()
Client.CityQuitNotify = Event.Create()
Client.CityDisplay = Event.Create()
Client.CityRobotDisplay = Event.Create()
Client.CityMove = Event.Create()
Client.CityFObjMoveStop = Event.Create()
Client.GangNameNotify = Event.Create()
--Client.AwardStateChange = Event.Create()
Client.CityCreateCastleNpc = Event.Create()
Client.CityRemoveNpc = Event.Create()
Client.CityUpdateNpcHeadUp = Event.Create()
--Fight
Client.RoomStart = Event.Create()
Client.AIPVPSuccess = Event.Create()
Client.HonorIsOpen = Event.Create()
Client.PVPPatchTimeOut = Event.Create()
Client.ReliveSuccess = Event.Create()
Client.QuitRoomSuccess = Event.Create()
Client.ChangeCreateRole = Event.Create()

--Player
Client.PlayerLevelUp = Event.Create()
Client.NetPlayerLevelUp = Event.Create()
Client.NetPlayerHallowChange = Event.Create()
Client.NetPlayerFairyChange = Event.Create()
Client.PlayerVipLevelChange = Event.Create()
Client.NetVipChange = Event.Create()
Client.PlayerTotalChargeChange = Event.Create()
Client.PlayerRedDiamondChange = Event.Create()

--currency
Client.UpdateCurrency = Event.Create()
Client.HideCurBackGround = Event.Create()
Client.SetTitleActive = Event.Create()
--task
Client.TaskStateUpdate = Event.Create()

--Guide
Client.EnterBattle = Event.Create()
Client.FinishBattle = Event.Create()
Client.OpenNewBtn = Event.Create()
Client.RefreshBigBtn = Event.Create()
Client.ReachNPC = Event.Create()
Client.StartGuide = Event.Create()
Client.AutoBtnTaskGuide = Event.Create()

----new prompt point ----
Client.PromptStateChanged = Event.Create()

Client.PromptPointChanged = Event.Create()

Client.ExpValuesChanged=Event.Create()

--platform
Client.onSdkInitFinish = Event.Create()

Client.ShowToolTips = Event.Create()
Client.AnnounceHandle = Event.Create()
Client.ShowOrHideAnnounce = Event.Create()


-- majiang logic Event
Client.TableChooseCard = Event.Create()
Client.TablePlayCardEnd = Event.Create()
Client.BottomPlayCard = Event.Create()
Client.DeleteCard = Event.Create()
Client.ResetToward = Event.Create()
Client.TableClear = Event.Create()
Client.TableClose = Event.Create()
Client.PlayRecordVoice = Event.Create()
Client.RecordVoiceEnd = Event.Create()
--Client.DeleteRoomAgree = Event.Create()
Client.RefreshNumericVlaue = Event.Create()
Client.PlayChatContent = Event.Create()
Client.TablePlayRightCardEnd = Event.Create()
Client.TablePlayLeftCardEnd = Event.Create()
Client.TablePlayTopCardEnd = Event.Create()
