Util = {}
local util_ = Util

function Util.IndexOf(table,obj)
    for i,v in ipairs(table) do
        if(v == obj) then return i end
    end
    return 0
end


function Util.RandomRange (leftBound,rightBound)
    math.randomseed(os.time())
    math.random(leftBound, rightBound) math.random(leftBound, rightBound) math.random(leftBound, rightBound)
    local randomNum = math.random(leftBound, rightBound)

    return randomNum
end

function Util.TableLength (table)
    local length = 0
    for k,v in pairs(table) do
        if type(v) == 'table' then
            length = length + Util.TableLength (v)
        else
            length = length + 1
        end
    end

    return length
end

function Util.TableInvert(t)
    local invertT = {}
    for k,v in pairs(t) do
        invertT[v] = k
    end
    return invertT
end

function Util.TableInvert(t)
    local invertT = {}
    for k,v in pairs(t) do
        invertT[v] = k
    end
    return invertT
end

function Util.TableIsEqual(t1,t2,ignoreMt)
    --check type
    local type1 = type(t1)
    local type2 = type(t2)
    if type1 ~= type2 then
        return false
    end

    if type1 ~= 'table' and type2 ~= 'table' then
        return t1 == t2
    end
    --check metatable
    local mt = getmetatable(t1)
    if not ignoreMt and mt and mt.__eq then
        return t1 == t2
    end
    --check value
    for k1,v1 in pairs(t1) do
        local vt2 = t2[k1]

        if vt2 == nil or not util_.TableIsEqual(v1,vt2) then
            return false
        end
    end

    for k2,v2 in pairs(t2) do
        local vt1 = t1[k2]

        if vt1 == nil or not util_.TableIsEqual(vt1,v2) then
            return false
        end
    end
    return true
end

function Util.SetTableGC (t,meatatable)
    local prox = newproxy(true)
    getmetatable(prox).__gc = function() meatatable.__gc(t) end
    t[prox] = true
    return setmetatable(t,meatatable)
end

function Util.TableDeepCopy (ori)
    require "Utils/DeepCopy"
    return table.deepcopy(ori)
end

function Util.StringSplit(str,splitChar)
  if not str or string.len(str)==0 then
    return nil
  end

  local result = {}
  while true do
    local pos = string.find(str,splitChar)
    if not pos then
      result[#(result)+1] = str
      break
    end
    local subStr = string.sub(str,1,pos-1)
    result[#(result)+1] = subStr
    str = string.sub(str,pos+1,#(str))
  end

  return result
end

function Util.StringSplitWithSplitChar(str,splitChar)
  if not str or string.len(str)==0 then
    return nil
  end

  local result = {}
  while true do
    local pos = string.find(str,splitChar)
    if not pos then
        if str ~= "" then
            table.insert(result,str)
        end
        break
    else
        local subStr = string.sub(str,1,pos-1)
        if subStr ~= "" then
            table.insert(result,subStr)
        end
        str = string.sub(str,pos+1,string.len(str))
    end
  end
  return result
end

function Util.Trim(str)
    if not str or string.len(str)==0 then
      return nil
    end

    local findChar = false
    local prepos = 1
    local lastpos = string.len(str)

    while prepos <= string.len(str) do
        local char = string.sub(str, prepos, prepos)
        if char ~= " " and char ~= "\n" and char ~= "\t" and char ~= "\r" then
            break
        end
        prepos = prepos + 1
    end

    while lastpos >= 1 do
        local char = string.sub(str, lastpos, lastpos)
        if char ~= " " and char ~= "\n" and char ~= "\t" and char ~= "\r" then
            break
        end
        lastpos = lastpos - 1
    end
    return string.sub(str, prepos, lastpos)
end

function Util.Trim1(s)
    return (s:gsub("^%s*(.-)%s*$", "%1"))
end

--posStr templete "(1,1,1,1)"
function Util.GetPosFromStr (posStr)
    local strLen = string.len(posStr)
    local strWithOutBrakets = string.sub(posStr,2,strLen-1)
    local posStrT = Util.StringSplitWithSplitChar(strWithOutBrakets,",")
    for i,v in ipairs(posStrT) do
        posStrT[i] = tonumber(v)
    end
    return posStrT
end


--------------event------------------------
Event = {}
Event.__index = Event

function Event.Create()
	local event = setmetatable({},Event)
	event.receiver = {}
	event.funcs = {}
	return event
end

Event.__add = function (self,obj)
	table.insert(self.receiver,obj[1])
	table.insert(self.funcs,obj[2])
	return self
end

Event.__sub = function (self,obj)
	for i,v in ipairs(self.receiver) do
		if(v == obj[1] and self.funcs[i] == obj[2]) then
			table.remove(self.receiver,i)
			table.remove(self.funcs,i)
		end
	end
	return self
end

function Event:Do( ... )
	for i,v in ipairs(self.receiver) do
        if self.funcs[i] == nil then
            LuaDebug.Log("Event error:cant find func in " .. v.gameObject:get_name())
            return
        end

        self.funcs[i](v,...)
	end
end
---------------Calculate chineseChars Num--------------------
function Util.GetChineseNum(str)
    if str == nil then
        return
    end
    local chinesCheck = "[%z\1-\127\194-\244][\128-\191]*"
    local totalNum = 0
    for v in string.gfind(str,chinesCheck) do
        if #v ~= 1 then
            totalNum = totalNum + 1
        end
    end
    return totalNum
end
----------------------Calculate emotion Num-----------------------------
function Util.GetEmotionNum(str)
    if str == nil then
        return
    end
    local emotionCheck = "#(%w+)#"
    local emotionNum = 0
    local emotionCharNum = 0
    while true do
        local posStart,posEnd,value = string.find(str,emotionCheck)
        if not posStart or not posEnd then
            break
        end
        if tonumber(value) >= 1 and tonumber(value) <= 22 then
            emotionNum = emotionNum + 1
            if tonumber(value) <10 then
                emotionCharNum = emotionCharNum + 3
            else
                emotionCharNum = emotionCharNum + 4
            end
        end
        str = string.sub(str,posEnd+1,#(str))
    end
    return emotionNum,emotionCharNum
end
---------------Cut Chat Num--------------------
function Util.GetCharCutNum(msg,posNum)
    if msg == nil then
        return
    end
    local chineseNum = Util.GetChineseNum(msg)
    local emotionNum,emotionCharNum = Util.GetEmotionNum(msg)
    local charNum = #msg - chineseNum*3 - emotionCharNum
    local totalNum = 0
    totalNum = chineseNum*2 + emotionNum*3 + charNum*1.1
    --charNum*1.1
    if totalNum > posNum then
        --以占位为标准，比如中文字占2个，表情占3个，普通字符占1个
        local needCutNum = totalNum - posNum
        local shouldCutNum = Util.GetCutNum(needCutNum,msg)
        return shouldCutNum
    else
        return 0
    end

end

function Util.GetCutNum(cutPosNum,tmpstr)
    --local str = string.reverse(tmpstr)
    local str = tmpstr
    local chineseFinished = false
    local emotionFinished = false

    local chinesCheck = "[%z\1-\127\194-\244][\128-\191]*$"
    local emotionCheck = "#(%w+)#$"
    local shouldCutNum = 0

    while cutPosNum > 0 do
        local hasCheck = false
        if not chineseFinished then
            local posStart,posEnd = string.find(str,chinesCheck)
            if not posStart or not posEnd then
                chineseFinished = true
            else
                if posEnd - posStart == 2 and posEnd == #str then
                    shouldCutNum = shouldCutNum + 3
                    hasCheck = true
                    cutPosNum = cutPosNum - 2
                    str = string.sub(str,1,posStart-1)
                end
            end
        end
        if not emotionFinished and not hasCheck then
            local posStart,posEnd,value = string.find(str,emotionCheck)
            if not posStart or not posEnd then
                emotionFinished = true
            else
                if tonumber(value) >= 1 and tonumber(value) <= 22 then
                    if posEnd == #str then
                        hasCheck = true
                        if tonumber(value) < 10 then
                            shouldCutNum = shouldCutNum + 3
                        else
                            shouldCutNum = shouldCutNum + 4
                        end
                        cutPosNum = cutPosNum - 3
                        str = string.sub(str,1,posStart-1)
                    end
                end
            end
        end
        if not hasCheck then
            shouldCutNum = shouldCutNum + 1
            cutPosNum = cutPosNum - 1
            str = string.sub(str,1,#(str)-1)
        end
    end
    return shouldCutNum
end
---------------time function--------------------
function Util.GetTimeStrTable(seconds)
    local timeTable = Util.GetTimeTable (seconds)
    timeTable.Day = Util.TimeNumber2String(timeTable.Day)
    timeTable.Hour = Util.TimeNumber2String(timeTable.Hour)
    timeTable.Minute = Util.TimeNumber2String(timeTable.Minute)
    timeTable.Second = Util.TimeNumber2String(timeTable.Second)
    return timeTable
end

function Util.TimeNumber2String(number)
    if number < 10 then
        return "0"..number
    end
    return tostring(number)
end

--将秒转换成时分秒形式
function Util.GetTimeTable (seconds)
    local timeTable = {}
    timeTable.Minute, timeTable.Second = Util.SystemTransformPart(seconds, 60)
    timeTable.Hour, timeTable.Minute = Util.SystemTransformPart(timeTable.Minute, 60)
    timeTable.Day,timeTable.Hour = Util.SystemTransformPart(timeTable.Hour, 24)
    return timeTable
end

function Util.GetHour (seconds)
    local hour = Util.SystemTransformPart(seconds, 3600)
    return hour
end

function Util.SystemTransform(number, base)
    if base == 0 then return nil end
    return tonumber(string.format("%0.4f", (number / base)))
end

--将十进制数转换到其他进制数下,获取整数部分
--@number 待转换的源数据
--@baee 进制基数
--#result 转换后的整数部分
--#remain 转换后保留部分
function Util.SystemTransformPart(number, base)
    if base == 0 then return nil end
    local result = math.floor(number / base)
    local remain = math.floor(number - result * base)
    return result, remain
end

-----------------------num change---------------------------------
function Util.TransformItemNum2Str(number)
    local resultStr = ""
    local numMin = LuaCDataMgr.GameConfig():GetData2(87,WDB_GameConfig.Param)

    if tonumber(number) >= numMin then
        resultStr = Util.SystemTransformPart(number,10000) .. "W"
    else
        resultStr = tostring(number)
    end
    return resultStr
end

-----------------------color str---------------------------------
function Util.GetColorStr(color,str)
    return string.format("[%s]%s[-]",color,str)
end

function Util.GetNeedCountString(count,needCount)
    local color=ColorFilter.ItemQuality[EItemQuality.Red]
    if count>=needCount then
        color=ColorFilter.ItemQuality[EItemQuality.Green]
    end
    return string.format("[%s]%d[-]/%d",color,count,needCount)
end

-----------------------get gray color----------------------------
function Util.GetGrayColor()
    return LuaColor.Get(102/255,102/255,102/255,1)
end

function Util.GetItemNumStrState(curHasNum,needNum)
    local resultStr = ""
    local needNumStr = Util.GetColorStr(ColorFilter.Color_FFFFFF,"/" .. Util.TransformItemNum2Str(needNum))
    if curHasNum >= needNum then
        resultStr = Util.GetColorStr(ColorFilter.Color_51BF53,Util.TransformItemNum2Str(curHasNum)) .. needNumStr
    else
        resultStr = Util.GetColorStr(ColorFilter.Color_D53E52,Util.TransformItemNum2Str(curHasNum)) .. needNumStr
    end
    return resultStr
end

-----------------------common color str---------------------------------
function Util.GetCommonColorStr(str)
    return Util.GetColorStr(ColorFilter.Color_51BF53,str)
end

-----------Handle Hall UI----------------------
function Util.SetSceneActive(isActive)
    require "Utils/LuaUIViewCtr"
    LKPanel.SetActive(isActive)
    RenderSettings.set_fog(isActive)
    LuaUIViewCtr.ShowOrHideUIPanel(isActive)
	if isActive then
        HeadUpPosCtr.SetCam(LuaUIViewCtr.mainCam)
    end
    --隐藏主城摇杆与关闭摄像机
    if CityControl ~= nil and CityControl.self_() ~= nil then
        CityControl.self_():SetVisible(isActive,true)
    end

    --处理公告
    -- LuaUIViewCtr.ShowOrHideAnnounce(isActive)
    Client.ShowOrHideAnnounce:Do(isActive)
end

-----------logic----------------------

function Util.GetMoneySpriteName (type)
    if type == EAwardType.MONEY then
        return "icon_03"
    elseif type == EAwardType.DIAMOND then
        return "icon_02"
    elseif type == EAwardType.SPAR then --晶石--图集有待确定
        return "Crystal"
    elseif type == EAwardType.RED_DIAMOND then
        return "icon_01"
    elseif type == EAwardType.REIKI then --灵气
        return "icon_08"
    elseif type == EAwardType.EXP then
        return "icon_09"
    elseif type == EAwardType.GANG_EXP then  --骑士团经验
        return "icon_09"
    elseif type == EAwardType.HOROSCOPE_EXP then  --占星经验
        return "icon_09"
    elseif type == EAwardType.STAMINA then --精力
        return "tili"
    elseif type == EAwardType.TALENT then --图集有待确定
        return "icon_08"
    elseif type == EAwardType.ARMOR then   --护甲片
        return "icon_08"
    elseif type == EAwardType.HONOR then
        return "Battle_Money"
    elseif type == EAwardType.Dragon then
        return "Dragon_money"
    elseif type == EAwardType.Medal then
        return "Medal"
    elseif type == EAwardType.KiloTower then
        return "Point_Money"
    elseif type == EAwardType.CallSoulToken then
        return "Call_money"
    elseif type == EAwardType.SignInScore then      --签到积分
        return "qiandaojifen"
    elseif type == EAwardType.CorpsContribution then
        return "team_contribution"
    elseif type == EAwardType.CorpsGoldcoin then
        return "team_Money"
    elseif type == EAwardType.BeastPoints then
        return "Call_money"
    elseif type == EAwardType.GemStone+1 then
        return "hongbaoshijinghua"
    elseif type == EAwardType.GemStone+2 then
        return "huangbaoshijinghua"
    elseif type == EAwardType.GemStone+3 then
        return "lanbaoshijinghua"
    elseif type == EAwardType.GemStone+4 then
        return "duocaibaoshijinghua"
    elseif type == EAwardType.Power then
        return "batle"
    elseif type == EAwardType.LingeringFragrance then
        return "meilihua"
    elseif type == EAwardType.GhostBreakMaterial then
        return "tupodansmall"
    elseif type == EAwardType.FashionChip then
        return "shizhuang_Money"
    end
end

function Util.GetAwardItemName (type)
    if type == EAwardType.MONEY then
        return Text.Money
    elseif type == EAwardType.DIAMOND then
        return Text.BlueDia
    elseif type == EAwardType.SPAR then --晶石--图集有待确定
        return Text.EAwardType_SPAR
    elseif type == EAwardType.RED_DIAMOND then
        return Text.EAwardType_RED_DIAMOND
    elseif type == EAwardType.REIKI then --灵气
        return Text.EAwardType_REIKI
    elseif type == EAwardType.EXP then
        return Text.EAwardType_EXP
    elseif type == EAwardType.GANG_EXP then  --骑士团经验
        return Text.EAwardType_GANG_EXP
    elseif type == EAwardType.HOROSCOPE_EXP then  --占星经验
        return Text.EAwardType_HOROSCOPE_EXP
    elseif type == EAwardType.STAMINA then --精力
        return Text.EAwardType_STAMINA
    elseif type == EAwardType.TALENT then --图集有待确定
        return Text.EAwardType_TALENT
    elseif type == EAwardType.ARMOR then   --护甲片
        return Text.EAwardType_ARMOR
    elseif type == EAwardType.HONOR then
        return Text.EAwardType_HONOR
    elseif type == EAwardType.Dragon then--屠龙币
        return Text.EAwardType_Dragon
    elseif type == EAwardType.Medal then
        return Text.EAwardType_Medal
    elseif type == EAwardType.KiloTower then
        return Text.EAwardType_KiloTower
    elseif type == EAwardType.CallSoulToken then
        return Text.EAwardType_CallSoulToken
    elseif type == EAwardType.SoulBattle then
        return Text.EAwardType_SoulBattle
    elseif type == EAwardType.GhostShopRreshCount then
        return Text.EAwardType_GhostShopRreshCount
    elseif type == EAwardType.CorpsContribution then
        return Text.EAwardType_CorpsContribution
    elseif type == EAwardType.CorpsGoldcoin then
        return Text.EAwardType_CorpsGoldcoin
    elseif type == EAwardType.BeastPoints then
        return Text.EAwardType_BeastPoints
    elseif type == EAwardType.Power then
        return Text.EAwardType_Power
    elseif type == EAwardType.LingeringFragrance then
        return Text.EAwardType_LingeringFragrance
    end
end

function Util.SetSpriteName(sprite,type)
    sprite:set_spriteName(Util.GetMoneySpriteName(type))
    sprite:MakePixelPerfectWithSizeInAtlas()
end

function Util.AddItemNameToAwards(awards)
    for i,award in ipairs(awards) do
        if award.type == EAwardType.ITEM then
            award.ItemName = LuaCDataMgr.Item():GetData2(award.itemId,WDB_Item.Name)
        else
            --require "WDB/WDB_RewardTypeIcon"
            --award.ItemName =  LuaCDataMgr.RewardTypeIcon():GetData2(award.type, WDB_RewardTypeIcon.Name)
        end
    end
end

function Util.ChangeBtnStyle(imageBtn,style)
    local normalSprite=""
    local hoverSprite=""
    local pressedSprite=""
    imageBtn:set_enable(true)
    if style==EBtnStyle.Orange then
        normalSprite="anniu_cheng"
        hoverSprite="anniu_cheng"
        pressedSprite="anniu_chengliang"
    elseif style==EBtnStyle.Blue then
        normalSprite="anniu_lan"
        hoverSprite="anniu_lan"
        pressedSprite="anniu_lanliang"
    elseif style==EBtnStyle.Gray then
        normalSprite="anniu_hui"
        hoverSprite="anniu_hui"
        pressedSprite="anniu_hui"
        imageBtn:set_enable(false)
    end
    imageBtn:normalSprite(normalSprite)
    imageBtn:hoverSprite(hoverSprite)
    imageBtn:pressedSprite(pressedSprite)
    imageBtn:JustRefresh()
end

function Util.EnterCity (cityInfo)
    Client.RoleInfo.CitySceneIdMgr:SetLastCitySceneId(cityInfo.cityId)
    Client.m_CurrentState=EClientState.E_CS_Hall
    UnityLevelMgr.LoadLevel("GameHall",Client.RoleInfo.CitySceneIdMgr:GetLastCitySceneId())
end

function Util.QuitGang()
    Client.RoleInfo.BackCityOpenUI.UIName = nil
    Client.RoleInfo.BackCityOpenUI.UITitileName = nil
    Client.RoleInfo.CitySceneIdMgr:ResetLastCityIdNormal()
    ClientSendMsg.SendCityEnter(Client.RoleInfo.CitySceneIdMgr:GetLastNormalCitySceneId())
end

---------------array-----------------
--分割字符串
--@str 源字符串
--@delimit 分割字符
--#result 分割后的字符串列表
function Util.Split(str, delimit)
    if str == nil or str == "" or delimit == nil then
		return nil
	end
	local result = {}
	for match in (str..delimit):gmatch("(.-)"..delimit) do
       if match ~= "" then
		  table.insert(result, match)
       end
	end
	return result
end

function Util.NumToMil(num)
    if num >= 1000000 then
        local convertNum=math.floor(num/10000+0.5)
        num = string.format("%dW",convertNum)
    else
        num = tostring(num)
    end
    return num
end

function Util.GetInspireVipNeedLevel(type)
    local inspireVipNeedLevel = 0
    for i=0, LuaCDataMgr.Vip():GetRecordCount()-1 do
        local isCanInspire = LuaCDataMgr.Vip():GetDataByNumber(i, type)
        if isCanInspire == 1 then
            inspireVipNeedLevel = LuaCDataMgr.Vip():GetDataByNumber(i, 0)
            break
        end
    end
    return inspireVipNeedLevel
end

function Util.LoadLoginScene()
    -- if Application.get_platform() == ERuntimePlatform.IPhonePlayer then
    --     if not PlayerPrefs.HasKey("HavePlayed") then
    --         Handheld.PlayFullScreenMovie("cg.mp4", Color.get_black(), 2,1);
    --         PlayerPrefsEx.SetFloat("HavePlayed",1)
    --     end
    -- end
    --CacheManager.get_Instance():model_cache():ClearAllCache()

    require("Utils/TimerManager")
    if Client.IsDebugPlatform() then
    else
        --ResLoader.Load("Scene/level/scene_login_dawn")
    end
    --SceneManager.LoadScene("scene_login_dawn")
    SceneManager.LoadScene1("Login",1)
end

function Util.ConvertNumToText(num)
    local n1=math.floor(num/10)
    local n2=num%10
    local s1=""
    local s2=""
    local s3=""
    if n1>0 then
        s2=Text.NumberText[10]
        if n1>1 then
            s1=Text.NumberText[n1]
        end
    end
    if n2~=0 then
        s3=Text.NumberText[n2]
    end
    return s1..s2..s3
end
